%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: LogoUCI1.pdf
%%Creator: Adobe Acrobat 11.0.3
%%For: Hassan
%%CreationDate: 6/6/2015, 5:31:17 PM
%%BoundingBox: 0 0 279 99
%%HiResBoundingBox: 0 0 278.0501 98.4436
%%CropBox: 0 0 278.0501 98.4436
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf
{load def}bdf
/ddf
{put}bdf
/xddf
{3 -1 roll put}bdf
/xpt
{exch put}bdf
/ndf
{
exch dup where{
pop pop pop
}{
xdf
}ifelse
}def
/cdndf
{
exch dup currentdict exch known{
pop pop
}{
exch def
}ifelse
}def
/gx
{get exec}bdf
/ps_level
/languagelevel where{
pop systemdict/languagelevel gx
}{
1
}ifelse
def
/level2
ps_level 2 ge
def
/level3
ps_level 3 ge
def
/ps_version
{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
/packedarray where{pop packedarray
}{
array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
dup type/stringtype eq{
dup/Red eq{
pop(_Red_)
}{
dup/Green eq{
pop(_Green_)
}{
dup/Blue eq{
pop(_Blue_)
}{
dup()cvn eq{
pop(Process)
}if
}ifelse
}ifelse
}ifelse
}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
AGMUTIL_GSTATE begin
/AGMUTIL_GSTATE_clr_spc currentcolorspace def
/AGMUTIL_GSTATE_clr_indx 0 def
/AGMUTIL_GSTATE_clr_comps 12 array def
mark currentcolor counttomark
{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
/AGMUTIL_GSTATE_fnt rootfont def
/AGMUTIL_GSTATE_lw currentlinewidth def
/AGMUTIL_GSTATE_lc currentlinecap def
/AGMUTIL_GSTATE_lj currentlinejoin def
/AGMUTIL_GSTATE_ml currentmiterlimit def
currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
/AGMUTIL_GSTATE_sa currentstrokeadjust def
/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
/AGMUTIL_GSTATE_op currentoverprint def
/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
/AGMUTIL_GSTATE_ht currenthalftone def
/AGMUTIL_GSTATE_flt currentflat def
end
}def
/set_gstate
{
AGMUTIL_GSTATE begin
AGMUTIL_GSTATE_clr_spc setcolorspace
AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
AGMUTIL_GSTATE_fnt setfont
AGMUTIL_GSTATE_lw setlinewidth
AGMUTIL_GSTATE_lc setlinecap
AGMUTIL_GSTATE_lj setlinejoin
AGMUTIL_GSTATE_ml setmiterlimit
AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
AGMUTIL_GSTATE_sa setstrokeadjust
AGMUTIL_GSTATE_clr_rnd setcolorrendering
AGMUTIL_GSTATE_op setoverprint
AGMUTIL_GSTATE_bg cvx setblackgeneration
AGMUTIL_GSTATE_ucr cvx setundercolorremoval
AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
{
currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
{
 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
}if
}{
AGMUTIL_GSTATE_ht sethalftone
}ifelse
AGMUTIL_GSTATE_flt setflat
end
}def
/get_gstate_and_matrix
{
AGMUTIL_GSTATE begin
/AGMUTIL_GSTATE_ctm matrix currentmatrix def
end
get_gstate
}def
/set_gstate_and_matrix
{
set_gstate
AGMUTIL_GSTATE begin
AGMUTIL_GSTATE_ctm setmatrix
end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
level3
{sethalftone currenthalftone}
{
dup/HalftoneType get 3 eq
{
sethalftone currenthalftone
}{
begin
Width Height mul{
Thresholds read{pop}if
}repeat
end
currenthalftone
}ifelse
}ifelse
}def
/rdcmntline
{
currentfile AGMUTIL_str256 readline pop
(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{
dup type/filetype ne{
exch()/SubFileDecode filter
}{
exch pop
}
ifelse
[
exch
{
AGMUTIL_src256 readstring pop
dup length/AGMUTIL_srcLen exch def
/AGMUTIL_ndx 0 def
AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
1 index exch get
AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
/AGMUTIL_ndx AGMUTIL_ndx 1 add def
}for
pop
AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
}
bind
/exec cvx
]cvx
}bdf
/filter_indexed_devn
{
cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{
4 dict begin
/srcStr xdf
/dstStr xdf
dup type/filetype ne{
0()/SubFileDecode filter
}if
[
exch
[
/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
currentdict/srcStr get/readstring cvx/pop cvx
/dup cvx/length cvx 0/gt cvx[
Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
names_index Names length currentdict/srcStr get length 1 sub{
1/index cvx/exch cvx/get cvx
currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
}for
currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
]cvx/if cvx
/end cvx
]cvx
bind
/exec cvx
]cvx
end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
AGMUTIL_imagefile 0 setfileposition
10 dict begin
/imageDict xdf
/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
/imbufIdx 0 def
/origDataSource imageDict/DataSource get def
/origMultipleDataSources imageDict/MultipleDataSources get def
/origDecode imageDict/Decode get def
/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
{
/imbufCnt imageDict/DataSource get length def
/imbufs imbufCnt array def
0 1 imbufCnt 1 sub{
/imbufIdx xdf
imbufs imbufIdx imbufLen string put
imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
}for
DeviceN_PS2{
imageDict begin
  /DataSource[DataSource/devn_sep_datasource cvx]cvx def
/MultipleDataSources false def
/Decode[0 1]def
end
}if
}{
/imbuf imbufLen string def
Indexed_DeviceN level3 not and DeviceN_NoneName or{
/srcDataStrs[imageDict begin
currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
{
Width Decode length 2 div mul cvi string
}repeat
end]def
imageDict begin
  /DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
/Decode[0 1]def
end
}{
imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
imageDict/Decode[0 1]put
}ifelse
}ifelse
imageDict exch
load exec
imageDict/DataSource origDataSource put
imageDict/MultipleDataSources origMultipleDataSources put
imageDict/Decode origDecode put
end
}bdf
/write_image_file
{
begin
{(AGMUTIL_imagefile)(w+)file}stopped{
false
}{
Adobe_AGM_Utils/AGMUTIL_imagefile xddf
2 dict begin
/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
/imbuf imbufLen string def
}if
1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
pop
MultipleDataSources{
  0 1 DataSource length 1 sub{
DataSource type dup
/arraytype eq{
pop DataSource exch gx
}{
/filetype eq{
DataSource exch get imbuf readstring pop
}{
DataSource exch get
}ifelse
}ifelse
AGMUTIL_imagefile exch writestring
}for
}{
DataSource type dup
/arraytype eq{
pop DataSource exec
}{
/filetype eq{
DataSource imbuf readstring pop
}{
DataSource
}ifelse
}ifelse
AGMUTIL_imagefile exch writestring
}ifelse
}for
end
true
}ifelse
end
}bdf
/close_image_file
{
AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
/pstr statusdict/product get def
pstr(HP LaserJet 2200)eq
pstr(HP LaserJet 4000 Series)eq or
pstr(HP LaserJet 4050 Series )eq or
pstr(HP LaserJet 8000 Series)eq or
pstr(HP LaserJet 8100 Series)eq or
pstr(HP LaserJet 8150 Series)eq or
pstr(HP LaserJet 5000 Series)eq or
pstr(HP LaserJet 5100 Series)eq or
pstr(HP Color LaserJet 4500)eq or
pstr(HP Color LaserJet 4600)eq or
pstr(HP LaserJet 5Si)eq or
pstr(HP LaserJet 1200 Series)eq or
pstr(HP LaserJet 1300 Series)eq or
pstr(HP LaserJet 4100 Series)eq or
{
  userdict/AGMP_current_show/show load put
userdict/show{
 currentcolorspace 0 get
 /Pattern eq
 {false charpath f}
 {AGMP_current_show}ifelse
}put
}if
currentdict/pstr undef
}if
/consumeimagedata
{
begin
AGMIMG_init_common
currentdict/MultipleDataSources known not
{/MultipleDataSources false def}if
MultipleDataSources
{
DataSource 0 get type
dup/filetype eq
{
1 dict begin
/flushbuffer Width cvi string def
1 1 Height cvi
{
pop
0 1 DataSource length 1 sub
{
DataSource exch get
flushbuffer readstring pop pop
}for
}for
end
}if
dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
{
Width Height mul cvi
{
0 1 DataSource length 1 sub
{dup DataSource exch gx length exch 0 ne{pop}if}for
dup 0 eq
{pop exit}if
sub dup 0 le
{exit}if
}loop
pop
}if
}
{
/DataSource load type
dup/filetype eq
{
1 dict begin
/flushbuffer Width Decode length 2 idiv mul cvi string def
1 1 Height{pop DataSource flushbuffer readstring pop pop}for
end
}if
dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
{
Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
{
DataSource length dup 0 eq
{pop exit}if
sub dup 0 le
{exit}if
}loop
pop
}if
}ifelse
end
}bdf
/addprocs
{
 2{/exec load}repeat
 3 1 roll
 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
currenthalftone dup length dict copy begin
 currentdict 2 index known{
  1 index load dup length dict copy begin
currentdict/TransferFunction known{
/TransferFunction load
}{
currenttransfer
}ifelse
 addprocs/TransferFunction xdf
 currentdict end def
currentdict end sethalftone
}{
currentdict/TransferFunction known{
/TransferFunction load
}{
currenttransfer
}ifelse
addprocs/TransferFunction xdf
currentdict end sethalftone
pop
}ifelse
}def
/clonearray
{
dup xcheck exch
dup length array exch
Adobe_AGM_Core/AGMCORE_tmp -1 ddf
{
Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf
dup type/dicttype eq
{
Adobe_AGM_Core/AGMCORE_tmp get
exch
clonedict
Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf
}if
dup type/arraytype eq
{
Adobe_AGM_Core/AGMCORE_tmp get exch
clonearray
Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf
}if
exch dup
Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
}forall
exch{cvx}if
}bdf
/clonedict
{
dup length dict
begin
{
dup type/dicttype eq
{clonedict}if
dup type/arraytype eq
{clonearray}if
def
}forall
currentdict
end
}bdf
/DeviceN_PS2
{
/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
/indexed_colorspace_dict AGMCORE_gget dup null ne{
dup/CSDBase known{
/CSDBase get/CSD get_res/Names known
}{
pop false
}ifelse
}{
pop false
}ifelse
}bdf
/DeviceN_NoneName
{
/Names where{
pop
false Names
{
(None)eq or
}forall
}{
false
}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
/AGMCORE_in_rip_sep where
{
pop dup type dup/arraytype eq exch/packedarraytype eq or
{
dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
{
/currentcolorspace exch AGMCORE_gput
false
}{
true
}ifelse
}{
true
}ifelse
}{
true
}ifelse
}bdf
/base_colorspace_type
{
dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
/pdfmark_5{cleartomark}bind def
}{
/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
currentfile exch 0 exch/SubFileDecode filter
/currentdistillerparams where
{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{flushfile cleartomark}
{/PUT pdfmark}ifelse
}bdf
/ReadBypdfmark_5_string
{
2 dict begin
/makerString exch def string/tmpString exch def
{
currentfile tmpString readline not{pop exit}if
makerString anchorsearch
{
pop pop cleartomark exit
}{
3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
}ifelse
}loop
end
}bdf
/xpdfm
{
{
dup 0 get/Label eq
{
aload length[exch 1 add 1 roll/PAGELABEL
}{
aload pop
[{ThisPage}<<5 -2 roll>>/PUT
}ifelse
pdfmark_5
}forall
}bdf
/lmt{
dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
Adobe_AGM_Utils begin
}bdf
/dt{
currentdict Adobe_AGM_Utils eq{
end
}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
currentpacking
true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
where{
/Adobe_AGM_Core_Id known
}{
false
}ifelse
}ndf
/flushinput
{
save
2 dict begin
/CompareBuffer 3 -1 roll def
/readbuffer 256 string def
mark
{
currentfile readbuffer{readline}stopped
{cleartomark mark}
{
not
{pop exit}
if
CompareBuffer eq
{exit}
if
}ifelse
}loop
cleartomark
end
restore
}bdf
/getspotfunction
{
AGMCORE_screen exch pop exch pop
dup type/dicttype eq{
dup/HalftoneType get 1 eq{
/SpotFunction get
}{
dup/HalftoneType get 2 eq{
/GraySpotFunction get
}{
pop
{
abs exch abs 2 copy add 1 gt{
1 sub dup mul exch 1 sub dup mul add 1 sub
}{
dup mul exch dup mul add 1 exch sub
}ifelse
}bind
}ifelse
}ifelse
}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
/AGMCORE_graphicsave save store
concat
0 setgray
0 setlinecap
0 setlinejoin
1 setlinewidth
[]0 setdash
10 setmiterlimit
np
false setoverprint
false setstrokeadjust
//Adobe_AGM_Core/spot_alias gx
/Adobe_AGM_Image where{
pop
Adobe_AGM_Image/spot_alias 2 copy known{
gx
}{
pop pop
}ifelse
}if
/sep_colorspace_dict null AGMCORE_gput
100 dict begin
/dictstackcount countdictstack def
/showpage{}def
mark
}def
/graphic_cleanup
{
cleartomark
dictstackcount 1 countdictstack 1 sub{end}for
end
AGMCORE_graphicsave restore
}def
/compose_error_msg
{
grestoreall initgraphics
/Helvetica findfont 10 scalefont setfont
/AGMCORE_deltaY 100 def
/AGMCORE_deltaX 310 def
clippath pathbbox np pop pop 36 add exch 36 add exch moveto
0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
0 AGMCORE_&setgray
gsave 1 AGMCORE_&setgray fill grestore
1 setlinewidth gsave stroke grestore
currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
/AGMCORE_deltaY 12 def
/AGMCORE_tmp 0 def
AGMCORE_err_strings exch get
{
dup 32 eq
{
pop
AGMCORE_str256 0 AGMCORE_tmp getinterval
stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
{
currentpoint AGMCORE_deltaY sub exch pop
clippath pathbbox pop pop pop 44 add exch moveto
}if
AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
0 1 AGMCORE_str256 length 1 sub
{
AGMCORE_str256 exch 0 put
}for
/AGMCORE_tmp 0 def
}{
AGMCORE_str256 exch AGMCORE_tmp xpt
/AGMCORE_tmp AGMCORE_tmp 1 add def
}ifelse
}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
[/Separation/None/DeviceCMYK{0 0 0}]
[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
[/Separation(Cyan)/DeviceCMYK{0 0 0}]
[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
[/DeviceCMYK]
]def
/ds{
Adobe_AGM_Core begin
/currentdistillerparams where
{
pop currentdistillerparams/CoreDistVersion get 5000 lt
{<</DetectBlends false>>setdistillerparams}if
}if
/AGMCORE_ps_version xdf
/AGMCORE_ps_level xdf
errordict/AGM_handleerror known not{
errordict/AGM_handleerror errordict/handleerror get put
errordict/handleerror{
Adobe_AGM_Core begin
$error/newerror get AGMCORE_cur_err null ne and{
$error/newerror false put
AGMCORE_cur_err compose_error_msg
}if
$error/newerror true put
end
errordict/AGM_handleerror get exec
}bind put
}if
/AGMCORE_environ_ok
ps_level AGMCORE_ps_level ge
ps_version AGMCORE_ps_version ge and
AGMCORE_ps_level -1 eq or
def
AGMCORE_environ_ok not
{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
/AGMCORE_&setgray systemdict/setgray get def
level2{
/AGMCORE_&setcolor systemdict/setcolor get def
/AGMCORE_&setcolorspace systemdict/setcolorspace get def
}if
/AGMCORE_currentbg currentblackgeneration def
/AGMCORE_currentucr currentundercolorremoval def
/AGMCORE_Default_flatness currentflat def
/AGMCORE_distilling
/product where{
pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
}{
false
}ifelse
def
/AGMCORE_GSTATE AGMCORE_key_known not{
/AGMCORE_GSTATE 21 dict def
/AGMCORE_tmpmatrix matrix def
/AGMCORE_gstack 32 array def
/AGMCORE_gstackptr 0 def
/AGMCORE_gstacksaveptr 0 def
/AGMCORE_gstackframekeys 14 def
/AGMCORE_&gsave/gsave ldf
/AGMCORE_&grestore/grestore ldf
/AGMCORE_&grestoreall/grestoreall ldf
/AGMCORE_&save/save ldf
/AGMCORE_&setoverprint/setoverprint ldf
/AGMCORE_gdictcopy{
begin
{def}forall
end
}def
/AGMCORE_gput{
AGMCORE_gstack AGMCORE_gstackptr get
3 1 roll
put
}def
/AGMCORE_gget{
AGMCORE_gstack AGMCORE_gstackptr get
exch
get
}def
/gsave{
AGMCORE_&gsave
AGMCORE_gstack AGMCORE_gstackptr get
AGMCORE_gstackptr 1 add
dup 32 ge{limitcheck}if
/AGMCORE_gstackptr exch store
AGMCORE_gstack AGMCORE_gstackptr get
AGMCORE_gdictcopy
}def
/grestore{
AGMCORE_&grestore
AGMCORE_gstackptr 1 sub
dup AGMCORE_gstacksaveptr lt{1 add}if
dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
/AGMCORE_gstackptr exch store
}def
/grestoreall{
AGMCORE_&grestoreall
/AGMCORE_gstackptr AGMCORE_gstacksaveptr store
}def
/save{
AGMCORE_&save
AGMCORE_gstack AGMCORE_gstackptr get
AGMCORE_gstackptr 1 add
dup 32 ge{limitcheck}if
/AGMCORE_gstackptr exch store
/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
AGMCORE_gstack AGMCORE_gstackptr get
AGMCORE_gdictcopy
}def
/setoverprint{
dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
}def
0 1 AGMCORE_gstack length 1 sub{
AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
}for
}if
level3/AGMCORE_&sysshfill AGMCORE_key_known not and
{
/AGMCORE_&sysshfill systemdict/shfill get def
/AGMCORE_&sysmakepattern systemdict/makepattern get def
/AGMCORE_&usrmakepattern/makepattern load def
}if
/currentcmykcolor[0 0 0 0]AGMCORE_gput
/currentstrokeadjust false AGMCORE_gput
/currentcolorspace[/DeviceGray]AGMCORE_gput
/sep_tint 0 AGMCORE_gput
/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
/sep_colorspace_dict null AGMCORE_gput
/devicen_colorspace_dict null AGMCORE_gput
/indexed_colorspace_dict null AGMCORE_gput
/currentcolor_intent()AGMCORE_gput
/customcolor_tint 1 AGMCORE_gput
/absolute_colorimetric_crd null AGMCORE_gput
/relative_colorimetric_crd null AGMCORE_gput
/saturation_crd null AGMCORE_gput
/perceptual_crd null AGMCORE_gput
currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
<<
/MaxPatternItem currentsystemparams/MaxPatternCache get
>>
setuserparams
end
}def
/ps
{
/setcmykcolor where{
pop
Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
}if
Adobe_AGM_Core begin
/setcmykcolor
{
4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
1 sub 4 1 roll
3{
3 index add neg dup 0 lt{
pop 0
}if
3 1 roll
}repeat
setrgbcolor pop
}ndf
/currentcmykcolor
{
/currentcmykcolor AGMCORE_gget aload pop
}ndf
/setoverprint
{pop}ndf
/currentoverprint
{false}ndf
/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
/AGMCORE_plate_ndx
AGMCORE_cyan_plate{
0
}{
AGMCORE_magenta_plate{
1
}{
AGMCORE_yellow_plate{
2
}{
AGMCORE_black_plate{
3
}{
4
}ifelse
}ifelse
}ifelse
}ifelse
def
/AGMCORE_have_reported_unsupported_color_space false def
/AGMCORE_report_unsupported_color_space
{
AGMCORE_have_reported_unsupported_color_space false eq
{
(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
}if
}def
/AGMCORE_composite_job
AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
/AGMCORE_in_rip_sep
/AGMCORE_in_rip_sep where{
pop AGMCORE_in_rip_sep
}{
AGMCORE_distilling
{
false
}{
userdict/Adobe_AGM_OnHost_Seps known{
false
}{
level2{
currentpagedevice/Separations 2 copy known{
get
}{
pop pop false
}ifelse
}{
false
}ifelse
}ifelse
}ifelse
}ifelse
def
/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
/AGM_preserve_spots
/AGM_preserve_spots where{
pop AGM_preserve_spots
}{
AGMCORE_distilling AGMCORE_producing_seps or
}ifelse
def
/AGM_is_distiller_preserving_spotimages
{
currentdistillerparams/PreserveOverprintSettings known
{
currentdistillerparams/PreserveOverprintSettings get
{
currentdistillerparams/ColorConversionStrategy known
{
currentdistillerparams/ColorConversionStrategy get
/sRGB ne
}{
true
}ifelse
}{
false
}ifelse
}{
false
}ifelse
}def
/convert_spot_to_process where{pop}{
/convert_spot_to_process
{
//Adobe_AGM_Core begin
dup map_alias{
/Name get exch pop
}if
dup dup(None)eq exch(All)eq or
{
pop false
}{
AGMCORE_host_sep
{
gsave
1 0 0 0 setcmykcolor currentgray 1 exch sub
0 1 0 0 setcmykcolor currentgray 1 exch sub
0 0 1 0 setcmykcolor currentgray 1 exch sub
0 0 0 1 setcmykcolor currentgray 1 exch sub
add add add 0 eq
{
pop false
}{
false setoverprint
current_spot_alias false set_spot_alias
1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
set_spot_alias
currentgray 1 ne
}ifelse
grestore
}{
AGMCORE_distilling
{
pop AGM_is_distiller_preserving_spotimages not
}{
//Adobe_AGM_Core/AGMCORE_name xddf
false
//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
AGMUTIL_cpd/OverrideSeparations known and
{
AGMUTIL_cpd/OverrideSeparations get
{
/HqnSpots/ProcSet resourcestatus
{
pop pop pop true
}if
}if
}if
{
AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
}{
gsave
[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
false
AGMUTIL_cpd/SeparationColorNames 2 copy known
{
get
{AGMCORE_name eq or}forall
not
}{
pop pop pop true
}ifelse
grestore
}ifelse
}ifelse
}ifelse
}ifelse
end
}def
}ifelse
/convert_to_process where{pop}{
/convert_to_process
{
dup length 0 eq
{
pop false
}{
AGMCORE_host_sep
{
dup true exch
{
dup(Cyan)eq exch
dup(Magenta)eq 3 -1 roll or exch
dup(Yellow)eq 3 -1 roll or exch
dup(Black)eq 3 -1 roll or
{pop}
{convert_spot_to_process and}ifelse
}
forall
{
true exch
{
dup(Cyan)eq exch
dup(Magenta)eq 3 -1 roll or exch
dup(Yellow)eq 3 -1 roll or exch
(Black)eq or and
}forall
not
}{pop false}ifelse
}{
false exch
{
/PhotoshopDuotoneList where{pop false}{true}ifelse
{
dup(Cyan)eq exch
dup(Magenta)eq 3 -1 roll or exch
dup(Yellow)eq 3 -1 roll or exch
dup(Black)eq 3 -1 roll or
{pop}
{convert_spot_to_process or}ifelse
}
{
convert_spot_to_process or
}
ifelse
}
forall
}ifelse
}ifelse
}def
}ifelse
/AGMCORE_avoid_L2_sep_space
version cvr 2012 lt
level2 and
AGMCORE_producing_seps not and
def
/AGMCORE_is_cmyk_sep
AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
def
/AGM_avoid_0_cmyk where{
pop AGM_avoid_0_cmyk
}{
AGM_preserve_spots
userdict/Adobe_AGM_OnHost_Seps known
userdict/Adobe_AGM_InRip_Seps known or
not and
}ifelse
{
/setcmykcolor[
{
4 copy add add add 0 eq currentoverprint and{
pop 0.0005
}if
}/exec cvx
/AGMCORE_&setcmykcolor load dup type/operatortype ne{
/exec cvx
}if
]cvx def
}if
/AGMCORE_IsSeparationAProcessColor
{
dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
}def
AGMCORE_host_sep{
/setcolortransfer
{
AGMCORE_cyan_plate{
pop pop pop
}{
  AGMCORE_magenta_plate{
  4 3 roll pop pop pop
  }{
  AGMCORE_yellow_plate{
  4 2 roll pop pop pop
  }{
  4 1 roll pop pop pop
  }ifelse
  }ifelse
}ifelse
settransfer
}
def
/AGMCORE_get_ink_data
AGMCORE_cyan_plate{
{pop pop pop}
}{
  AGMCORE_magenta_plate{
  {4 3 roll pop pop pop}
  }{
  AGMCORE_yellow_plate{
  {4 2 roll pop pop pop}
  }{
  {4 1 roll pop pop pop}
  }ifelse
  }ifelse
}ifelse
def
/AGMCORE_RemoveProcessColorNames
{
1 dict begin
/filtername
{
dup/Cyan eq 1 index(Cyan)eq or
{pop(_cyan_)}if
dup/Magenta eq 1 index(Magenta)eq or
{pop(_magenta_)}if
dup/Yellow eq 1 index(Yellow)eq or
{pop(_yellow_)}if
dup/Black eq 1 index(Black)eq or
{pop(_black_)}if
}def
dup type/arraytype eq
{[exch{filtername}forall]}
{filtername}ifelse
end
}def
level3{
/AGMCORE_IsCurrentColor
{
dup AGMCORE_IsSeparationAProcessColor
{
AGMCORE_plate_ndx 0 eq
{dup(Cyan)eq exch/Cyan eq or}if
AGMCORE_plate_ndx 1 eq
{dup(Magenta)eq exch/Magenta eq or}if
AGMCORE_plate_ndx 2 eq
{dup(Yellow)eq exch/Yellow eq or}if
AGMCORE_plate_ndx 3 eq
{dup(Black)eq exch/Black eq or}if
AGMCORE_plate_ndx 4 eq
{pop false}if
}{
gsave
false setoverprint
current_spot_alias false set_spot_alias
1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
set_spot_alias
currentgray 1 ne
grestore
}ifelse
}def
/AGMCORE_filter_functiondatasource
{
5 dict begin
/data_in xdf
data_in type/stringtype eq
{
/ncomp xdf
/comp xdf
/string_out data_in length ncomp idiv string def
0 ncomp data_in length 1 sub
{
string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
}for
string_out
}{
string/string_in xdf
/string_out 1 string def
/component xdf
[
data_in string_in/readstring cvx
[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
[/pop cvx()]cvx/ifelse cvx
]cvx/ReusableStreamDecode filter
}ifelse
end
}def
/AGMCORE_separateShadingFunction
{
2 dict begin
/paint? xdf
/channel xdf
dup type/dicttype eq
{
begin
FunctionType 0 eq
{
/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
currentdict/Decode known
{/Decode Decode channel 2 mul 2 getinterval def}if
paint? not
{/Decode[1 1]def}if
}if
FunctionType 2 eq
{
paint?
{
/C0[C0 channel get 1 exch sub]def
/C1[C1 channel get 1 exch sub]def
}{
/C0[1]def
/C1[1]def
}ifelse
}if
FunctionType 3 eq
{
/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def
}if
currentdict/Range known
{/Range[0 1]def}if
currentdict
end}{
channel get 0 paint? AGMCORE_separateShadingFunction
}ifelse
end
}def
/AGMCORE_separateShading
{
3 -1 roll begin
currentdict/Function known
{
currentdict/Background known
{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
/ColorSpace[/DeviceGray]def
}{
ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
{
/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
}{
ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
}ifelse
ColorSpace 0 get/Separation eq
{
{
[1/exch cvx/sub cvx]cvx
}{
[/pop cvx 1]cvx
}ifelse
ColorSpace 3 3 -1 roll put
pop
}{
{
[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
}{
pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
}ifelse
ColorSpace 3 3 -1 roll bind put
}ifelse
ColorSpace 2/DeviceGray put
}ifelse
end
}def
/AGMCORE_separateShadingDict
{
dup/ColorSpace get
dup type/arraytype ne
{[exch]}if
dup 0 get/DeviceCMYK eq
{
exch begin
currentdict
AGMCORE_cyan_plate
{0 true}if
AGMCORE_magenta_plate
{1 true}if
AGMCORE_yellow_plate
{2 true}if
AGMCORE_black_plate
{3 true}if
AGMCORE_plate_ndx 4 eq
{0 false}if
dup not currentoverprint and
{/AGMCORE_ignoreshade true def}if
AGMCORE_separateShading
currentdict
end exch
}if
dup 0 get/Separation eq
{
exch begin
ColorSpace 1 get dup/None ne exch/All ne and
{
ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
{
ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq
{
/ColorSpace
[
/Separation
ColorSpace 1 get
/DeviceGray
[
ColorSpace 3 get/exec cvx
4 AGMCORE_plate_ndx sub -1/roll cvx
4 1/roll cvx
3[/pop cvx]cvx/repeat cvx
1/exch cvx/sub cvx
]cvx
]def
}{
AGMCORE_report_unsupported_color_space
AGMCORE_black_plate not
{
currentdict 0 false AGMCORE_separateShading
}if
}ifelse
}{
currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
0 exch
dup not currentoverprint and
{/AGMCORE_ignoreshade true def}if
AGMCORE_separateShading
}ifelse
}if
currentdict
end exch
}if
dup 0 get/DeviceN eq
{
exch begin
ColorSpace 1 get convert_to_process
{
ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq
{
/ColorSpace
[
/DeviceN
ColorSpace 1 get
/DeviceGray
[
ColorSpace 3 get/exec cvx
4 AGMCORE_plate_ndx sub -1/roll cvx
4 1/roll cvx
3[/pop cvx]cvx/repeat cvx
1/exch cvx/sub cvx
]cvx
]def
}{
AGMCORE_report_unsupported_color_space
AGMCORE_black_plate not
{
currentdict 0 false AGMCORE_separateShading
/ColorSpace[/DeviceGray]def
}if
}ifelse
}{
currentdict
false -1 ColorSpace 1 get
{
AGMCORE_IsCurrentColor
{
1 add
exch pop true exch exit
}if
1 add
}forall
exch
dup not currentoverprint and
{/AGMCORE_ignoreshade true def}if
AGMCORE_separateShading
}ifelse
currentdict
end exch
}if
dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
{
exch begin
ColorSpace dup type/arraytype eq
{0 get}if
/DeviceGray ne
{
AGMCORE_report_unsupported_color_space
AGMCORE_black_plate not
{
ColorSpace 0 get/CIEBasedA eq
{
/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
}if
ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
{
/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
}if
ColorSpace 0 get/CIEBasedDEFG eq
{
/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
}if
currentdict 0 false AGMCORE_separateShading
}if
}if
currentdict
end exch
}if
pop
dup/AGMCORE_ignoreshade known
{
begin
/ColorSpace[/Separation(None)/DeviceGray{}]def
currentdict end
}if
}def
/shfill
{
AGMCORE_separateShadingDict
dup/AGMCORE_ignoreshade known
{pop}
{AGMCORE_&sysshfill}ifelse
}def
/makepattern
{
exch
dup/PatternType get 2 eq
{
clonedict
begin
/Shading Shading AGMCORE_separateShadingDict def
Shading/AGMCORE_ignoreshade known
currentdict end exch
{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
exch AGMCORE_&sysmakepattern
}{
exch AGMCORE_&usrmakepattern
}ifelse
}def
}if
}if
AGMCORE_in_rip_sep{
/setcustomcolor
{
exch aload pop
dup 7 1 roll inRip_spot_has_ink not {
4{4 index mul 4 1 roll}
repeat
/DeviceCMYK setcolorspace
6 -2 roll pop pop
}{
//Adobe_AGM_Core begin
/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
end
[/Separation 4 -1 roll/DeviceCMYK
{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
]
setcolorspace
}ifelse
setcolor
}ndf
/setseparationgray
{
[/Separation(All)/DeviceGray{}]setcolorspace_opt
1 exch sub setcolor
}ndf
}{
/setseparationgray
{
AGMCORE_&setgray
}ndf
}ifelse
/findcmykcustomcolor
{
5 makereadonlyarray
}ndf
/setcustomcolor
{
exch aload pop pop
4{4 index mul 4 1 roll}repeat
setcmykcolor pop
}ndf
/has_color
/colorimage where{
AGMCORE_producing_seps{
pop true
}{
systemdict eq
}ifelse
}{
false
}ifelse
def
/map_index
{
1 index mul exch getinterval{255 div}forall
}bdf
/map_indexed_devn
{
Lookup Names length 3 -1 roll cvi map_index
}bdf
/n_color_components
{
base_colorspace_type
dup/DeviceGray eq{
pop 1
}{
/DeviceCMYK eq{
4
}{
3
}ifelse
}ifelse
}bdf
level2{
/mo/moveto ldf
/li/lineto ldf
/cv/curveto ldf
/knockout_unitsq
{
1 setgray
0 0 1 1 rectfill
}def
level2/setcolorspace AGMCORE_key_known not and{
/AGMCORE_&&&setcolorspace/setcolorspace ldf
/AGMCORE_ReplaceMappedColor
{
dup type dup/arraytype eq exch/packedarraytype eq or
{
/AGMCORE_SpotAliasAry2 where{
begin
dup 0 get dup/Separation eq
{
pop
dup length array copy
dup dup 1 get
current_spot_alias
{
dup map_alias
{
false set_spot_alias
dup 1 exch setsepcolorspace
true set_spot_alias
begin
/sep_colorspace_dict currentdict AGMCORE_gput
pop pop pop
[
/Separation Name
CSA map_csa
MappedCSA
/sep_colorspace_proc load
]
dup Name
end
}if
}if
map_reserved_ink_name 1 xpt
}{
/DeviceN eq
{
dup length array copy
dup dup 1 get[
exch{
current_spot_alias{
dup map_alias{
/Name get exch pop
}if
}if
map_reserved_ink_name
}forall
]1 xpt
}if
}ifelse
end
}if
}if
}def
/setcolorspace
{
dup type dup/arraytype eq exch/packedarraytype eq or
{
dup 0 get/Indexed eq
{
AGMCORE_distilling
{
/PhotoshopDuotoneList where
{
pop false
}{
true
}ifelse
}{
true
}ifelse
{
aload pop 3 -1 roll
AGMCORE_ReplaceMappedColor
3 1 roll 4 array astore
}if
}{
AGMCORE_ReplaceMappedColor
}ifelse
}if
DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
}def
}if
}{
/adj
{
currentstrokeadjust{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
}if
}def
/mo{
adj moveto
}def
/li{
adj lineto
}def
/cv{
6 2 roll adj
6 2 roll adj
6 2 roll adj curveto
}def
/knockout_unitsq
{
1 setgray
8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
}def
/currentstrokeadjust{
/currentstrokeadjust AGMCORE_gget
}def
/setstrokeadjust{
/currentstrokeadjust exch AGMCORE_gput
}def
/setcolorspace
{
/currentcolorspace exch AGMCORE_gput
}def
/currentcolorspace
{
/currentcolorspace AGMCORE_gget
}def
/setcolor_devicecolor
{
base_colorspace_type
dup/DeviceGray eq{
pop setgray
}{
/DeviceCMYK eq{
setcmykcolor
}{
setrgbcolor
}ifelse
}ifelse
}def
/setcolor
{
currentcolorspace 0 get
dup/DeviceGray ne{
dup/DeviceCMYK ne{
dup/DeviceRGB ne{
dup/Separation eq{
pop
currentcolorspace 3 gx
currentcolorspace 2 get
}{
dup/Indexed eq{
pop
currentcolorspace 3 get dup type/stringtype eq{
currentcolorspace 1 get n_color_components
3 -1 roll map_index
}{
exec
}ifelse
currentcolorspace 1 get
}{
/AGMCORE_cur_err/AGMCORE_invalid_color_space def
AGMCORE_invalid_color_space
}ifelse
}ifelse
}if
}if
}if
setcolor_devicecolor
}def
}ifelse
/sop/setoverprint ldf
/lw/setlinewidth ldf
/lc/setlinecap ldf
/lj/setlinejoin ldf
/ml/setmiterlimit ldf
/dsh/setdash ldf
/sadj/setstrokeadjust ldf
/gry/setgray ldf
/rgb/setrgbcolor ldf
/cmyk[
/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
/setcmykcolor load dup type/operatortype ne{/exec cvx}if
]cvx bdf
level3 AGMCORE_host_sep not and{
/nzopmsc{
6 dict begin
/kk exch def
/yy exch def
/mm exch def
/cc exch def
/sum 0 def
cc 0 ne{/sum sum 2#1000 or def cc}if
mm 0 ne{/sum sum 2#0100 or def mm}if
yy 0 ne{/sum sum 2#0010 or def yy}if
kk 0 ne{/sum sum 2#0001 or def kk}if
AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
sum 0 eq{0}if
end
setcolor
}bdf
}{
/nzopmsc/cmyk ldf
}ifelse
/sep/setsepcolor ldf
/devn/setdevicencolor ldf
/idx/setindexedcolor ldf
/colr/setcolor ldf
/csacrd/set_csa_crd ldf
/sepcs/setsepcolorspace ldf
/devncs/setdevicencolorspace ldf
/idxcs/setindexedcolorspace ldf
/cp/closepath ldf
/clp/clp_npth ldf
/eclp/eoclp_npth ldf
/f/fill ldf
/ef/eofill ldf
/@/stroke ldf
/nclp/npth_clp ldf
/gset/graphic_setup ldf
/gcln/graphic_cleanup ldf
/ct/concat ldf
/cf/currentfile ldf
/fl/filter ldf
/rs/readstring ldf
/AGMCORE_def_ht currenthalftone def
/clonedict Adobe_AGM_Utils begin/clonedict load end def
/clonearray Adobe_AGM_Utils begin/clonearray load end def
currentdict{
dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
bind
}if
def
}forall
/getrampcolor
{
/indx exch def
0 1 NumComp 1 sub
{
dup
Samples exch get
dup type/stringtype eq{indx get}if
exch
Scaling exch get aload pop
3 1 roll
mul add
}for
ColorSpaceFamily/Separation eq
{sep}
{
ColorSpaceFamily/DeviceN eq
{devn}{setcolor}ifelse
}ifelse
}bdf
/sssetbackground{
aload pop
ColorSpaceFamily/Separation eq
{sep}
{
ColorSpaceFamily/DeviceN eq
{devn}{setcolor}ifelse
}ifelse
}bdf
/RadialShade
{
40 dict begin
/ColorSpaceFamily xdf
/background xdf
/ext1 xdf
/ext0 xdf
/BBox xdf
/r2 xdf
/c2y xdf
/c2x xdf
/r1 xdf
/c1y xdf
/c1x xdf
/rampdict xdf
/setinkoverprint where{pop/setinkoverprint{pop}def}if
gsave
BBox length 0 gt
{
np
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
np
}if
c1x c2x eq
{
c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
}{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
}ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{pathbbox}stopped
{0 0 0 0}if
/yMax xdf
/xMax xdf
/yMin xdf
/xMin xdf
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}{
/max{2 copy gt{pop}{exch pop}ifelse}bdf
/min{2 copy lt{pop}{exch pop}ifelse}bdf
rampdict begin
40 dict begin
background length 0 gt{background sssetbackground gsave clippath fill grestore}if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0
{
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}{
/AA r2 r1 sub c2y div def
AA -1 eq
{/theta 89.99 def}
{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}ifelse
}ifelse
}ifelse
}if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt{exch}if pop
/hires xdf
hires mul
/numpix xdf
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
}if
}if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
np
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}{
0
numsteps
{
dup
subsampling{round cvi}if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}repeat
pop
}ifelse
ext1
{
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}{
/AA r2 r1 sub c2y div def
AA -1 eq
{/theta 89.99 def}
{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}ifelse
}ifelse
}ifelse
}if
grestore
grestore
end
end
end
}ifelse
}bdf
/GenStrips
{
40 dict begin
/ColorSpaceFamily xdf
/background xdf
/ext1 xdf
/ext0 xdf
/BBox xdf
/y2 xdf
/x2 xdf
/y1 xdf
/x1 xdf
/rampdict xdf
/setinkoverprint where{pop/setinkoverprint{pop}def}if
gsave
BBox length 0 gt
{
np
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
np
}if
x1 x2 eq
{
y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
}{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{pathbbox}stopped
{0 0 0 0}if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}{
rampdict begin
20 dict begin
background length 0 gt{background sssetbackground gsave clippath fill grestore}if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt{exch}if pop
mul
/numpix xdf
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
}if
}if
ext0
{
0 getrampcolor
xMin xStart lt
{
xMin yMin xMin neg ySpan rectfill
}if
}if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling{round cvi}if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}repeat
pop
ext1{
xMax xEnd gt
{
xEnd yMin xMax xEnd sub ySpan rectfill
}if
}if
grestore
grestore
end
end
end
}ifelse
}bdf
}def
/pt
{
end
}def
/dt{
}def
/pgsv{
//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
gsave
setcmykcolor currentgray 1 ne
grestore
}def
/inRip_spot_has_ink
{
dup//Adobe_AGM_Core/AGMCORE_name xddf
convert_spot_to_process not
}def
/map255_to_range
{
1 index sub
3 -1 roll 255 div mul add
}def
/set_csa_crd
{
/sep_colorspace_dict null AGMCORE_gput
begin
CSA get_csa_by_name setcolorspace_opt
set_crd
end
}
def
/map_csa
{
currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
/sep_colorspace_dict AGMCORE_gget begin
dup/sep_tint exch AGMCORE_gput
TintProc
end
}def
/setdevicencolor
{
/devicen_colorspace_dict AGMCORE_gget begin
Names length copy
Names length 1 sub -1 0
{
/devicen_tints AGMCORE_gget 3 1 roll xpt
}for
TintProc
end
}def
/sep_colorspace_proc
{
/AGMCORE_tmp exch store
/sep_colorspace_dict AGMCORE_gget begin
currentdict/Components known{
Components aload pop
TintMethod/Lab eq{
2{AGMCORE_tmp mul NComponents 1 roll}repeat
LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
}{
TintMethod/Subtractive eq{
NComponents{
AGMCORE_tmp mul NComponents 1 roll
}repeat
}{
NComponents{
1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
}repeat
}ifelse
}ifelse
}{
ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
aload pop
}ifelse
end
}def
/sep_colorspace_gray_proc
{
/AGMCORE_tmp exch store
/sep_colorspace_dict AGMCORE_gget begin
GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
end
}def
/sep_proc_name
{
dup 0 get
dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
pop[/DeviceGray]
/sep_colorspace_gray_proc
}{
/sep_colorspace_proc
}ifelse
}def
/setsepcolorspace
{
current_spot_alias{
dup begin
Name map_alias{
exch pop
}if
end
}if
dup/sep_colorspace_dict exch AGMCORE_gput
begin
CSA map_csa
/AGMCORE_sep_special Name dup()eq exch(All)eq or store
AGMCORE_avoid_L2_sep_space{
[/Indexed MappedCSA sep_proc_name 255 exch
{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx
]setcolorspace_opt
/TintProc{
255 mul round cvi setcolor
}bdf
}{
MappedCSA 0 get/DeviceCMYK eq
currentdict/Components known and
AGMCORE_sep_special not and{
/TintProc[
Components aload pop Name findcmykcustomcolor
/exch cvx/setcustomcolor cvx
]cvx bdf
}{
  AGMCORE_host_sep Name(All)eq and{
  /TintProc{
1 exch sub setseparationgray
}bdf
  }{
AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and
AGMCORE_host_sep or
Name()eq and{
/TintProc[
MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
cvx/setcmykcolor cvx
}{
cvx/setgray cvx
}ifelse
]cvx bdf
}{
AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
  /TintProc[
/dup cvx
MappedCSA sep_proc_name cvx exch
0 get/DeviceGray eq{
1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
}if
/Name cvx/findcmykcustomcolor cvx/exch cvx
AGMCORE_host_sep{
AGMCORE_is_cmyk_sep
/Name cvx
/AGMCORE_IsSeparationAProcessColor load/exec cvx
/not cvx/and cvx
}{
Name inRip_spot_has_ink not
}ifelse
[
  /pop cvx 1
]cvx/if cvx
/setcustomcolor cvx
]cvx bdf
  }{
/TintProc{setcolor}bdf
[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
}ifelse
}ifelse
}ifelse
}ifelse
}ifelse
set_crd
setsepcolor
end
}def
/additive_blend
{
  3 dict begin
  /numarrays xdf
  /numcolors xdf
  0 1 numcolors 1 sub
  {
  /c1 xdf
  1
  0 1 numarrays 1 sub
  {
1 exch add/index cvx
  c1/get cvx/mul cvx
  }for
  numarrays 1 add 1/roll cvx
  }for
  numarrays[/pop cvx]cvx/repeat cvx
  end
}def
/subtractive_blend
{
3 dict begin
/numarrays xdf
/numcolors xdf
0 1 numcolors 1 sub
{
/c1 xdf
1 1
0 1 numarrays 1 sub
{
1 3 3 -1 roll add/index cvx
c1/get cvx/sub cvx/mul cvx
}for
/sub cvx
numarrays 1 add 1/roll cvx
}for
numarrays[/pop cvx]cvx/repeat cvx
end
}def
/exec_tint_transform
{
/TintProc[
/TintTransform cvx/setcolor cvx
]cvx bdf
MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
2 dict begin
/names_index xdf
/Names xdf
1 1 1 1 Names names_index get findcmykcustomcolor
/devicen_tints AGMCORE_gget names_index get setcustomcolor
Names length{pop}repeat
end
}bdf
/setdevicencolorspace
{
dup/AliasedColorants known{false}{true}ifelse
current_spot_alias and{
7 dict begin
/names_index 0 def
dup/names_len exch/Names get length def
/new_names names_len array def
/new_LookupTables names_len array def
/alias_cnt 0 def
dup/Names get
{
dup map_alias{
exch pop
dup/ColorLookup known{
dup begin
new_LookupTables names_index ColorLookup put
end
}{
dup/Components known{
dup begin
new_LookupTables names_index Components put
end
}{
dup begin
new_LookupTables names_index[null null null null]put
end
}ifelse
}ifelse
new_names names_index 3 -1 roll/Name get put
/alias_cnt alias_cnt 1 add def
}{
/name xdf
new_names names_index name put
dup/LookupTables known{
dup begin
new_LookupTables names_index LookupTables names_index get put
end
}{
dup begin
new_LookupTables names_index[null null null null]put
end
}ifelse
}ifelse
/names_index names_index 1 add def
}forall
alias_cnt 0 gt{
/AliasedColorants true def
/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
0 1 names_len 1 sub{
/names_index xdf
new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
/AliasedColorants false def
exit
}{
new_LookupTables names_index get 0 get null eq{
dup/Names get names_index get/name xdf
name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
or or or not{
/AliasedColorants false def
exit
}if
}if
}ifelse
}for
lut_entry_len 1 eq{
/AliasedColorants false def
}if
AliasedColorants{
dup begin
/Names new_names def
/LookupTables new_LookupTables def
/AliasedColorants true def
/NComponents lut_entry_len def
/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
currentdict/TTTablesIdx known not{
/TTTablesIdx -1 def
}if
end
}if
}if
end
}if
dup/devicen_colorspace_dict exch AGMCORE_gput
begin
currentdict/AliasedColorants known{
AliasedColorants
}{
false
}ifelse
dup not{
CSA map_csa
}if
/TintTransform load type/nulltype eq or{
/TintTransform[
0 1 Names length 1 sub
{
/TTTablesIdx TTTablesIdx 1 add def
dup LookupTables exch get dup 0 get null eq
{
1 index
Names exch get
dup(Cyan)eq
{
pop exch
LookupTables length exch sub
/index cvx
0 0 0
}
{
dup(Magenta)eq
{
pop exch
LookupTables length exch sub
/index cvx
0/exch cvx 0 0
}{
(Yellow)eq
{
exch
LookupTables length exch sub
/index cvx
0 0 3 -1/roll cvx 0
}{
exch
LookupTables length exch sub
/index cvx
0 0 0 4 -1/roll cvx
}ifelse
}ifelse
}ifelse
5 -1/roll cvx/astore cvx
}{
dup length 1 sub
LookupTables length 4 -1 roll sub 1 add
/index cvx/mul cvx/round cvx/cvi cvx/get cvx
}ifelse
Names length TTTablesIdx add 1 add 1/roll cvx
}for
Names length[/pop cvx]cvx/repeat cvx
NComponents Names length
  TintMethod/Subtractive eq
  {
  subtractive_blend
  }{
  additive_blend
  }ifelse
]cvx bdf
}if
AGMCORE_host_sep{
Names convert_to_process{
exec_tint_transform
}
{
currentdict/AliasedColorants known{
AliasedColorants not
}{
false
}ifelse
5 dict begin
/AvoidAliasedColorants xdf
/painted? false def
/names_index 0 def
/names_len Names length def
AvoidAliasedColorants{
/currentspotalias current_spot_alias def
false set_spot_alias
}if
Names{
AGMCORE_is_cmyk_sep{
dup(Cyan)eq AGMCORE_cyan_plate and exch
dup(Magenta)eq AGMCORE_magenta_plate and exch
dup(Yellow)eq AGMCORE_yellow_plate and exch
(Black)eq AGMCORE_black_plate and or or or{
/devicen_colorspace_dict AGMCORE_gget/TintProc[
Names names_index/devn_makecustomcolor cvx
]cvx ddf
/painted? true def
}if
painted?{exit}if
}{
0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
/devicen_colorspace_dict AGMCORE_gget/TintProc[
Names names_index/devn_makecustomcolor cvx
]cvx ddf
/painted? true def
exit
}if
}ifelse
/names_index names_index 1 add def
}forall
AvoidAliasedColorants{
currentspotalias set_spot_alias
}if
painted?{
/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
}{
/devicen_colorspace_dict AGMCORE_gget/TintProc[
names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
  0 0 0 0/setcmykcolor cvx
]cvx ddf
}ifelse
end
}ifelse
}
{
AGMCORE_in_rip_sep{
Names convert_to_process not
}{
level3
}ifelse
{
[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
/TintProc level3 not AGMCORE_in_rip_sep and{
[
Names/length cvx[/pop cvx]cvx/repeat cvx
]cvx bdf
}{
{setcolor}bdf
}ifelse
}{
exec_tint_transform
}ifelse
}ifelse
set_crd
/AliasedColorants false def
end
}def
/setindexedcolorspace
{
dup/indexed_colorspace_dict exch AGMCORE_gput
begin
currentdict/CSDBase known{
CSDBase/CSD get_res begin
currentdict/Names known{
currentdict devncs
}{
1 currentdict sepcs
}ifelse
AGMCORE_host_sep{
4 dict begin
/compCnt/Names where{pop Names length}{1}ifelse def
/NewLookup HiVal 1 add string def
0 1 HiVal{
/tableIndex xdf
Lookup dup type/stringtype eq{
compCnt tableIndex map_index
}{
exec
}ifelse
/Names where{
pop setdevicencolor
}{
setsepcolor
}ifelse
currentgray
tableIndex exch
255 mul cvi
NewLookup 3 1 roll put
}for
[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
end
}{
level3
{
currentdict/Names known{
[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
}{
[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
}ifelse
}{
[/Indexed MappedCSA HiVal
[
currentdict/Names known{
Lookup dup type/stringtype eq
{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
{/exec cvx}ifelse
/TintTransform load/exec cvx
}{
Lookup dup type/stringtype eq
{/exch cvx/get cvx 255/div cvx}
{/exec cvx}ifelse
CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
}ifelse
]cvx
]setcolorspace_opt
}ifelse
}ifelse
end
set_crd
}
{
CSA map_csa
AGMCORE_host_sep level2 not and{
0 0 0 0 setcmykcolor
}{
[/Indexed MappedCSA
level2 not has_color not and{
dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
pop[/DeviceGray]
}if
HiVal GrayLookup
}{
HiVal
currentdict/RangeArray known{
{
/indexed_colorspace_dict AGMCORE_gget begin
Lookup exch
dup HiVal gt{
pop HiVal
}if
NComponents mul NComponents getinterval{}forall
NComponents 1 sub -1 0{
RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
NComponents 1 roll
}for
end
}bind
}{
Lookup
}ifelse
}ifelse
]setcolorspace_opt
set_crd
}ifelse
}ifelse
end
}def
/setindexedcolor
{
AGMCORE_host_sep{
/indexed_colorspace_dict AGMCORE_gget
begin
currentdict/CSDBase known{
CSDBase/CSD get_res begin
currentdict/Names known{
map_indexed_devn
devn
}
{
Lookup 1 3 -1 roll map_index
sep
}ifelse
end
}{
Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
map_index
MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
}ifelse
end
}{
level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
map_indexed_devn
devn
end
}
{
setcolor
}ifelse
}ifelse
}def
/ignoreimagedata
{
currentoverprint not{
gsave
dup clonedict begin
1 setgray
/Decode[0 1]def
/DataSource<FF>def
/MultipleDataSources false def
/BitsPerComponent 8 def
currentdict end
systemdict/image gx
grestore
}if
consumeimagedata
}def
/add_res
{
dup/CSD eq{
pop
//Adobe_AGM_Core begin
/AGMCORE_CSD_cache load 3 1 roll put
end
}{
defineresource pop
}ifelse
}def
/del_res
{
{
aload pop exch
dup/CSD eq{
pop
{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
}{
exch
{1 index undefineresource}forall
pop
}ifelse
}forall
}def
/get_res
{
dup/CSD eq{
pop
dup type dup/nametype eq exch/stringtype eq or{
AGMCORE_CSD_cache exch get
}if
}{
findresource
}ifelse
}def
/get_csa_by_name
{
dup type dup/nametype eq exch/stringtype eq or{
/CSA get_res
}if
}def
/paintproc_buf_init
{
/count get 0 0 put
}def
/paintproc_buf_next
{
dup/count get dup 0 get
dup 3 1 roll
1 add 0 xpt
get
}def
/cachepaintproc_compress
{
5 dict begin
currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
/ppdict 20 dict def
/string_size 16000 def
/readbuffer string_size string def
currentglobal true setglobal
ppdict 1 array dup 0 1 put/count xpt
setglobal
/LZWFilter
{
exch
dup length 0 eq{
pop
}{
ppdict dup length 1 sub 3 -1 roll put
}ifelse
{string_size}{0}ifelse string
}/LZWEncode filter def
{
ReadFilter readbuffer readstring
exch LZWFilter exch writestring
not{exit}if
}loop
LZWFilter closefile
ppdict
end
}def
/cachepaintproc
{
2 dict begin
currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
/ppdict 20 dict def
currentglobal true setglobal
ppdict 1 array dup 0 1 put/count xpt
setglobal
{
ReadFilter 16000 string readstring exch
ppdict dup length 1 sub 3 -1 roll put
not{exit}if
}loop
ppdict dup dup length 1 sub()put
end
}def
/make_pattern
{
exch clonedict exch
dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
matrix translate exch matrix concatmatrix
 1 index begin
BBox 0 get XStep div cvi XStep mul/xshift exch neg def
BBox 1 get YStep div cvi YStep mul/yshift exch neg def
BBox 0 get xshift add
BBox 1 get yshift add
BBox 2 get xshift add
BBox 3 get yshift add
4 array astore
/BBox exch def
[xshift yshift/translate load null/exec load]dup
3/PaintProc load put cvx/PaintProc exch def
end
gsave 0 setgray
makepattern
grestore
}def
/set_pattern
{
dup/PatternType get 1 eq{
dup/PaintType get 1 eq{
currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
}if
}if
setpattern
}def
/setcolorspace_opt
{
dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
currentcolorrendering/RenderingIntent known{
currentcolorrendering/RenderingIntent get
}
{
Intent/AbsoluteColorimetric eq
{
/absolute_colorimetric_crd AGMCORE_gget dup null eq
}
{
Intent/RelativeColorimetric eq
{
/relative_colorimetric_crd AGMCORE_gget dup null eq
}
{
Intent/Saturation eq
{
/saturation_crd AGMCORE_gget dup null eq
}
{
/perceptual_crd AGMCORE_gget dup null eq
}ifelse
}ifelse
}ifelse
{
pop null
}
{
/RenderingIntent known{null}{Intent}ifelse
}ifelse
}ifelse
Intent ne{
Intent/ColorRendering{findresource}stopped
{
pop pop systemdict/findcolorrendering known
{
  Intent findcolorrendering
  {
  /ColorRendering findresource true exch
  }
  {
  /ColorRendering findresource
product(Xerox Phaser 5400)ne
exch
  }ifelse
dup Intent/AbsoluteColorimetric eq
{
/absolute_colorimetric_crd exch AGMCORE_gput
}
{
Intent/RelativeColorimetric eq
{
/relative_colorimetric_crd exch AGMCORE_gput
}
{
Intent/Saturation eq
{
/saturation_crd exch AGMCORE_gput
}
{
Intent/Perceptual eq
{
/perceptual_crd exch AGMCORE_gput
}
{
pop
}ifelse
}ifelse
}ifelse
}ifelse
1 index{exch}{pop}ifelse
}
{false}ifelse
}
{true}ifelse
{
dup begin
currentdict/TransformPQR known{
currentdict/TransformPQR get aload pop
3{{}eq 3 1 roll}repeat or or
}
{true}ifelse
currentdict/MatrixPQR known{
currentdict/MatrixPQR get aload pop
1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
and and and and and and and and
}
{true}ifelse
end
or
{
clonedict begin
/TransformPQR[
{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
]def
/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
currentdict end
}if
setcolorrendering_opt
}if
}if
}def
/set_crd
{
AGMCORE_host_sep not level2 and{
currentdict/ColorRendering known{
ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
}{
currentdict/Intent known{
updatecolorrendering
}if
}ifelse
currentcolorspace dup type/arraytype eq
{0 get}if
/DeviceRGB eq
{
currentdict/UCR known
{/UCR}{/AGMCORE_currentucr}ifelse
load setundercolorremoval
currentdict/BG known
{/BG}{/AGMCORE_currentbg}ifelse
load setblackgeneration
}if
}if
}def
/set_ucrbg
{
dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
dup currentcolorrendering eq{
pop
}{
product(HP Color LaserJet 2605)anchorsearch{
pop pop pop
}{
pop
clonedict
begin
/Intent Intent def
currentdict
end
setcolorrendering
}ifelse
}ifelse
}def
/cpaint_gcomp
{
convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
{
(%end_cpaint_gcomp)flushinput
}if
}def
/cpaint_gsep
{
//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
{
(%end_cpaint_gsep)flushinput
}if
}def
/cpaint_gend
{np}def
/T1_path
{
currentfile token pop currentfile token pop mo
{
currentfile token pop dup type/stringtype eq
{pop exit}if
0 exch rlineto
currentfile token pop dup type/stringtype eq
{pop exit}if
0 rlineto
}loop
}def
/T1_gsave
level3
{/clipsave}
{/gsave}ifelse
load def
/T1_grestore
level3
{/cliprestore}
{/grestore}ifelse
load def
/set_spot_alias_ary
{
dup inherit_aliases
//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
dup inherit_aliases
dup length
/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
array
//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
/AGMCORE_SpotAliasAry where{
pop
AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
AGMCORE_SpotAliasAry length
}{0}ifelse
AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
true set_spot_alias
}def
/inherit_aliases
{
{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
/AGMCORE_SpotAliasAry2 where{
/AGMCORE_current_spot_alias 3 -1 roll put
}{
pop
}ifelse
}def
/current_spot_alias
{
/AGMCORE_SpotAliasAry2 where{
/AGMCORE_current_spot_alias get
}{
false
}ifelse
}def
/map_alias
{
/AGMCORE_SpotAliasAry2 where{
begin
/AGMCORE_name xdf
false
AGMCORE_SpotAliasAry2{
dup/Name get AGMCORE_name eq{
/CSD get/CSD get_res
exch pop true
exit
}{
pop
}ifelse
}forall
end
}{
pop false
}ifelse
}bdf
/spot_alias
{
true set_spot_alias
/AGMCORE_&setcustomcolor AGMCORE_key_known not{
//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
}if
/customcolor_tint 1 AGMCORE_gput
//Adobe_AGM_Core begin
/setcustomcolor
{
//Adobe_AGM_Core begin
dup/customcolor_tint exch AGMCORE_gput
1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
current_spot_alias and{1 index 4 get map_alias}{false}ifelse
{
false set_spot_alias
/sep_colorspace_dict AGMCORE_gget null ne
{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
3 1 roll 2 index{
exch pop/sep_tint AGMCORE_gget exch
}if
mark 3 1 roll
setsepcolorspace
counttomark 0 ne{
setsepcolor
}if
pop
not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
pop
true set_spot_alias
}{
AGMCORE_&setcustomcolor
}ifelse
end
}bdf
end
}def
/begin_feature
{
Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
2 dict begin
/spd/setpagedevice load def
/setpagedevice{get_gstate spd set_gstate}def
stopped{$error/newerror false put}if
end
count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
//Adobe_AGM_Core begin
/AGMCORE_inverting exch def
level2{
currentpagedevice/NegativePrint known AGMCORE_distilling not and{
currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
true begin_feature true{
<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
}end_feature
}if
/AGMCORE_inverting false def
}if
}if
AGMCORE_inverting{
[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
  AGMCORE_distilling{
  erasepage
  }{
  gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
  /AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
  }ifelse
}if
end
}def
/lw_save_restore_override{
/md where{
pop
md begin
initializepage
/initializepage{}def
/pmSVsetup{}def
/endp{}def
/pse{}def
/psb{}def
/orig_showpage where
{pop}
{/orig_showpage/showpage load def}
ifelse
/showpage{orig_showpage gR}def
end
}if
}def
/pscript_showpage_override{
/NTPSOct95 where
{
begin
showpage
save
/showpage/restore load def
/restore{exch pop}def
end
}if
}def
/driver_media_override
{
/md where{
pop
md/initializepage known{
md/initializepage{}put
}if
md/rC known{
md/rC{4{pop}repeat}put
}if
}if
/mysetup where{
/mysetup[1 0 0 1 0 0]put
}if
Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
level2
{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
/Pscript_Win_Data where{
pop
Pscript_Win_Data/mysetup known{
Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
}if
}if
}def
/restore_mysetup
{
/Pscript_Win_Data where{
pop
Pscript_Win_Data/mysetup known{
Adobe_AGM_Core/save_mysetup known{
Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
Adobe_AGM_Core/save_mysetup undef
}if
}if
}if
}def
/driver_check_media_override
{
  /PrepsDict where
  {pop}
{
Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
{
Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
}if
{
Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
}if
}ifelse
}def
AGMCORE_err_strings begin
/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
systemdict/languagelevel known dup
{pop systemdict/languagelevel get 2 ge}
if def
Level2? not
{
/currentglobal false def
/setglobal/pop load def
/gcheck{pop false}bind def
/currentpacking false def
/setpacking/pop load def
/SharedFontDirectory 0 dict def
}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
{2 copy 10 dict put}
if
get
 begin
/@opStackCountByLevel 32 dict def
/@opStackLevel 0 def
/@dictStackCountByLevel 32 dict def
/@dictStackLevel 0 def
 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
{
dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
3 1 roll put
}bind def
/ct_VMDictUndef
{
dup Adobe_CoolType_GVMFonts exch known
{Adobe_CoolType_GVMFonts exch undef}
{
dup Adobe_CoolType_LVMFonts exch known
{Adobe_CoolType_LVMFonts exch undef}
{pop}
ifelse
}ifelse
}bind def
/ct_str1 1 string def
/ct_xshow
{
/_ct_na exch def
/_ct_i 0 def
currentpoint
/_ct_y exch def
/_ct_x exch def
{
pop pop
ct_str1 exch 0 exch put
ct_str1 show
{_ct_na _ct_i get}stopped
{pop pop}
{
_ct_x _ct_y moveto
0
rmoveto
}
ifelse
/_ct_i _ct_i 1 add def
currentpoint
/_ct_y exch def
/_ct_x exch def
}
exch
@cshow
}bind def
/ct_yshow
{
/_ct_na exch def
/_ct_i 0 def
currentpoint
/_ct_y exch def
/_ct_x exch def
{
pop pop
ct_str1 exch 0 exch put
ct_str1 show
{_ct_na _ct_i get}stopped
{pop pop}
{
_ct_x _ct_y moveto
0 exch
rmoveto
}
ifelse
/_ct_i _ct_i 1 add def
currentpoint
/_ct_y exch def
/_ct_x exch def
}
exch
@cshow
}bind def
/ct_xyshow
{
/_ct_na exch def
/_ct_i 0 def
currentpoint
/_ct_y exch def
/_ct_x exch def
{
pop pop
ct_str1 exch 0 exch put
ct_str1 show
{_ct_na _ct_i get}stopped
{pop pop}
{
{_ct_na _ct_i 1 add get}stopped
{pop pop pop}
{
_ct_x _ct_y moveto
rmoveto
}
ifelse
}
ifelse
/_ct_i _ct_i 2 add def
currentpoint
/_ct_y exch def
/_ct_x exch def
}
exch
@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
1 index/Encoding get exch get
1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
exch begin
GlyphProcs exch get exec
end
}bind def
}bind def
setglobal
/@_SaveStackLevels
{
Adobe_CoolType_Data
begin
/@vmState currentglobal def false setglobal
@opStackCountByLevel
@opStackLevel
2 copy known not
{
2 copy
3 dict dup/args
7 index
5 add array put
put get
}
{
get dup/args get dup length 3 index lt
{
dup length 5 add array exch
1 index exch 0 exch putinterval
1 index exch/args exch put
}
{pop}
ifelse
}
ifelse
begin
count 1 sub
1 index lt
{pop count}
if
dup/argCount exch def
dup 0 gt
{
args exch 0 exch getinterval
astore pop
}
{pop}
ifelse
count
/restCount exch def
end
/@opStackLevel @opStackLevel 1 add def
countdictstack 1 sub
@dictStackCountByLevel exch @dictStackLevel exch put
/@dictStackLevel @dictStackLevel 1 add def
@vmState setglobal
end
}bind def
/@_RestoreStackLevels
{
Adobe_CoolType_Data
begin
/@opStackLevel @opStackLevel 1 sub def
@opStackCountByLevel @opStackLevel get
begin
count restCount sub dup 0 gt
{{pop}repeat}
{pop}
ifelse
args 0 argCount getinterval{}forall
end
/@dictStackLevel @dictStackLevel 1 sub def
@dictStackCountByLevel @dictStackLevel get
end
countdictstack exch sub dup 0 gt
{{end}repeat}
{pop}
ifelse
}bind def
/@_PopStackLevels
{
Adobe_CoolType_Data
begin
/@opStackLevel @opStackLevel 1 sub def
/@dictStackLevel @dictStackLevel 1 sub def
end
}bind def
/@Raise
{
exch cvx exch errordict exch get exec
stop
}bind def
/@ReRaise
{
cvx $error/errorname get errordict exch get exec
stop
}bind def
/@Stopped
{
0 @#Stopped
}bind def
/@#Stopped
{
@_SaveStackLevels
stopped
{@_RestoreStackLevels true}
{@_PopStackLevels false}
ifelse
}bind def
/@Arg
{
Adobe_CoolType_Data
begin
@opStackCountByLevel @opStackLevel 1 sub get
begin
args exch
argCount 1 sub exch sub get
end
end
}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
Level2?
{
1 dict dup
/@shouldNotDisappearDictValue true def
Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
begin
count @_SaveStackLevels
{(*){pop stop}128 string/Category resourceforall}
stopped pop
@_RestoreStackLevels
currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
{
 /@shouldNotDisappearDictValue known
{
 {
end
currentdict 1 index eq
{pop exit}
if
 }
 loop
}
 if
}
{
 pop
 end
}
ifelse
}
{false}
ifelse
def
true setglobal
/CTHasResourceStatusBug
Level2?
{
mark
{/steveamerige/Category resourcestatus}
stopped
{cleartomark true}
{cleartomark currentglobal not}
ifelse
}
{false}
ifelse
def
setglobal
/CTResourceStatus
{
mark 3 1 roll
/Category findresource
begin
({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
{cleartomark false}
{{3 2 roll pop true}{cleartomark false}ifelse}
ifelse
end
}bind def
/CTWorkAroundBugs
{
Level2?
{
/cid_PreLoad/ProcSet resourcestatus
{
pop pop
currentglobal
mark
{
(*)
{
dup/CMap CTHasResourceStatusBug
{CTResourceStatus}
{resourcestatus}
ifelse
{
pop dup 0 eq exch 1 eq or
{
dup/CMap findresource gcheck setglobal
/CMap undefineresource
}
{
pop CTHasResourceForAllBug
{exit}
{stop}
ifelse
}
ifelse
}
{pop}
ifelse
}
128 string/CMap resourceforall
}
stopped
{cleartomark}
stopped pop
setglobal
}
if
}
if
}bind def
/ds
{
Adobe_CoolType_Core
begin
CTWorkAroundBugs
/mo/moveto load def
/nf/newencodedfont load def
/msf{makefont setfont}bind def
/uf{dup undefinefont ct_VMDictUndef}bind def
/ur/undefineresource load def
/chp/charpath load def
/awsh/awidthshow load def
/wsh/widthshow load def
/ash/ashow load def
/@xshow/xshow load def
/@yshow/yshow load def
/@xyshow/xyshow load def
/@cshow/cshow load def
/sh/show load def
/rp/repeat load def
/.n/.notdef def
end
currentglobal false setglobal
 userdict/Adobe_CoolType_Data 2 copy known not
 {2 copy 10 dict put}
if
get
begin
/AddWidths? false def
/CC 0 def
/charcode 2 string def
/@opStackCountByLevel 32 dict def
/@opStackLevel 0 def
/@dictStackCountByLevel 32 dict def
/@dictStackLevel 0 def
/InVMFontsByCMap 10 dict def
/InVMDeepCopiedFonts 10 dict def
end
setglobal
}bind def
/dt
{
currentdict Adobe_CoolType_Core eq
{end}
if
}bind def
/ps
{
Adobe_CoolType_Core begin
Adobe_CoolType_GVMFonts begin
Adobe_CoolType_LVMFonts begin
SharedFontDirectory begin
}bind def
/pt
{
end
end
end
end
}bind def
/unload
{
systemdict/languagelevel known
{
systemdict/languagelevel get 2 ge
{
userdict/Adobe_CoolType_Core 2 copy known
{undef}
{pop pop}
ifelse
}
if
}
if
}bind def
/ndf
{
1 index where
{pop pop pop}
{dup xcheck{bind}if def}
ifelse
}def
/findfont systemdict
begin
userdict
begin
/globaldict where{/globaldict get begin}if
dup where pop exch get
/globaldict where{pop end}if
end
end
Adobe_CoolType_Core_Defined
{/systemfindfont exch def}
{
/findfont 1 index def
/systemfindfont exch def
}
ifelse
/undefinefont
{pop}ndf
/copyfont
{
currentglobal 3 1 roll
1 index gcheck setglobal
dup null eq{0}{dup length}ifelse
2 index length add 1 add dict
begin
exch
{
1 index/FID eq
{pop pop}
{def}
ifelse
}
forall
dup null eq
{pop}
{{def}forall}
ifelse
currentdict
end
exch setglobal
}bind def
/copyarray
{
currentglobal exch
dup gcheck setglobal
dup length array copy
exch setglobal
}bind def
/newencodedfont
{
currentglobal
{
SharedFontDirectory 3 index known
{SharedFontDirectory 3 index get/FontReferenced known}
{false}
ifelse
}
{
FontDirectory 3 index known
{FontDirectory 3 index get/FontReferenced known}
{
SharedFontDirectory 3 index known
{SharedFontDirectory 3 index get/FontReferenced known}
{false}
ifelse
}
ifelse
}
ifelse
dup
{
3 index findfont/FontReferenced get
2 index dup type/nametype eq
{findfont}
if ne
{pop false}
if
}
if
dup
{
1 index dup type/nametype eq
{findfont}
 if
dup/CharStrings known
{
/CharStrings get length
4 index findfont/CharStrings get length
ne
{
pop false
}
if
}
{pop}
ifelse
}
if
{
pop
1 index findfont
/Encoding get exch
0 1 255
{2 copy get 3 index 3 1 roll put}
for
pop pop pop
}
{
currentglobal
 4 1 roll
dup type/nametype eq
 {findfont}
 if
 dup gcheck setglobal
dup dup maxlength 2 add dict
begin
exch
{
1 index/FID ne
2 index/Encoding ne and
{def}
{pop pop}
ifelse
}
forall
/FontReferenced exch def
/Encoding exch dup length array copy def
/FontName 1 index dup type/stringtype eq{cvn}if def dup
currentdict
end
definefont ct_VMDictPut
setglobal
}
ifelse
}bind def
/SetSubstituteStrategy
{
$SubstituteFont
begin
dup type/dicttype ne
{0 dict}
if
currentdict/$Strategies known
{
exch $Strategies exch
2 copy known
{
get
2 copy maxlength exch maxlength add dict
begin
{def}forall
{def}forall
currentdict
dup/$Init known
{dup/$Init get exec}
if
end
/$Strategy exch def
}
{pop pop pop}
ifelse
}
{pop pop}
ifelse
end
}bind def
/scff
{
$SubstituteFont
begin
dup type/stringtype eq
{dup length exch}
{null}
ifelse
/$sname exch def
/$slen exch def
/$inVMIndex
$sname null eq
{
1 index $str cvs
dup length $slen sub $slen getinterval cvn
}
{$sname}
ifelse def
end
{findfont}
@Stopped
{
dup length 8 add string exch
1 index 0(BadFont:)putinterval
1 index exch 8 exch dup length string cvs putinterval cvn
{findfont}
@Stopped
{pop/Courier findfont}
if
}
if
$SubstituteFont
begin
/$sname null def
/$slen 0 def
/$inVMIndex null def
end
}bind def
/isWidthsOnlyFont
{
dup/WidthsOnly known
{pop pop true}
{
dup/FDepVector known
{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
{
dup/FDArray known
{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
{pop}
ifelse
}
ifelse
}
ifelse
}bind def
/ct_StyleDicts 4 dict dup begin
 /Adobe-Japan1 4 dict dup begin
 Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
{pop pop/HeiseiMin-W3}
{
/CIDFont/Category resourcestatus
{
pop pop
/HeiseiMin-W3/CIDFont resourcestatus
{pop pop/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
{pop pop/HeiseiKakuGo-W5}
{
/CIDFont/Category resourcestatus
{
pop pop
/HeiseiKakuGo-W5/CIDFont resourcestatus
{pop pop/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
{pop pop/HeiseiMaruGo-W4}
{
/CIDFont/Category resourcestatus
{
pop pop
/HeiseiMaruGo-W4/CIDFont resourcestatus
{pop pop/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H/Font resourcestatus
{pop pop/Jun101-Light}
{SansSerif}
ifelse
}
ifelse
}
{
/Jun101-Light-RKSJ-H/Font resourcestatus
{pop pop/Jun101-Light}
{SansSerif}
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif/Ryumin-Light def
/SansSerif/GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H)status
}stopped
{pop}{
 {pop pop pop pop/Jun101-Light}
 {SansSerif}
 ifelse
 /RoundSansSerif exch def
}ifelse
/Default Serif def
}
 ifelse
 end
 def
 /Adobe-Korea1 4 dict dup begin
/Serif/HYSMyeongJo-Medium def
/SansSerif/HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
 end
 def
 /Adobe-GB1 4 dict dup begin
/Serif/STSong-Light def
/SansSerif/STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
 end
 def
 /Adobe-CNS1 4 dict dup begin
/Serif/MKai-Medium def
/SansSerif/MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
 end
 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc
{
stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
0 0
}bind def
/ct_Type0WidthProc
{
 dup stringwidth 0 0 moveto
 2 index true charpath pathbbox
 0 -1
 7 index 2 div .88
 setcachedevice2
 pop
0 0
}bind def
/ct_Type0WMode1WidthProc
{
 dup stringwidth
 pop 2 div neg -0.88
2 copy
moveto
0 -1
 5 -1 roll true charpath pathbbox
 setcachedevice
}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont
 11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc/ct_BoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bind def
 currentdict
 end
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
/Identity-H/CMap resourcestatus
{
pop pop
}
{
/CIDInit/ProcSet findresource begin
 12 dict begin
 begincmap
 /CIDSystemInfo 3 dict dup begin
 /Registry(Adobe)def
 /Ordering(Identity)def
 /Supplement 0 def
 end def
 /CMapName/Identity-H def
 /CMapVersion 1.000 def
 /CMapType 1 def
 1 begincodespacerange
 <0000><FFFF>
 endcodespacerange
 1 begincidrange
 <0000><FFFF>0
 endcidrange
 endcmap
 CMapName currentdict/CMap defineresource pop
 end
 end
 }
 ifelse
}
def
/ct_BoldBaseCIDFont
 11 dict begin
/CIDFontType 1 def
/CIDFontName/ct_BoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc/ct_Type0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bind def
 currentdict
 end
def
}if
Level2?{setglobal}if
/ct_CopyFont{
{
1 index/FID ne 2 index/UniqueID ne and
{def}{pop pop}ifelse
}forall
}bind def
/ct_Type0CopyFont
{
exch
dup length dict
begin
ct_CopyFont
[
exch
FDepVector
{
 dup/FontType get 0 eq
{
1 index ct_Type0CopyFont
/_ctType0 exch definefont
}
{
/_ctBaseFont exch
2 index exec
}
 ifelse
 exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
}bind def
/ct_MakeBoldFont
{
 dup/ct_SyntheticBold known
{
dup length 3 add dict begin
ct_CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
ct_CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup/FontType get dup 9 ge exch 11 le and
{
ct_BoldBaseCIDFont
dup length 3 add dict copy begin
dup/CIDSystemInfo get/CIDSystemInfo exch def
ct_DefineIdentity-H
/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
/_basefont exch def
/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
ct_BoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
}bind def
/ct_MakeBold{
1 index
1 index
findfont
currentglobal 5 1 roll
dup gcheck setglobal
dup
 /FontType get 0 eq
{
dup/WMode known{dup/WMode get 1 eq}{false}ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge}
{true}
ifelse
{/ct_Type0WidthProc}
{/ct_Type0WMode1WidthProc}
ifelse
ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
{ct_MakeBoldFont}ct_Type0CopyFont definefont
}
{
dup/_fauxfont known not 1 index/SubstMaster known not and
{
 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
 ct_MakeBoldFont
}
{
2 index 2 index eq
{exch pop }
{
dup length dict begin
ct_CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
 ifelse
 pop pop pop
 setglobal
}bind def
/?str1 256 string def
/?set
{
$SubstituteFont
begin
/$substituteFound false def
/$fontname 1 index def
/$doSmartSub false def
end
dup
 findfont
$SubstituteFont
begin
$substituteFound
{false}
{
dup/FontName known
{
dup/FontName get $fontname eq
1 index/DistillerFauxFont known not and
/currentdistillerparams where
{pop false 2 index isWidthsOnlyFont not and}
if
}
{false}
ifelse
}
ifelse
exch pop
/$doSmartSub true def
end
{
5 1 roll pop pop pop pop
findfont
}
{
1 index
findfont
dup/FontType get 3 eq
{
6 1 roll pop pop pop pop pop false
}
{pop true}
ifelse
{
$SubstituteFont
begin
pop pop
/$styleArray 1 index def
/$regOrdering 2 index def
pop pop
0 1 $styleArray length 1 sub
{
$styleArray exch get
ct_StyleDicts $regOrdering
2 copy known
{
get
exch 2 copy known not
{pop/Default}
if
get
dup type/nametype eq
{
?str1 cvs length dup 1 add exch
?str1 exch(-)putinterval
exch dup length exch ?str1 exch 3 index exch putinterval
add ?str1 exch 0 exch getinterval cvn
}
{
pop pop/Unknown
}
ifelse
}
{
pop pop pop pop/Unknown
}
ifelse
}
for
end
findfont
}if
}
ifelse
currentglobal false setglobal 3 1 roll
null copyfont definefont pop
setglobal
}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
begin
/SubstituteFont
dup $error exch 2 copy known
{get}
{pop pop{pop/Courier}bind}
ifelse def
/currentdistillerparams where dup
{
pop pop
currentdistillerparams/CannotEmbedFontPolicy 2 copy known
{get/Error eq}
{pop pop false}
ifelse
}
if not
{
countdictstack array dictstack 0 get
begin
userdict
begin
$SubstituteFont
begin
/$str 128 string def
/$fontpat 128 string def
/$slen 0 def
/$sname null def
/$match false def
/$fontname null def
/$substituteFound false def
/$inVMIndex null def
/$doSmartSub true def
/$depth 0 def
/$fontname null def
/$italicangle 26.5 def
/$dstack null def
/$Strategies 10 dict dup
begin
/$Type3Underprint
{
currentglobal exch false setglobal
11 dict
begin
/UseFont exch
$WMode 0 ne
{
dup length dict copy
dup/WMode $WMode put
/UseFont exch definefont
}
if def
/FontName $fontname dup type/stringtype eq{cvn}if def
/FontType 3 def
/FontMatrix[.001 0 0 .001 0 0]def
/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
/FontBBox[0 0 0 0]def
/CCInfo 7 dict dup
begin
/cc null def
/x 0 def
/y 0 def
end def
/BuildChar
{
exch
begin
CCInfo
begin
1 string dup 0 3 index put exch pop
/cc exch def
UseFont 1000 scalefont setfont
cc stringwidth/y exch def/x exch def
x y setcharwidth
$SubstituteFont/$Strategy get/$Underprint get exec
0 0 moveto cc show
x y moveto
end
end
}bind def
currentdict
end
exch setglobal
}bind def
/$GetaTint
2 dict dup
begin
/$BuildFont
{
dup/WMode known
{dup/WMode get}
{0}
ifelse
/$WMode exch def
$fontname exch
dup/FontName known
{
dup/FontName get
dup type/stringtype eq{cvn}if
}
{/unnamedfont}
ifelse
exch
Adobe_CoolType_Data/InVMDeepCopiedFonts get
1 index/FontName get known
{
pop
Adobe_CoolType_Data/InVMDeepCopiedFonts get
1 index get
null copyfont
}
{$deepcopyfont}
ifelse
exch 1 index exch/FontBasedOn exch put
dup/FontName $fontname dup type/stringtype eq{cvn}if put
definefont
Adobe_CoolType_Data/InVMDeepCopiedFonts get
begin
dup/FontBasedOn get 1 index def
end
}bind def
/$Underprint
{
gsave
x abs y abs gt
{/y 1000 def}
{/x -1000 def 500 120 translate}
ifelse
Level2?
{
[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
setcolorspace
}
{0 setgray}
ifelse
10 setlinewidth
x .8 mul
[7 3]
{
y mul 8 div 120 sub x 10 div exch moveto
0 y 4 div neg rlineto
dup 0 rlineto
0 y 4 div rlineto
closepath
gsave
Level2?
{.2 setcolor}
{.8 setgray}
ifelse
fill grestore
stroke
}
forall
pop
grestore
}bind def
end def
/$Oblique
1 dict dup
begin
/$BuildFont
{
currentglobal exch dup gcheck setglobal
null copyfont
begin
/FontBasedOn
currentdict/FontName known
{
FontName
dup type/stringtype eq{cvn}if
}
{/unnamedfont}
ifelse
def
/FontName $fontname dup type/stringtype eq{cvn}if def
/currentdistillerparams where
{pop}
{
/FontInfo currentdict/FontInfo known
{FontInfo null copyfont}
{2 dict}
ifelse
dup
begin
/ItalicAngle $italicangle def
/FontMatrix FontMatrix
[1 0 ItalicAngle dup sin exch cos div 1 0 0]
matrix concatmatrix readonly
end
4 2 roll def
def
}
ifelse
FontName currentdict
end
definefont
exch setglobal
}bind def
end def
/$None
1 dict dup
begin
/$BuildFont{}bind def
end def
end def
/$Oblique SetSubstituteStrategy
/$findfontByEnum
{
dup type/stringtype eq{cvn}if
dup/$fontname exch def
$sname null eq
{$str cvs dup length $slen sub $slen getinterval}
{pop $sname}
ifelse
$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
/$match false def
$SubstituteFont/$dstack countdictstack array dictstack put
mark
{
$fontpat 0 $slen 7 add getinterval
{/$match exch def exit}
$str filenameforall
}
stopped
{
cleardictstack
currentdict
true
$SubstituteFont/$dstack get
{
exch
{
1 index eq
{pop false}
{true}
ifelse
}
{begin false}
ifelse
}
forall
pop
}
if
cleartomark
/$slen 0 def
$match false ne
{$match(fonts/)anchorsearch pop pop cvn}
{/Courier}
ifelse
}bind def
/$ROS 1 dict dup
begin
/Adobe 4 dict dup
begin
/Japan1 [/Ryumin-Light/HeiseiMin-W3
 /GothicBBB-Medium/HeiseiKakuGo-W5
 /HeiseiMaruGo-W4/Jun101-Light]def
/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
/GB1  [/STSong-Light/STHeiti-Regular]def
/CNS1 [/MKai-Medium/MHei-Medium]def
end def
end def
/$cmapname null def
/$deepcopyfont
{
dup/FontType get 0 eq
{
1 dict dup/FontName/copied put copyfont
begin
/FDepVector FDepVector copyarray
0 1 2 index length 1 sub
{
2 copy get $deepcopyfont
dup/FontName/copied put
/copied exch definefont
3 copy put pop pop
}
for
def
currentdict
end
}
{$Strategies/$Type3Underprint get exec}
ifelse
}bind def
/$buildfontname
{
dup/CIDFont findresource/CIDSystemInfo get
begin
Registry length Ordering length Supplement 8 string cvs
3 copy length 2 add add add string
dup 5 1 roll dup 0 Registry putinterval
dup 4 index(-)putinterval
dup 4 index 1 add Ordering putinterval
4 2 roll add 1 add 2 copy(-)putinterval
end
1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
anchorsearch
{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
{pop pop pop pop pop}
ifelse
length
$str 1 index(-)putinterval 1 add
$str 1 index $cmapname $fontpat cvs putinterval
$cmapname length add
$str exch 0 exch getinterval cvn
}bind def
/$findfontByROS
{
/$fontname exch def
$ROS Registry 2 copy known
{
get Ordering 2 copy known
{get}
{pop pop[]}
ifelse
}
{pop pop[]}
ifelse
false exch
{
dup/CIDFont resourcestatus
{
pop pop
save
1 index/CIDFont findresource
dup/WidthsOnly known
{dup/WidthsOnly get}
{false}
ifelse
exch pop
exch restore
{pop}
{exch pop true exit}
ifelse
}
{pop}
ifelse
}
forall
{$str cvs $buildfontname}
{
false(*)
{
save exch
dup/CIDFont findresource
dup/WidthsOnly known
{dup/WidthsOnly get not}
{true}
ifelse
exch/CIDSystemInfo get
dup/Registry get Registry eq
exch/Ordering get Ordering eq and and
{exch restore exch pop true exit}
{pop restore}
ifelse
}
$str/CIDFont resourceforall
{$buildfontname}
{$fontname $findfontByEnum}
ifelse
}
ifelse
}bind def
end
end
currentdict/$error known currentdict/languagelevel known and dup
{pop $error/SubstituteFont known}
if
dup
{$error}
{Adobe_CoolType_Core}
ifelse
begin
{
/SubstituteFont
/CMap/Category resourcestatus
{
pop pop
{
$SubstituteFont
begin
/$substituteFound true def
dup length $slen gt
$sname null ne or
$slen 0 gt and
{
$sname null eq
{dup $str cvs dup length $slen sub $slen getinterval cvn}
{$sname}
ifelse
Adobe_CoolType_Data/InVMFontsByCMap get
1 index 2 copy known
{
get
false exch
{
pop
currentglobal
{
GlobalFontDirectory 1 index known
{exch pop true exit}
{pop}
ifelse
}
{
FontDirectory 1 index known
{exch pop true exit}
{
GlobalFontDirectory 1 index known
{exch pop true exit}
{pop}
ifelse
}
ifelse
}
ifelse
}
forall
}
{pop pop false}
ifelse
{
exch pop exch pop
}
{
dup/CMap resourcestatus
{
pop pop
dup/$cmapname exch def
/CMap findresource/CIDSystemInfo get{def}forall
$findfontByROS
}
{
128 string cvs
dup(-)search
{
3 1 roll search
{
3 1 roll pop
{dup cvi}
stopped
{pop pop pop pop pop $findfontByEnum}
{
4 2 roll pop pop
exch length
exch
2 index length
2 index
sub
exch 1 sub -1 0
{
$str cvs dup length
4 index
0
4 index
4 3 roll add
getinterval
exch 1 index exch 3 index exch
putinterval
dup/CMap resourcestatus
{
pop pop
4 1 roll pop pop pop
dup/$cmapname exch def
/CMap findresource/CIDSystemInfo get{def}forall
$findfontByROS
true exit
}
{pop}
ifelse
}
for
dup type/booleantype eq
{pop}
{pop pop pop $findfontByEnum}
ifelse
}
ifelse
}
{pop pop pop $findfontByEnum}
ifelse
}
{pop pop $findfontByEnum}
ifelse
}
ifelse
}
ifelse
}
{//SubstituteFont exec}
ifelse
/$slen 0 def
end
}
}
{
{
$SubstituteFont
begin
/$substituteFound true def
dup length $slen gt
$sname null ne or
$slen 0 gt and
{$findfontByEnum}
{//SubstituteFont exec}
ifelse
end
}
}
ifelse
bind readonly def
Adobe_CoolType_Core/scfindfont/systemfindfont load put
}
{
/scfindfont
{
$SubstituteFont
begin
dup systemfindfont
dup/FontName known
{dup/FontName get dup 3 index ne}
{/noname true}
ifelse
dup
{
/$origfontnamefound 2 index def
/$origfontname 4 index def/$substituteFound true def
}
if
exch pop
{
$slen 0 gt
$sname null ne
3 index length $slen gt or and
{
pop dup $findfontByEnum findfont
dup maxlength 1 add dict
begin
{1 index/FID eq{pop pop}{def}ifelse}
forall
currentdict
end
definefont
dup/FontName known{dup/FontName get}{null}ifelse
$origfontnamefound ne
{
$origfontname $str cvs print
( substitution revised, using )print
dup/FontName known
{dup/FontName get}{(unspecified font)}
ifelse
$str cvs print(.\n)print
}
if
}
{exch pop}
ifelse
}
{exch pop}
ifelse
end
}bind def
}
ifelse
end
end
Adobe_CoolType_Core_Defined not
{
Adobe_CoolType_Core/findfont
{
$SubstituteFont
begin
$depth 0 eq
{
/$fontname 1 index dup type/stringtype ne{$str cvs}if def
/$substituteFound false def
}
if
/$depth $depth 1 add def
end
scfindfont
$SubstituteFont
begin
/$depth $depth 1 sub def
$substituteFound $depth 0 eq and
{
$inVMIndex null ne
{dup $inVMIndex $AddInVMFont}
if
$doSmartSub
{
currentdict/$Strategy known
{$Strategy/$BuildFont get exec}
if
}
if
}
if
end
}bind put
}
if
}
if
end
/$AddInVMFont
{
exch/FontName 2 copy known
{
get
1 dict dup begin exch 1 index gcheck def end exch
Adobe_CoolType_Data/InVMFontsByCMap get exch
$DictAdd
}
{pop pop pop}
ifelse
}bind def
/$DictAdd
{
2 copy known not
{2 copy 4 index length dict put}
if
Level2? not
{
2 copy get dup maxlength exch length 4 index length add lt
2 copy get dup length 4 index length add exch maxlength 1 index lt
{
2 mul dict
begin
2 copy get{forall}def
2 copy currentdict put
end
}
{pop}
ifelse
}
if
get
begin
{def}
forall
end
}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
{currentglobal false setglobal}
{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
{2 copy get dup maxlength 27 add dict copy}
{27 dict}
ifelse put
Adobe_CoolType_Utility
begin
/@eexecStartData
 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
/@recognizeCIDFont null def
/ct_Level2? exch def
/ct_Clone? 1183615869 internaldict dup
/CCRun known not
exch/eCCRun known not
ct_Level2? and or def
ct_Level2?
{globaldict begin currentglobal true setglobal}
if
/ct_AddStdCIDMap
ct_Level2?
{{
mark
Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
{
((Hex)57 StartData
 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
}
stopped
{
 cleartomark
 Adobe_CoolType_Utility/@recognizeCIDFont get
 countdictstack dup array dictstack
 exch 1 sub -1 0
 {
 2 copy get 3 index eq
{1 index length exch sub 1 sub{end}repeat exit}
{pop}
 ifelse
 }
 for
 pop pop
 Adobe_CoolType_Utility/@eexecStartData get eexec
}
{cleartomark}
ifelse
}}
{{
Adobe_CoolType_Utility/@eexecStartData get eexec
}}
ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
{
 cid_extensions
 begin
/cid_GetCIDSystemInfo
{
 1 index type/stringtype eq
{exch cvn exch}
 if
 cid_extensions
 begin
 dup load 2 index known
{
 2 copy
 cid_GetStatusInfo
 dup null ne
{
 1 index load
 3 index get
 dup null eq
 {pop pop cid_UpdateDB}
 {
 exch
 1 index/Created get eq
 {exch pop exch pop}
 {pop cid_UpdateDB}
 ifelse
 }
 ifelse
}
{pop cid_UpdateDB}
 ifelse
}
{cid_UpdateDB}
 ifelse
 end
}bind def
 end
}
if
ct_Level2?
{end setglobal}
if
/ct_UseNativeCapability? systemdict/composefont known def
/ct_MakeOCF 35 dict def
/ct_Vars 25 dict def
/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup
begin
/charcode 2 string def
/dst_string 1500 string def
/nullstring()def
/usewidths? true def
end def
ct_Level2?{setglobal}{pop}ifelse
ct_GlyphDirProcs
begin
/GetGlyphDirectory
{
systemdict/languagelevel known
{pop/CIDFont findresource/GlyphDirectory get}
{
1 index/CIDFont findresource/GlyphDirectory
get dup type/dicttype eq
{
dup dup maxlength exch length sub 2 index lt
{
dup length 2 index add dict copy 2 index
/CIDFont findresource/GlyphDirectory 2 index put
}
if
}
if
exch pop exch pop
}
ifelse
+
}def
/+
{
systemdict/languagelevel known
{
currentglobal false setglobal
3 dict begin
/vm exch def
}
{1 dict begin}
ifelse
/$ exch def
systemdict/languagelevel known
{
vm setglobal
/gvm currentglobal def
$ gcheck setglobal
}
if
?{$ begin}if
}def
/?{$ type/dicttype eq}def
/|{
userdict/Adobe_CoolType_Data known
{
Adobe_CoolType_Data/AddWidths? known
{
 currentdict Adobe_CoolType_Data
begin
 begin
AddWidths?
{
Adobe_CoolType_Data/CC 3 index put
?{def}{$ 3 1 roll put}ifelse
CC charcode exch 1 index 0 2 index 256 idiv put
1 index exch 1 exch 256 mod put
stringwidth 2 array astore
currentfont/Widths get exch CC exch put
}
{?{def}{$ 3 1 roll put}ifelse}
ifelse
end
end
}
{?{def}{$ 3 1 roll put}ifelse} ifelse
}
{?{def}{$ 3 1 roll put}ifelse}
ifelse
}def
/!
{
?{end}if
systemdict/languagelevel known
{gvm setglobal}
if
end
}def
/:{string currentfile exch readstring pop}executeonly def
end
ct_MakeOCF
begin
/ct_cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def
/ct_mkocfStr100 100 string def
/ct_defaultFontMtx[.001 0 0 .001 0 0]def
/ct_1000Mtx[1000 0 0 1000 0 0]def
/ct_raise{exch cvx exch errordict exch get exec stop}bind def
/ct_reraise
{cvx $error/errorname get(Error: )print dup(  )cvs print
errordict exch get exec stop
}bind def
/ct_cvnsi
{
1 index add 1 sub 1 exch 0 4 1 roll
{
2 index exch get
exch 8 bitshift
add
}
for
exch pop
}bind def
/ct_GetInterval
{
Adobe_CoolType_Utility/ct_BuildCharDict get
begin
/dst_index 0 def
dup dst_string length gt
{dup string/dst_string exch def}
if
1 index ct_CID_STR_SIZE idiv
/arrayIndex exch def
2 index arrayIndex get
2 index
arrayIndex ct_CID_STR_SIZE mul
sub
{
dup 3 index add 2 index length le
{
2 index getinterval
dst_string dst_index 2 index putinterval
length dst_index add/dst_index exch def
exit
}
{
1 index length 1 index sub
dup 4 1 roll
getinterval
dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def
sub
/arrayIndex arrayIndex 1 add def
2 index dup length arrayIndex gt
 {arrayIndex get}
 {
 pop
 exit
 }
ifelse
0
}
ifelse
}
loop
pop pop pop
dst_string 0 dst_index getinterval
end
}bind def
ct_Level2?
{
/ct_resourcestatus
currentglobal mark true setglobal
{/unknowninstancename/Category resourcestatus}
stopped
{cleartomark setglobal true}
{cleartomark currentglobal not exch setglobal}
ifelse
{
{
mark 3 1 roll/Category findresource
begin
ct_Vars/vm currentglobal put
({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
{cleartomark false}
{{3 2 roll pop true}{cleartomark false}ifelse}
ifelse
ct_Vars/vm get setglobal
end
}
}
{{resourcestatus}}
ifelse bind def
/CIDFont/Category ct_resourcestatus
{pop pop}
{
currentglobal true setglobal
/Generic/Category findresource
dup length dict copy
dup/InstanceType/dicttype put
/CIDFont exch/Category defineresource pop
setglobal
}
ifelse
ct_UseNativeCapability?
{
/CIDInit/ProcSet findresource begin
12 dict begin
begincmap
/CIDSystemInfo 3 dict dup begin
 /Registry(Adobe)def
 /Ordering(Identity)def
 /Supplement 0 def
end def
/CMapName/Identity-H def
/CMapVersion 1.000 def
/CMapType 1 def
1 begincodespacerange
<0000><FFFF>
endcodespacerange
1 begincidrange
<0000><FFFF>0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
}
if
}
{
/ct_Category 2 dict begin
/CIDFont 10 dict def
/ProcSet 2 dict def
currentdict
end
def
/defineresource
{
ct_Category 1 index 2 copy known
{
get
dup dup maxlength exch length eq
{
dup length 10 add dict copy
ct_Category 2 index 2 index put
}
if
3 index 3 index put
pop exch pop
}
{pop pop/defineresource/undefined ct_raise}
ifelse
}bind def
/findresource
{
ct_Category 1 index 2 copy known
{
get
2 index 2 copy known
{get 3 1 roll pop pop}
{pop pop/findresource/undefinedresource ct_raise}
ifelse
}
{pop pop/findresource/undefined ct_raise}
ifelse
}bind def
/resourcestatus
{
ct_Category 1 index 2 copy known
{
get
2 index known
exch pop exch pop
{
0 -1 true
}
{
false
}
ifelse
}
{pop pop/findresource/undefined ct_raise}
ifelse
}bind def
/ct_resourcestatus/resourcestatus load def
}
ifelse
/ct_CIDInit 2 dict
begin
/ct_cidfont_stream_init
{
{
dup(Binary)eq
{
pop
null
currentfile
ct_Level2?
{
{cid_BYTE_COUNT()/SubFileDecode filter}
stopped
{pop pop pop}
if
}
if
/readstring load
exit
}
if
dup(Hex)eq
{
pop
currentfile
ct_Level2?
{
{null exch/ASCIIHexDecode filter/readstring}
stopped
{pop exch pop(>)exch/readhexstring}
if
}
{(>)exch/readhexstring}
ifelse
load
exit
}
if
/StartData/typecheck ct_raise
}
loop
cid_BYTE_COUNT ct_CID_STR_SIZE le
{
2 copy cid_BYTE_COUNT string exch exec
pop
1 array dup
3 -1 roll
0 exch put
}
{
cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
dup array exch 2 sub 0 exch 1 exch
{
2 copy
5 index
ct_CID_STR_SIZE
string
6 index exec
pop
put
pop
}
for
2 index
cid_BYTE_COUNT ct_CID_STR_SIZE mod string
3 index exec
pop
1 index exch
1 index length 1 sub
exch put
}
ifelse
cid_CIDFONT exch/GlyphData exch put
2 index null eq
{
pop pop pop
}
{
pop/readstring load
1 string exch
{
3 copy exec
pop
dup length 0 eq
{
pop pop pop pop pop
true exit
}
if
4 index
eq
{
pop pop pop pop
false exit
}
if
}
loop
pop
}
ifelse
}bind def
/StartData
{
mark
{
currentdict
dup/FDArray get 0 get/FontMatrix get
0 get 0.001 eq
{
dup/CDevProc known not
{
/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
{get}
{
pop pop
{pop pop pop pop pop 0 -1000 7 index 2 div 880}
}
ifelse
def
}
if
}
{
/CDevProc
{
 pop pop pop pop pop
 0
 1 cid_temp/cid_CIDFONT get
/FDArray get 0 get
/FontMatrix get 0 get div
 7 index 2 div
 1 index 0.88 mul
}def
}
ifelse
/cid_temp 15 dict def
cid_temp
begin
/cid_CIDFONT exch def
3 copy pop
dup/cid_BYTE_COUNT exch def 0 gt
{
ct_cidfont_stream_init
FDArray
{
/Private get
dup/SubrMapOffset known
{
begin
/Subrs SubrCount array def
Subrs
SubrMapOffset
SubrCount
SDBytes
ct_Level2?
{
currentdict dup/SubrMapOffset undef
dup/SubrCount undef
/SDBytes undef
}
if
end
/cid_SD_BYTES exch def
/cid_SUBR_COUNT exch def
/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def
cid_SUBR_COUNT 0 gt
{
GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
0 cid_SD_BYTES ct_cvnsi
0 1 cid_SUBR_COUNT 1 sub
{
exch 1 index
1 add
cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
GlyphData exch cid_SD_BYTES ct_GetInterval
0 cid_SD_BYTES ct_cvnsi
cid_SUBRS 4 2 roll
GlyphData exch
4 index
1 index
sub
ct_GetInterval
dup length string copy put
}
for
pop
}
if
}
{pop}
ifelse
}
forall
}
if
cleartomark pop pop
end
CIDFontName currentdict/CIDFont defineresource pop
end end
}
stopped
{cleartomark/StartData ct_reraise}
if
}bind def
currentdict
end def
/ct_saveCIDInit
{
/CIDInit/ProcSet ct_resourcestatus
{true}
{/CIDInitC/ProcSet ct_resourcestatus}
ifelse
{
pop pop
/CIDInit/ProcSet findresource
ct_UseNativeCapability?
{pop null}
{/CIDInit ct_CIDInit/ProcSet defineresource pop}
ifelse
}
{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
ifelse
ct_Vars exch/ct_oldCIDInit exch put
}bind def
/ct_restoreCIDInit
{
ct_Vars/ct_oldCIDInit get dup null ne
{/CIDInit exch/ProcSet defineresource pop}
{pop}
ifelse
}bind def
/ct_BuildCharSetUp
{
1 index
begin
CIDFont
begin
Adobe_CoolType_Utility/ct_BuildCharDict get
begin
/ct_dfCharCode exch def
/ct_dfDict exch def
CIDFirstByte ct_dfCharCode add
dup CIDCount ge
{pop 0}
if
/cid exch def
{
GlyphDirectory cid 2 copy known
{get}
{pop pop nullstring}
ifelse
dup length FDBytes sub 0 gt
{
dup
FDBytes 0 ne
{0 FDBytes ct_cvnsi}
{pop 0}
ifelse
/fdIndex exch def
dup length FDBytes sub FDBytes exch getinterval
/charstring exch def
exit
}
{
pop
cid 0 eq
{/charstring nullstring def exit}
if
/cid 0 def
}
ifelse
}
loop
}def
/ct_SetCacheDevice
{
0 0 moveto
dup stringwidth
3 -1 roll
true charpath
pathbbox
0 -1000
7 index 2 div 880
setcachedevice2
0 0 moveto
}def
/ct_CloneSetCacheProc
{
1 eq
{
stringwidth
pop -2 div -880
0 -1000 setcharwidth
moveto
}
{
usewidths?
{
currentfont/Widths get cid
2 copy known
{get exch pop aload pop}
{pop pop stringwidth}
ifelse
}
{stringwidth}
ifelse
setcharwidth
0 0 moveto
}
ifelse
}def
/ct_Type3ShowCharString
{
ct_FDDict fdIndex 2 copy known
{get}
{
currentglobal 3 1 roll
1 index gcheck setglobal
ct_Type1FontTemplate dup maxlength dict copy
begin
FDArray fdIndex get
dup/FontMatrix 2 copy known
{get}
{pop pop ct_defaultFontMtx}
ifelse
/FontMatrix exch dup length array copy def
/Private get
/Private exch def
/Widths rootfont/Widths get def
/CharStrings 1 dict dup/.notdef
<d841272cf18f54fc13>dup length string copy put def
currentdict
end
/ct_Type1Font exch definefont
dup 5 1 roll put
setglobal
}
ifelse
dup/CharStrings get 1 index/Encoding get
ct_dfCharCode get charstring put
rootfont/WMode 2 copy known
{get}
{pop pop 0}
ifelse
exch
1000 scalefont setfont
ct_str1 0 ct_dfCharCode put
ct_str1 exch ct_dfSetCacheProc
ct_SyntheticBold
{
currentpoint
ct_str1 show
newpath
moveto
ct_str1 true charpath
ct_StrokeWidth setlinewidth
stroke
}
{ct_str1 show}
ifelse
}def
/ct_Type4ShowCharString
{
ct_dfDict ct_dfCharCode charstring
FDArray fdIndex get
dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
{ct_1000Mtx matrix concatmatrix concat}
{pop}
ifelse
/Private get
Adobe_CoolType_Utility/ct_Level2? get not
{
ct_dfDict/Private
3 -1 roll
{put}
1183615869 internaldict/superexec get exec
}
if
1183615869 internaldict
Adobe_CoolType_Utility/ct_Level2? get
{1 index}
{3 index/Private get mark 6 1 roll}
ifelse
dup/RunInt known
{/RunInt get}
{pop/CCRun}
ifelse
get exec
Adobe_CoolType_Utility/ct_Level2? get not
{cleartomark}
if
}bind def
/ct_BuildCharIncremental
{
{
Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp
ct_ShowCharString
}
stopped
{stop}
if
end
end
end
end
}bind def
/BaseFontNameStr(BF00)def
/ct_Type1FontTemplate 14 dict
begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0]def
/FontBBox [-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def
/PaintType 0 def
currentdict
end def
/BaseFontTemplate 11 dict
begin
/FontMatrix [0.001 0 0 0.001 0 0]def
/FontBBox [-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def
/BuildChar/ct_BuildCharIncremental load def
ct_Clone?
{
/FontType 3 def
/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
/ct_SyntheticBold false def
/ct_StrokeWidth 1 def
}
{
/FontType 4 def
/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def
}
ifelse
/ct_str1 1 string def
currentdict
end def
/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq
{
true 0 1 5
{
dup 4 index exch get exch 3 index exch get eq and
dup not
{exit}
if
}
for
exch pop exch pop
}bind def
/ct_makeocf
{
15 dict
begin
exch/WMode exch def
exch/FontName exch def
/FontType 0 def
/FMapType 2 def
dup/FontMatrix known
{dup/FontMatrix get/FontMatrix exch def}
{/FontMatrix matrix def}
ifelse
/bfCount 1 index/CIDCount get 256 idiv 1 add
dup 256 gt{pop 256}if def
/Encoding
256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
bfCount 1 255{2 copy bfCount put pop}for
def
/FDepVector bfCount dup 256 lt{1 add}if array def
BaseFontTemplate BaseFontDictSize dict copy
begin
/CIDFont exch def
CIDFont/FontBBox known
{CIDFont/FontBBox get/FontBBox exch def}
if
CIDFont/CDevProc known
{CIDFont/CDevProc get/CDevProc exch def}
if
currentdict
end
BaseFontNameStr 3(0)putinterval
0 1 bfCount dup 256 eq{1 sub}if
{
FDepVector exch
2 index BaseFontDictSize dict copy
begin
dup/CIDFirstByte exch 256 mul def
FontType 3 eq
{/ct_FDDict 2 dict def}
if
currentdict
end
1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop
BaseFontNameStr exch definefont
put
}
for
ct_Clone?
{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if
FontName
currentdict
end
definefont
ct_Clone?
{
gsave
dup 1000 scalefont setfont
ct_BuildCharDict
begin
/usewidths? false def
currentfont/Widths get
begin
exch/CIDFont get/GlyphDirectory get
{
pop
dup charcode exch 1 index 0 2 index 256 idiv put
1 index exch 1 exch 256 mod put
stringwidth 2 array astore def
}
forall
end
/usewidths? true def
end
grestore
}
{exch pop}
ifelse
}bind def
currentglobal true setglobal
/ct_ComposeFont
{
ct_UseNativeCapability?
{
2 index/CMap ct_resourcestatus
{pop pop exch pop}
{
/CIDInit/ProcSet findresource
begin
12 dict
begin
begincmap
/CMapName 3 index def
/CMapVersion 1.000 def
/CMapType 1 def
exch/WMode exch def
/CIDSystemInfo 3 dict dup
begin
/Registry(Adobe)def
/Ordering
CMapName ct_mkocfStr100 cvs
(Adobe-)search
{
pop pop
(-)search
{
dup length string copy
exch pop exch pop
}
{pop(Identity)}
ifelse
}
{pop (Identity)}
ifelse
def
/Supplement 0 def
end def
1 begincodespacerange
<0000><FFFF>
endcodespacerange
1 begincidrange
<0000><FFFF>0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
}
ifelse
composefont
}
{
3 2 roll pop
0 get/CIDFont findresource
ct_makeocf
}
ifelse
}bind def
setglobal
/ct_MakeIdentity
{
ct_UseNativeCapability?
{
1 index/CMap ct_resourcestatus
{pop pop}
{
/CIDInit/ProcSet findresource begin
12 dict begin
begincmap
/CMapName 2 index def
/CMapVersion 1.000 def
/CMapType 1 def
/CIDSystemInfo 3 dict dup
begin
/Registry(Adobe)def
/Ordering
CMapName ct_mkocfStr100 cvs
(Adobe-)search
{
pop pop
(-)search
{dup length string copy exch pop exch pop}
{pop(Identity)}
ifelse
}
{pop(Identity)}
ifelse
def
/Supplement 0 def
end def
1 begincodespacerange
<0000><FFFF>
endcodespacerange
1 begincidrange
<0000><FFFF>0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
}
ifelse
composefont
}
{
exch pop
0 get/CIDFont findresource
ct_makeocf
}
ifelse
}bind def
currentdict readonly pop
end
end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {
pop
 }
 {
{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict
begin
 /.notdef 0 def
 currentdict
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{
/GlyphDirectory
 16
 dict def
 sfnts 0 get
 dup
 2 index
(glyx)
 putinterval
 2 index
(locx)
 putinterval
 pop
 pop
}
{
 pop
 pop
}ifelse
}bind def
/AddT42Char
{
Is2015?
{
/GlyphDirectory get
begin
def
end
pop
pop
}
{
/sfnts get
4 index
get
3 index
 2 index
putinterval
pop
pop
pop
pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup
   length 1 add dict
   begin
ct_CopyFont
/Encoding Encoding dup length array copy
dup
4 -1 roll
0 exch put
def
currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph
{
  gsave
8 -1 roll pop
7 1 roll
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup  9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
0 ct_FontMatrix dtransform pop
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
    if
setcachedevice
        ct_FontMatrix concat
        ct_PSPathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
       ifelse
setlinewidth stroke
}
{
    fill
}
ifelse
    grestore
} def
/ct_PSPathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc
{
   2 index findfont dup length 4 add dict
   begin
ct_CopyFont
/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def
         currentdict
      end
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
/ct_AddGlyphToPrinterFont {
2 copy
ct_GetGlyphOutline 3 add -1 roll restore
ct_MakeGlyphProc
ct_AddGlyphProc
} def
}
{
/ct_AddGlyphToPrinterFont {
    pop pop restore
Adobe_CTFauxDict /$$$FONTNAME get
/Euro
Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
ct_EuroDict exch get
ct_AddGlyphProc
} def
} ifelse
/AdobeSansMM
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
ct_PSBuildGlyph
} def
/AdobeSerifMM
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
ct_PSBuildGlyph
} def
end
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
currentpacking
true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
Adobe_AGM_Core begin
Adobe_AGM_Image begin
/AGMIMG_&image systemdict/image get def
/AGMIMG_&imagemask systemdict/imagemask get def
/colorimage where{
pop
/AGMIMG_&colorimage/colorimage ldf
}if
end
end
}def
/ps
{
Adobe_AGM_Image begin
/AGMIMG_ccimage_exists{/customcolorimage where
{
pop
/Adobe_AGM_OnHost_Seps where
{
pop false
}{
/Adobe_AGM_InRip_Seps where
{
pop false
}{
true
}ifelse
}ifelse
}{
false
}ifelse
}bdf
level2{
/invert_image_samples
{
Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
/Decode[Decode 1 get Decode 0 get]def
}def
/knockout_image_samples
{
Operator/imagemask ne{
/Decode[1 1]def
}if
}def
}{
/invert_image_samples
{
{1 exch sub}currenttransfer addprocs settransfer
}def
/knockout_image_samples
{
{pop 1}currenttransfer addprocs settransfer
}def
}ifelse
/img/imageormask ldf
/sepimg/sep_imageormask ldf
/devnimg/devn_imageormask ldf
/idximg/indexed_imageormask ldf
/_ctype 7 def
currentdict{
dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
bind
}if
def
}forall
}def
/pt
{
end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
dup type/arraytype ne
{1 array astore}if
dup 0 get currentfile ne
{dup 0 get flushfile}if
{
dup type/filetype eq
{
dup status 1 index currentfile ne and
{closefile}
{pop}
ifelse
}{pop}ifelse
}forall
}def
/AGMIMG_init_common
{
currentdict/T known{/ImageType/T ldf currentdict/T undef}if
currentdict/W known{/Width/W ldf currentdict/W undef}if
currentdict/H known{/Height/H ldf currentdict/H undef}if
currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
currentdict/D known{/Decode/D ldf currentdict/D undef}if
currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
currentdict/O known{
/Operator/O load 1 eq{
/imagemask
}{
/O load 2 eq{
/image
}{
/colorimage
}ifelse
}ifelse
def
currentdict/O undef
}if
currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
/DataSource load xcheck not{
DataSource type/arraytype eq{
DataSource 0 get type/filetype eq{
/_Filters DataSource def
currentdict/MultipleDataSources known not{
/DataSource DataSource dup length 1 sub get def
}if
}if
}if
currentdict/MultipleDataSources known not{
/MultipleDataSources DataSource type/arraytype eq{
DataSource length 1 gt
}
{false}ifelse def
}if
}if
/NComponents Decode length 2 div def
currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
begin
AGMIMG_init_common
save mark
level2{
currentdict
Operator/imagemask eq{
AGMIMG_&imagemask
}{
use_mask{
process_mask AGMIMG_&image
}{
AGMIMG_&image
}ifelse
}ifelse
}{
Width Height
Operator/imagemask eq{
Decode 0 get 1 eq Decode 1 get 0 eq and
ImageMatrix/DataSource load
AGMIMG_&imagemask
}{
BitsPerComponent ImageMatrix/DataSource load
AGMIMG_&image
}ifelse
}ifelse
currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
cleartomark restore
end
}def
/overprint_plate
{
currentoverprint{
0 get dup type/nametype eq{
dup/DeviceGray eq{
pop AGMCORE_black_plate not
}{
/DeviceCMYK eq{
AGMCORE_is_cmyk_sep not
}if
}ifelse
}{
false exch
{
 AGMOHS_sepink eq or
}forall
not
}ifelse
}{
pop false
}ifelse
}def
/process_mask
{
level3{
dup begin
/ImageType 1 def
end
4 dict begin
/DataDict exch def
/ImageType 3 def
/InterleaveType 3 def
/MaskDict 9 dict begin
/ImageType 1 def
/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
/NComponents 1 def
/BitsPerComponent 1 def
/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
currentdict end def
currentdict end
}if
}def
/use_mask
{
dup/Mask known {dup/Mask get}{false}ifelse
}def
/imageormask
{
begin
AGMIMG_init_common
SkipImageProc{
currentdict consumeimagedata
}
{
save mark
level2 AGMCORE_host_sep not and{
currentdict
Operator/imagemask eq DeviceN_PS2 not and{
imagemask
}{
AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
[/Separation/Black/DeviceGray{}]setcolorspace
/Decode[Decode 1 get Decode 0 get]def
}if
use_mask{
process_mask image
}{
DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and
{
Names convert_to_process not{
2 dict begin
/imageDict xdf
/names_index 0 def
gsave
imageDict write_image_file{
Names{
dup(None)ne{
[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
Operator imageDict read_image_file
names_index 0 eq{true setoverprint}if
/names_index names_index 1 add def
}{
pop
}ifelse
}forall
close_image_file
}if
grestore
end
}{
Operator/imagemask eq{
imagemask
}{
image
}ifelse
}ifelse
}{
Operator/imagemask eq{
imagemask
}{
image
}ifelse
}ifelse
}ifelse
}ifelse
}{
Width Height
Operator/imagemask eq{
Decode 0 get 1 eq Decode 1 get 0 eq and
ImageMatrix/DataSource load
/Adobe_AGM_OnHost_Seps where{
pop imagemask
}{
currentgray 1 ne{
currentdict imageormask_sys
}{
currentoverprint not{
1 AGMCORE_&setgray
currentdict imageormask_sys
}{
currentdict ignoreimagedata
}ifelse
}ifelse
}ifelse
}{
BitsPerComponent ImageMatrix
MultipleDataSources{
0 1 NComponents 1 sub{
DataSource exch get
}for
}{
/DataSource load
}ifelse
Operator/colorimage eq{
AGMCORE_host_sep{
MultipleDataSources level2 or NComponents 4 eq and{
AGMCORE_is_cmyk_sep{
MultipleDataSources{
/DataSource DataSource 0 get xcheck
{
[
DataSource 0 get/exec cvx
DataSource 1 get/exec cvx
DataSource 2 get/exec cvx
DataSource 3 get/exec cvx
/AGMCORE_get_ink_data cvx
]cvx
}{
DataSource aload pop AGMCORE_get_ink_data
}ifelse def
}{
/DataSource
Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul
/DataSource load
filter_cmyk 0()/SubFileDecode filter def
}ifelse
/Decode[Decode 0 get Decode 1 get]def
/MultipleDataSources false def
/NComponents 1 def
/Operator/image def
invert_image_samples
  1 AGMCORE_&setgray
currentdict imageormask_sys
}{
currentoverprint not Operator/imagemask eq and{
    1 AGMCORE_&setgray
    currentdict imageormask_sys
    }{
    currentdict ignoreimagedata
    }ifelse
}ifelse
}{
MultipleDataSources NComponents AGMIMG_&colorimage
}ifelse
}{
true NComponents colorimage
}ifelse
}{
Operator/image eq{
AGMCORE_host_sep{
/DoImage true def
currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
{
AGMCORE_black_plate not Operator/imagemask ne and{
/DoImage false def
currentdict ignoreimagedata
  }if
}if
  1 AGMCORE_&setgray
DoImage
{currentdict imageormask_sys}if
}{
use_mask{
process_mask image
}{
image
}ifelse
}ifelse
}{
Operator/knockout eq{
pop pop pop pop pop
currentcolorspace overprint_plate not{
knockout_unitsq
}if
}if
}ifelse
}ifelse
}ifelse
}ifelse
cleartomark restore
}ifelse
currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
end
}def
/sep_imageormask
{
  /sep_colorspace_dict AGMCORE_gget begin
CSA map_csa
begin
AGMIMG_init_common
SkipImageProc{
currentdict consumeimagedata
}{
save mark
AGMCORE_avoid_L2_sep_space{
/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
}if
  AGMIMG_ccimage_exists
MappedCSA 0 get/DeviceCMYK eq and
currentdict/Components known and
Name()ne and
Name(All)ne and
Operator/image eq and
AGMCORE_producing_seps not and
level2 not and
{
Width Height BitsPerComponent ImageMatrix
[
/DataSource load/exec cvx
{
0 1 2 index length 1 sub{
1 index exch
2 copy get 255 xor put
}for
}/exec cvx
]cvx bind
MappedCSA 0 get/DeviceCMYK eq{
Components aload pop
}{
0 0 0 Components aload pop 1 exch sub
}ifelse
Name findcmykcustomcolor
customcolorimage
}{
AGMCORE_producing_seps not{
level2{
  //Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
/sep_tint AGMCORE_gget setcolor
}if
currentdict imageormask
}{
currentdict
Operator/imagemask eq{
imageormask
}{
sep_imageormask_lev1
}ifelse
}ifelse
  }{
AGMCORE_host_sep{
Operator/knockout eq{
currentdict/ImageMatrix get concat
knockout_unitsq
}{
currentgray 1 ne{
  AGMCORE_is_cmyk_sep Name(All)ne and{
  level2{
  Name AGMCORE_IsSeparationAProcessColor
  {
  Operator/imagemask eq{
  //Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
  /sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
  }if
  }{
invert_image_samples
  }ifelse
  }{
  //Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
  [/Separation Name[/DeviceGray]
  {
  sep_colorspace_proc AGMCORE_get_ink_data
1 exch sub
  }bind
]AGMCORE_&setcolorspace
/sep_tint AGMCORE_gget AGMCORE_&setcolor
}if
  }ifelse
  currentdict imageormask_sys
  }{
  currentdict
Operator/imagemask eq{
imageormask_sys
}{
sep_image_lev1_sep
}ifelse
  }ifelse
  }{
  Operator/imagemask ne{
invert_image_samples
  }if
  currentdict imageormask_sys
  }ifelse
  }{
  currentoverprint not Name(All)eq or Operator/imagemask eq and{
currentdict imageormask_sys
}{
currentoverprint not
{
  gsave
  knockout_unitsq
  grestore
}if
currentdict consumeimagedata
  }ifelse
  }ifelse
  }ifelse
  }{
//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
currentcolorspace 0 get/Separation ne{
[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
/sep_tint AGMCORE_gget setcolor
}if
}if
currentoverprint
MappedCSA 0 get/DeviceCMYK eq and
Name AGMCORE_IsSeparationAProcessColor not and
//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse
Name(All)ne and{
imageormask_l2_overprint
}{
currentdict imageormask
  }ifelse
}ifelse
}ifelse
}ifelse
cleartomark restore
}ifelse
currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
end
end
}def
/colorSpaceElemCnt
{
mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
1 dict begin
/dataSource xdf
[
0 1 dataSource length 1 sub{
dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
}for
]cvx bind
end
}bdf
/devn_alt_datasource
{
11 dict begin
/convProc xdf
/origcolorSpaceElemCnt xdf
/origMultipleDataSources xdf
/origBitsPerComponent xdf
/origDecode xdf
/origDataSource xdf
/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
/DataSource origMultipleDataSources
{
[
BitsPerComponent 8 idiv origDecode length 2 idiv mul string
0 1 origDecode length 2 idiv 1 sub
{
dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
origDataSource exch get 0()/SubFileDecode filter
BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
}for
]bind cvx
}{origDataSource}ifelse 0()/SubFileDecode filter def
[
origcolorSpaceElemCnt string
0 2 origDecode length 2 sub
{
dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
}for
/convProc load/exec cvx
origcolorSpaceElemCnt 1 sub -1 0
{
/dup cvx 2/add cvx/index cvx
3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
}for
]bind cvx 0()/SubFileDecode filter
end
}bdf
/devn_imageormask
{
  /devicen_colorspace_dict AGMCORE_gget begin
CSA map_csa
2 dict begin
dup
/srcDataStrs[3 -1 roll begin
AGMIMG_init_common
currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
{
Width Decode length 2 div mul cvi
{
dup 65535 gt{1 add 2 div cvi}{exit}ifelse
}loop
string
}repeat
end]def
/dstDataStr srcDataStrs 0 get length string def
begin
AGMIMG_init_common
SkipImageProc{
currentdict consumeimagedata
}{
save mark
AGMCORE_producing_seps not{
level3 not{
Operator/imagemask ne{
/DataSource[[
DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get
devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def
/MultipleDataSources true def
/Decode colorSpaceElemCnt[exch{0 1}repeat]def
}if
}if
currentdict imageormask
  }{
AGMCORE_host_sep{
Names convert_to_process{
CSA get_csa_by_name 0 get/DeviceCMYK eq{
/DataSource
Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul
DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
4/devicen_colorspace_dict AGMCORE_gget/TintTransform get
devn_alt_datasource
filter_cmyk 0()/SubFileDecode filter def
/MultipleDataSources false def
/Decode[1 0]def
/DeviceGray setcolorspace
  currentdict imageormask_sys
  }{
AGMCORE_report_unsupported_color_space
AGMCORE_black_plate{
/DataSource
DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
devn_alt_datasource
/MultipleDataSources false def
/Decode colorSpaceElemCnt[exch{0 1}repeat]def
  currentdict imageormask_sys
  }{
  gsave
  knockout_unitsq
  grestore
currentdict consumeimagedata
}ifelse
  }ifelse
}
{
/devicen_colorspace_dict AGMCORE_gget/names_index known{
  Operator/imagemask ne{
  MultipleDataSources{
  /DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
/MultipleDataSources false def
  }{
/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
  }ifelse
invert_image_samples
  }if
  currentdict imageormask_sys
  }{
  currentoverprint not Operator/imagemask eq and{
currentdict imageormask_sys
}{
currentoverprint not
{
  gsave
  knockout_unitsq
  grestore
}if
currentdict consumeimagedata
  }ifelse
  }ifelse
  }ifelse
  }{
currentdict imageormask
}ifelse
}ifelse
cleartomark restore
}ifelse
currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
end
end
end
}def
/imageormask_l2_overprint
{
currentdict
currentcmykcolor add add add 0 eq{
currentdict consumeimagedata
}{
level3{
currentcmykcolor
/AGMIMG_k xdf
/AGMIMG_y xdf
/AGMIMG_m xdf
/AGMIMG_c xdf
Operator/imagemask eq{
[/DeviceN[
AGMIMG_c 0 ne{/Cyan}if
AGMIMG_m 0 ne{/Magenta}if
AGMIMG_y 0 ne{/Yellow}if
AGMIMG_k 0 ne{/Black}if
]/DeviceCMYK{}]setcolorspace
AGMIMG_c 0 ne{AGMIMG_c}if
AGMIMG_m 0 ne{AGMIMG_m}if
AGMIMG_y 0 ne{AGMIMG_y}if
AGMIMG_k 0 ne{AGMIMG_k}if
setcolor
}{
/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
[/Indexed
[
/DeviceN[
AGMIMG_c 0 ne{/Cyan}if
AGMIMG_m 0 ne{/Magenta}if
AGMIMG_y 0 ne{/Yellow}if
AGMIMG_k 0 ne{/Black}if
]
/DeviceCMYK{
AGMIMG_k 0 eq{0}if
AGMIMG_y 0 eq{0 exch}if
AGMIMG_m 0 eq{0 3 1 roll}if
AGMIMG_c 0 eq{0 4 1 roll}if
}
]
255
{
255 div
mark exch
dup dup dup
AGMIMG_k 0 ne{
/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop
counttomark 1 roll
}{
pop
}ifelse
AGMIMG_y 0 ne{
/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop
counttomark 1 roll
}{
pop
}ifelse
AGMIMG_m 0 ne{
/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop
counttomark 1 roll
}{
pop
}ifelse
AGMIMG_c 0 ne{
/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop
counttomark 1 roll
}{
pop
}ifelse
counttomark 1 add -1 roll pop
}
]setcolorspace
}ifelse
imageormask_sys
}{
write_image_file{
currentcmykcolor
0 ne{
[/Separation/Black/DeviceGray{}]setcolorspace
gsave
/Black
[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
cvx modify_halftone_xfer
Operator currentdict read_image_file
grestore
}if
0 ne{
[/Separation/Yellow/DeviceGray{}]setcolorspace
gsave
/Yellow
[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
cvx modify_halftone_xfer
Operator currentdict read_image_file
grestore
}if
0 ne{
[/Separation/Magenta/DeviceGray{}]setcolorspace
gsave
/Magenta
[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
cvx modify_halftone_xfer
Operator currentdict read_image_file
grestore
}if
0 ne{
[/Separation/Cyan/DeviceGray{}]setcolorspace
gsave
/Cyan
[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
cvx modify_halftone_xfer
Operator currentdict read_image_file
grestore
}if
close_image_file
}{
imageormask
}ifelse
}ifelse
}ifelse
}def
/indexed_imageormask
{
begin
AGMIMG_init_common
save mark
  currentdict
  AGMCORE_host_sep{
Operator/knockout eq{
/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
/CSA get get_csa_by_name
}{
/Names get
}ifelse
overprint_plate not{
knockout_unitsq
}if
}{
Indexed_DeviceN{
/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
  indexed_image_lev2_sep
}{
currentoverprint not{
knockout_unitsq
  }if
  currentdict consumeimagedata
}ifelse
}{
  AGMCORE_is_cmyk_sep{
Operator/imagemask eq{
imageormask_sys
}{
level2{
indexed_image_lev2_sep
}{
indexed_image_lev1_sep
}ifelse
}ifelse
}{
currentoverprint not{
knockout_unitsq
  }if
  currentdict consumeimagedata
}ifelse
}ifelse
}ifelse
  }{
level2{
Indexed_DeviceN{
/indexed_colorspace_dict AGMCORE_gget begin
}{
/indexed_colorspace_dict AGMCORE_gget dup null ne
{
begin
currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
AGMCORE_in_rip_sep and{
[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
setcolorspace
}if
end
}
{pop}ifelse
}ifelse
imageormask
Indexed_DeviceN{
end
}if
}{
Operator/imagemask eq{
imageormask
}{
indexed_imageormask_lev1
}ifelse
}ifelse
  }ifelse
cleartomark restore
currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
end
}def
/indexed_image_lev2_sep
{
/indexed_colorspace_dict AGMCORE_gget begin
begin
Indexed_DeviceN not{
currentcolorspace
dup 1/DeviceGray put
dup 3
currentcolorspace 2 get 1 add string
0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
{
dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
}for
put setcolorspace
}if
currentdict
Operator/imagemask eq{
AGMIMG_&imagemask
}{
use_mask{
process_mask AGMIMG_&image
}{
AGMIMG_&image
}ifelse
}ifelse
end end
}def
 /OPIimage
 {
  dup type/dicttype ne{
  10 dict begin
  /DataSource xdf
  /ImageMatrix xdf
  /BitsPerComponent xdf
  /Height xdf
  /Width xdf
  /ImageType 1 def
  /Decode[0 1 def]
  currentdict
  end
  }if
  dup begin
  /NComponents 1 cdndf
  /MultipleDataSources false cdndf
  /SkipImageProc{false}cdndf
  /Decode[
  0
  currentcolorspace 0 get/Indexed eq{
  2 BitsPerComponent exp 1 sub
  }{
  1
  }ifelse
  ]cdndf
  /Operator/image cdndf
  end
  /sep_colorspace_dict AGMCORE_gget null eq{
  imageormask
  }{
  gsave
  dup begin invert_image_samples end
  sep_imageormask
  grestore
  }ifelse
 }def
/cachemask_level2
{
3 dict begin
/LZWEncode filter/WriteFilter xdf
/readBuffer 256 string def
/ReadFilter
currentfile
0(%EndMask)/SubFileDecode filter
/ASCII85Decode filter
/RunLengthDecode filter
def
{
ReadFilter readBuffer readstring exch
WriteFilter exch writestring
not{exit}if
}loop
WriteFilter closefile
end
}def
/spot_alias
{
/mapto_sep_imageormask
{
dup type/dicttype ne{
12 dict begin
/ImageType 1 def
/DataSource xdf
/ImageMatrix xdf
/BitsPerComponent xdf
/Height xdf
/Width xdf
/MultipleDataSources false def
}{
begin
}ifelse
/Decode[/customcolor_tint AGMCORE_gget 0]def
/Operator/image def
/SkipImageProc{false}def
currentdict
end
sep_imageormask
}bdf
/customcolorimage
{
Adobe_AGM_Image/AGMIMG_colorAry xddf
/customcolor_tint AGMCORE_gget
<<
/Name AGMIMG_colorAry 4 get
/CSA[/DeviceCMYK]
/TintMethod/Subtractive
/TintProc null
/MappedCSA null
/NComponents 4
/Components[AGMIMG_colorAry aload pop pop]
>>
setsepcolorspace
mapto_sep_imageormask
}ndf
Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
/customcolorimage
{
Adobe_AGM_Image/AGMIMG_override false put
current_spot_alias{dup 4 get map_alias}{false}ifelse
{
false set_spot_alias
/customcolor_tint AGMCORE_gget exch setsepcolorspace
pop
mapto_sep_imageormask
true set_spot_alias
}{
//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
}ifelse
}bdf
}def
/snap_to_device
{
6 dict begin
matrix currentmatrix
dup 0 get 0 eq 1 index 3 get 0 eq and
1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
{
1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
0 0 transform
AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
1 1 transform
AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
itransform/AGMIMG_urY exch def/AGMIMG_urX exch def
[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
}{
}ifelse
end
}def
level2 not{
/colorbuf
{
0 1 2 index length 1 sub{
dup 2 index exch get
255 exch sub
2 index
3 1 roll
put
}for
}def
/tint_image_to_color
{
begin
Width Height BitsPerComponent ImageMatrix
/DataSource load
end
Adobe_AGM_Image begin
/AGMIMG_mbuf 0 string def
/AGMIMG_ybuf 0 string def
/AGMIMG_kbuf 0 string def
{
colorbuf dup length AGMIMG_mbuf length ne
{
dup length dup dup
/AGMIMG_mbuf exch string def
/AGMIMG_ybuf exch string def
/AGMIMG_kbuf exch string def
}if
dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
}
addprocs
{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage
end
}def
/sep_imageormask_lev1
{
begin
MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
{
255 mul round cvi GrayLookup exch get
}currenttransfer addprocs settransfer
currentdict imageormask
}{
/sep_colorspace_dict AGMCORE_gget/Components known{
MappedCSA 0 get/DeviceCMYK eq{
Components aload pop
}{
0 0 0 Components aload pop 1 exch sub
}ifelse
Adobe_AGM_Image/AGMIMG_k xddf
Adobe_AGM_Image/AGMIMG_y xddf
Adobe_AGM_Image/AGMIMG_m xddf
Adobe_AGM_Image/AGMIMG_c xddf
AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
currentdict imageormask
}{
currentcolortransfer
{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
setcolortransfer
currentdict tint_image_to_color
}ifelse
}{
MappedCSA 0 get/DeviceGray eq{
{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
currentdict imageormask
}{
MappedCSA 0 get/DeviceCMYK eq{
currentcolortransfer
{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
setcolortransfer
currentdict tint_image_to_color
}{
currentcolortransfer
{pop 1}exch addprocs 4 1 roll
{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
setcolortransfer
currentdict tint_image_to_color
}ifelse
}ifelse
}ifelse
}ifelse
end
}def
/sep_image_lev1_sep
{
begin
/sep_colorspace_dict AGMCORE_gget/Components known{
Components aload pop
Adobe_AGM_Image/AGMIMG_k xddf
Adobe_AGM_Image/AGMIMG_y xddf
Adobe_AGM_Image/AGMIMG_m xddf
Adobe_AGM_Image/AGMIMG_c xddf
{AGMIMG_c mul 1 exch sub}
{AGMIMG_m mul 1 exch sub}
{AGMIMG_y mul 1 exch sub}
{AGMIMG_k mul 1 exch sub}
}{
{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
}ifelse
AGMCORE_get_ink_data currenttransfer addprocs settransfer
currentdict imageormask_sys
end
}def
/indexed_imageormask_lev1
{
/indexed_colorspace_dict AGMCORE_gget begin
begin
currentdict
MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
imageormask
}{
MappedCSA 0 get/DeviceGray eq{
{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
imageormask
}{
MappedCSA 0 get/DeviceCMYK eq{
currentcolortransfer
{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
{4 mul HiVal mul round cvi  Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
setcolortransfer
tint_image_to_color
}{
currentcolortransfer
{pop 1}exch addprocs 4 1 roll
{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
{3 mul HiVal mul round cvi  Lookup exch get HiVal div}exch addprocs 4 1 roll
setcolortransfer
tint_image_to_color
}ifelse
}ifelse
}ifelse
end end
}def
/indexed_image_lev1_sep
{
/indexed_colorspace_dict AGMCORE_gget begin
begin
{4 mul HiVal mul round cvi  Lookup exch get HiVal div 1 exch sub}
{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
AGMCORE_get_ink_data currenttransfer addprocs settransfer
currentdict imageormask_sys
end end
}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1058 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2013-10-24T12:22:28-04:00"
   xmp:CreateDate="2013-10-24T12:22:13-04:00"
   xmp:MetadataDate="2013-10-24T12:22:28-04:00"
   xmp:CreatorTool="CorelDRAW X5"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:757efe79-030d-46e2-ac48-600a756c4242"
   xmpMM:InstanceID="uuid:b61015a5-16e8-40d3-afaf-42af0f08e3c7"
   pdf:Producer="Corel PDF Engine Version 15.0.0.486">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">UCI.cdr</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Jesus</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
















<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0
[/DeviceRGB] /CSA add_res
/0
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 203
/Lookup <~
z!,2E5D#cpj!,6-IFNjfelN.+h"CkRA!WjupAiMb04?,;c/ojt'Yuk#;=n)K%=n-),@qNu/Bk_9qBl%K
tEbT67Bl&H:FGO[[LiL[_Eb5GteZXQmY_\*kLku(es8RuW!33'!Y?4f.YHP.5s0)J&Ys9qO\@8uX\@Sq
1c$%Xcc0*R$kgRlAe//\Fcfim)l.")DeBmI1Y?9?%l.+2Ge^<[5dco?2lIXMMf@0';eEbc:lIaVPf[]<
@ea(o>le0kUg=GTDf'M,Bm+^.YgXtlIf^7JHm+g7\gtD)Ng$RVLmG6LahV.DSg[<tRmbcdfhq[YWh!a1
Vn)3$ji8*n]h='=YnDW6miSO(_hsfX^nD`?pins:ci:5jbnDiErj5BFei:5jdn`8[!jPf[jipl-in`Ad
$jl>poj7;?no&f$)kN)3sjR_QroB><-kiVL#k4Ip#o]bQ2l0.d(klBu4l0@I(lKIm*kk46*o]k]6lfe$
-l1F<+p$:o9ljep>lLjN/p?_,<m-FB4lh0Z2p?h5?md0Z8m.]r8p?q>Bn*Tl<me?2<q!d_GnF$)@n+Z>
?q!deJnGiRZn+ZA@q!mkKnaQAEnbD[I!:oXSo'uMGnbMbHq=F1QoCMeMoD/%MqXjFUo^r"Qo_J1PqXsO
Xp@\:Up&"IVqY'X[p\+IXpA=UYqtTp_q"Xa]q#'s_qt^$bq>'sbq>C*brVHBgqYL0fqY^6erVQKjr;6H
jr;HTlrVcZnrVc]nrVlfqrr2rus/N+!rrE*!WrN,!~>
>>
/CSD add_res
/1
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 150
/Lookup <~
>"09690-KY(T2".W+\8lBfW>01sa6Wcc^+NbA5JJDUHXDd`Q@RbA5PMCXUIDe&uRVb\YbPD:?aGeBE*k
eU-*&IGW7uhp$]/c@=`uJDf%2le.Kfhi[9TPO-h`m+.Bef95LPPO-qcm+R`kgQV$RQL31bmF7?ees,RQ
Q0m4gmFd`lc'@_HQ1!1ema[Wkf9PdVPj[4hmb*lnkE,,pPOHMYn&q'de<B@NPjd.hn(*cmk`>2rORU2V
nA^jbba7hCR./[ln]7-gd[0LPRI\=co>[<ladVhe`UiGNoBi%=mG[[)i:Q?)o^/1@m[j*mSb;9;p$/(?
m$m\8SG)-9p?J4Bl^[\9SG)?@p?nLFn"07ATD%cEp@+XHnB(CoP5!t,pZJ.Bn"0:BTD.frp[H8uo&]Z&
T(q-6q!4RIl_+%?SbVWFq!ZE$nW3J:jS8B.q"3bFgn4E!T)%9:q;S+Dj.Q50T_[fBq<OXJm@X4CT_\3D
q=EnIoBZ5El2'50qVIqBi1Tr,T_d`BqWORJlCn(BT_e9FqXikFp$MYET`!]Ar8FCJihQG3UAa#ErSjUN
j.cSRrr~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -98.4436 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 98.4436 li
278.05 98.4436 li
278.05 0 li
cp
clp
gsave
-.442047 98.9109 mo
278.558 98.9109 li
278.558 -.0889323 li
-.442047 -.0889323 li
-.442047 98.9109 li
clp
-234.621 -402.485 mo
-20.9643 -402.485 li
-20.9643 -382.137 li
-234.621 -382.137 li
cp
false sop
.92 .93 .93 rgb
ef
-15.229 -388.7 mo
-11.7611 -388.7 li
-11.7611 -389.396 li
-14.4852 -389.396 li
-14.4852 -397.076 li
-15.229 -397.076 li
cp
-6.98499 -392.876 mo
-6.98499 -393.32 -6.98499 -394.904 -8.8689 -394.904 cv
-9.54099 -394.904 -9.97299 -394.676 -10.549 -394.364 cv
-10.441 -393.62 li
-10.369 -393.68 -9.72098 -394.256 -8.90488 -394.256 cv
-7.633 -394.256 -7.633 -393.152 -7.633 -392.384 cv
-8.07687 -392.384 li
-8.95309 -392.384 -11.0289 -392.348 -11.0289 -390.392 cv
-11.0289 -389.396 -10.2729 -388.614 -9.32498 -388.614 cv
-8.53299 -388.614 -8.02899 -388.904 -7.60889 -389.576 cv
-7.58508 -389.576 li
-7.5369 -388.698 li
-6.91299 -388.698 li
-6.94897 -389.156 -6.98499 -389.612 -6.98499 -390.068 cv
cp
-7.633 -391.064 mo
-7.633 -389.396 -8.83289 -389.264 -9.15689 -389.264 cv
-9.901 -389.264 -10.2851 -389.876 -10.2851 -390.392 cv
-10.2851 -391.784 -9.073 -391.784 -7.633 -391.784 cv
cp
-2.35287 -388.698 mo
-1.6091 -388.698 li
-1.6091 -397.076 li
-2.35287 -397.076 li
cp
4.13901 -397.7 mo
3.44312 -397.7 li
3.44312 -394.028 li
3.41901 -394.028 li
3.1069 -394.592 2.65112 -394.904 1.871 -394.904 cv
.3349 -394.904 -.156891 -393.152 -.156891 -391.988 cv
-.156891 -391.136 -.0848999 -388.614 1.90701 -388.614 cv
2.67493 -388.614 3.05902 -388.964 3.51511 -389.54 cv
3.53891 -389.54 li
3.53891 -388.698 li
4.18692 -388.698 li
4.16312 -389.228 4.13901 -389.768 4.13901 -390.728 cv
cp
.586914 -391.76 mo
.586914 -393.176 .946899 -394.256 1.99091 -394.256 cv
3.49103 -394.256 3.49103 -392.504 3.49103 -391.688 cv
3.49103 -390.44 3.16702 -389.264 1.979 -389.264 cv
.586914 -389.264 .586914 -391.256 .586914 -391.76 cv
cp
9.52682 -391.532 mo
9.52682 -393.02 9.3468 -394.904 7.57092 -394.904 cv
6.53882 -394.904 5.39902 -394.064 5.39902 -391.76 cv
5.39902 -391.148 5.39902 -388.614 7.79883 -388.614 cv
8.53101 -388.614 8.9389 -388.808 9.22693 -388.964 cv
9.19092 -389.768 li
8.8428 -389.456 8.26682 -389.264 7.87082 -389.264 cv
7.595 -389.264 6.14282 -389.264 6.14282 -391.532 cv
cp
6.14282 -392.18 mo
6.14282 -392.972 6.58701 -394.256 7.53491 -394.256 cv
8.099 -394.256 8.78302 -393.8 8.78302 -392.18 cv
cp
10.835 -388.698 mo
11.5309 -388.698 li
11.5309 -392.504 li
11.5309 -393.452 12.0709 -394.256 12.923 -394.256 cv
14.0628 -394.256 14.0628 -393.248 14.0628 -392.828 cv
14.0628 -388.698 li
14.759 -388.698 li
14.759 -392.804 li
14.759 -393.212 14.759 -394.904 13.067 -394.904 cv
12.0468 -394.904 11.6508 -394.184 11.5068 -393.92 cv
11.483 -393.92 li
11.4708 -394.364 11.4589 -394.544 11.4348 -394.82 cv
10.7868 -394.82 li
10.799 -394.184 10.835 -393.56 10.835 -392.924 cv
cp
16.7027 -396.044 mo
16.7027 -394.82 li
15.7908 -394.82 li
15.7908 -394.172 li
16.7027 -394.172 li
16.7027 -389.996 li
16.7027 -389.312 16.9428 -388.614 17.8428 -388.614 cv
18.1668 -388.614 18.4789 -388.638 18.6467 -388.7 cv
18.6467 -389.396 li
18.5149 -389.336 18.3947 -389.264 18.0707 -389.264 cv
17.4828 -389.264 17.3989 -389.696 17.3989 -390.188 cv
17.3989 -394.172 li
18.6467 -394.172 li
18.6467 -394.82 li
17.3989 -394.82 li
17.3989 -396.26 li
cp
19.7868 -388.698 mo
20.483 -388.698 li
20.483 -394.82 li
19.7868 -394.82 li
cp
19.7148 -396.176 mo
20.555 -396.176 li
20.555 -397.255 li
19.7148 -397.255 li
cp
26.1469 -397.7 mo
25.451 -397.7 li
25.451 -394.028 li
25.4269 -394.028 li
25.1148 -394.592 24.659 -394.904 23.8789 -394.904 cv
22.3428 -394.904 21.851 -393.152 21.851 -391.988 cv
21.851 -391.136 21.923 -388.614 23.9149 -388.614 cv
24.6828 -388.614 25.0669 -388.964 25.523 -389.54 cv
25.5468 -389.54 li
25.5468 -388.698 li
26.1948 -388.698 li
26.171 -389.228 26.1469 -389.768 26.1469 -390.728 cv
cp
22.5948 -391.76 mo
22.5948 -393.176 22.9548 -394.256 23.9988 -394.256 cv
25.4989 -394.256 25.4989 -392.504 25.4989 -391.688 cv
25.4989 -390.44 25.1749 -389.264 23.9869 -389.264 cv
22.5948 -389.264 22.5948 -391.256 22.5948 -391.76 cv
cp
31.4508 -392.876 mo
31.4508 -393.32 31.4508 -394.904 29.5669 -394.904 cv
28.8948 -394.904 28.4628 -394.676 27.8868 -394.364 cv
27.9948 -393.62 li
28.0668 -393.68 28.7148 -394.256 29.5309 -394.256 cv
30.8028 -394.256 30.8028 -393.152 30.8028 -392.384 cv
30.3589 -392.384 li
29.4827 -392.384 27.4069 -392.348 27.4069 -390.392 cv
27.4069 -389.396 28.1629 -388.614 29.1108 -388.614 cv
29.9028 -388.614 30.4068 -388.904 30.8269 -389.576 cv
30.8507 -389.576 li
30.8989 -388.698 li
31.5228 -388.698 li
31.4868 -389.156 31.4508 -389.612 31.4508 -390.068 cv
cp
30.8028 -391.064 mo
30.8028 -389.396 29.6029 -389.264 29.2789 -389.264 cv
28.5348 -389.264 28.1507 -389.876 28.1507 -390.392 cv
28.1507 -391.784 29.3628 -391.784 30.8028 -391.784 cv
cp
37.0308 -397.7 mo
36.3349 -397.7 li
36.3349 -394.028 li
36.3108 -394.028 li
35.9987 -394.592 35.5429 -394.904 34.7628 -394.904 cv
33.2267 -394.904 32.7349 -393.152 32.7349 -391.988 cv
32.7349 -391.136 32.8069 -388.614 34.7988 -388.614 cv
35.5667 -388.614 35.9508 -388.964 36.4069 -389.54 cv
36.4307 -389.54 li
36.4307 -388.698 li
37.0787 -388.698 li
37.0549 -389.228 37.0308 -389.768 37.0308 -390.728 cv
cp
33.4787 -391.76 mo
33.4787 -393.176 33.8387 -394.256 34.8827 -394.256 cv
36.3828 -394.256 36.3828 -392.504 36.3828 -391.688 cv
36.3828 -390.44 36.0588 -389.264 34.8708 -389.264 cv
33.4787 -389.264 33.4787 -391.256 33.4787 -391.76 cv
cp
42.5986 -388.698 mo
43.4388 -388.698 li
45.2266 -394.82 li
44.5307 -394.82 li
43.0306 -389.492 li
43.0068 -389.492 li
41.5546 -394.82 li
40.8108 -394.82 li
cp
46.2346 -388.698 mo
46.9308 -388.698 li
46.9308 -394.82 li
46.2346 -394.82 li
cp
46.1626 -396.176 mo
47.0028 -396.176 li
47.0028 -397.255 li
46.1626 -397.255 li
cp
51.2508 -394.724 mo
51.0226 -394.796 50.5308 -394.904 50.1226 -394.904 cv
49.3068 -394.904 48.3226 -394.364 48.3226 -393.212 cv
48.3226 -392.348 48.7308 -392.024 49.7626 -391.508 cv
50.4826 -391.148 50.8548 -390.908 50.8548 -390.32 cv
50.8548 -389.768 50.3868 -389.264 49.7266 -389.264 cv
49.1628 -389.264 48.5386 -389.54 48.3348 -389.684 cv
48.2387 -388.904 li
48.5987 -388.772 49.0307 -388.614 49.7867 -388.614 cv
50.8188 -388.614 51.5986 -389.288 51.5986 -390.392 cv
51.5986 -391.376 50.9506 -391.688 50.1107 -392.144 cv
49.2827 -392.6 49.0667 -392.72 49.0667 -393.284 cv
49.0667 -393.716 49.3907 -394.256 50.1107 -394.256 cv
50.5067 -394.256 50.8066 -394.136 51.1547 -394.004 cv
cp
56.7707 -394.82 mo
56.0745 -394.82 li
56.0745 -391.016 li
56.0745 -390.068 55.5345 -389.264 54.6827 -389.264 cv
53.5426 -389.264 53.5426 -390.272 53.5426 -390.692 cv
53.5426 -394.82 li
52.8467 -394.82 li
52.8467 -390.548 li
52.8467 -389.576 53.2067 -388.614 54.5387 -388.614 cv
55.5586 -388.614 56.0266 -389.336 56.0986 -389.6 cv
56.1227 -389.6 li
56.1346 -389.156 56.1465 -388.976 56.1706 -388.698 cv
56.8186 -388.698 li
56.8067 -389.336 56.7707 -389.96 56.7707 -390.596 cv
cp
62.1225 -392.876 mo
62.1225 -393.32 62.1225 -394.904 60.2386 -394.904 cv
59.5665 -394.904 59.1345 -394.676 58.5585 -394.364 cv
58.6665 -393.62 li
58.7385 -393.68 59.3865 -394.256 60.2026 -394.256 cv
61.4745 -394.256 61.4745 -393.152 61.4745 -392.384 cv
61.0306 -392.384 li
60.1544 -392.384 58.0786 -392.348 58.0786 -390.392 cv
58.0786 -389.396 58.8346 -388.614 59.7825 -388.614 cv
60.5745 -388.614 61.0785 -388.904 61.4986 -389.576 cv
61.5224 -389.576 li
61.5706 -388.698 li
62.1945 -388.698 li
62.1585 -389.156 62.1225 -389.612 62.1225 -390.068 cv
cp
61.4745 -391.064 mo
61.4745 -389.396 60.2746 -389.264 59.9506 -389.264 cv
59.2065 -389.264 58.8224 -389.876 58.8224 -390.392 cv
58.8224 -391.784 60.0345 -391.784 61.4745 -391.784 cv
cp
63.7904 -388.698 mo
64.4866 -388.698 li
64.4866 -397.7 li
63.7904 -397.7 li
cp
69.2026 -388.698 mo
69.9464 -388.698 li
69.9464 -397.076 li
69.2026 -397.076 li
cp
71.7226 -388.698 mo
72.4185 -388.698 li
72.4185 -392.504 li
72.4185 -393.452 72.9585 -394.256 73.8106 -394.256 cv
74.9504 -394.256 74.9504 -393.248 74.9504 -392.828 cv
74.9504 -388.698 li
75.6466 -388.698 li
75.6466 -392.804 li
75.6466 -393.212 75.6466 -394.904 73.9546 -394.904 cv
72.9344 -394.904 72.5384 -394.184 72.3944 -393.92 cv
72.3706 -393.92 li
72.3584 -394.364 72.3465 -394.544 72.3224 -394.82 cv
71.6744 -394.82 li
71.6866 -394.184 71.7226 -393.56 71.7226 -392.924 cv
cp
79.9065 -394.724 mo
79.6783 -394.796 79.1865 -394.904 78.7783 -394.904 cv
77.9625 -394.904 76.9783 -394.364 76.9783 -393.212 cv
76.9783 -392.348 77.3865 -392.024 78.4183 -391.508 cv
79.1383 -391.148 79.5105 -390.908 79.5105 -390.32 cv
79.5105 -389.768 79.0425 -389.264 78.3823 -389.264 cv
77.8185 -389.264 77.1943 -389.54 76.9905 -389.684 cv
76.8944 -388.904 li
77.2544 -388.772 77.6864 -388.614 78.4424 -388.614 cv
79.4745 -388.614 80.2543 -389.288 80.2543 -390.392 cv
80.2543 -391.376 79.6063 -391.688 78.7664 -392.144 cv
77.9384 -392.6 77.7224 -392.72 77.7224 -393.284 cv
77.7224 -393.716 78.0464 -394.256 78.7664 -394.256 cv
79.1624 -394.256 79.4623 -394.136 79.8104 -394.004 cv
cp
81.8143 -396.044 mo
81.8143 -394.82 li
80.9023 -394.82 li
80.9023 -394.172 li
81.8143 -394.172 li
81.8143 -389.996 li
81.8143 -389.312 82.0543 -388.614 82.9543 -388.614 cv
83.2783 -388.614 83.5904 -388.638 83.7583 -388.7 cv
83.7583 -389.396 li
83.6264 -389.336 83.5063 -389.264 83.1823 -389.264 cv
82.5943 -389.264 82.5104 -389.696 82.5104 -390.188 cv
82.5104 -394.172 li
83.7583 -394.172 li
83.7583 -394.82 li
82.5104 -394.82 li
82.5104 -396.26 li
cp
84.8983 -388.698 mo
85.5945 -388.698 li
85.5945 -394.82 li
84.8983 -394.82 li
cp
84.8263 -396.176 mo
85.6665 -396.176 li
85.6665 -397.255 li
84.8263 -397.255 li
cp
87.5983 -396.044 mo
87.5983 -394.82 li
86.6864 -394.82 li
86.6864 -394.172 li
87.5983 -394.172 li
87.5983 -389.996 li
87.5983 -389.312 87.8384 -388.614 88.7384 -388.614 cv
89.0624 -388.614 89.3745 -388.638 89.5423 -388.7 cv
89.5423 -389.396 li
89.4105 -389.336 89.2903 -389.264 88.9663 -389.264 cv
88.3784 -389.264 88.2945 -389.696 88.2945 -390.188 cv
88.2945 -394.172 li
89.5423 -394.172 li
89.5423 -394.82 li
88.2945 -394.82 li
88.2945 -396.26 li
cp
94.5466 -394.82 mo
93.8504 -394.82 li
93.8504 -391.016 li
93.8504 -390.068 93.3104 -389.264 92.4586 -389.264 cv
91.3185 -389.264 91.3185 -390.272 91.3185 -390.692 cv
91.3185 -394.82 li
90.6226 -394.82 li
90.6226 -390.548 li
90.6226 -389.576 90.9826 -388.614 92.3146 -388.614 cv
93.3345 -388.614 93.8025 -389.336 93.8745 -389.6 cv
93.8986 -389.6 li
93.9105 -389.156 93.9224 -388.976 93.9465 -388.698 cv
94.5945 -388.698 li
94.5826 -389.336 94.5466 -389.96 94.5466 -390.596 cv
cp
99.5265 -394.688 mo
99.2385 -394.808 98.8785 -394.904 98.3864 -394.904 cv
96.6825 -394.904 95.8545 -393.608 95.8545 -391.736 cv
95.8545 -389.624 97.0904 -388.614 98.3983 -388.614 cv
98.8303 -388.614 99.2864 -388.712 99.5863 -388.844 cv
99.5265 -389.636 li
99.3224 -389.396 98.7705 -389.312 98.4944 -389.312 cv
97.8345 -389.312 96.5983 -389.696 96.5983 -391.94 cv
96.5983 -393.56 97.4504 -394.208 98.3864 -394.208 cv
98.7464 -394.208 99.2144 -394.124 99.4905 -393.896 cv
cp
100.678 -388.698 mo
101.374 -388.698 li
101.374 -394.82 li
100.678 -394.82 li
cp
100.606 -396.176 mo
101.446 -396.176 li
101.446 -397.255 li
100.606 -397.255 li
cp
105.034 -389.264 mo
103.486 -389.264 103.486 -391.268 103.486 -391.76 cv
103.486 -392.252 103.486 -394.256 105.034 -394.256 cv
106.582 -394.256 106.582 -392.252 106.582 -391.76 cv
106.582 -391.268 106.582 -389.264 105.034 -389.264 cv
cp
105.034 -388.614 mo
106.822 -388.614 107.326 -390.224 107.326 -391.76 cv
107.326 -393.296 106.822 -394.904 105.034 -394.904 cv
103.246 -394.904 102.742 -393.296 102.742 -391.76 cv
102.742 -390.224 103.246 -388.614 105.034 -388.614 cv
cp
108.635 -388.698 mo
109.33 -388.698 li
109.33 -392.504 li
109.33 -393.452 109.87 -394.256 110.723 -394.256 cv
111.862 -394.256 111.862 -393.248 111.862 -392.828 cv
111.862 -388.698 li
112.559 -388.698 li
112.559 -392.804 li
112.559 -393.212 112.559 -394.904 110.867 -394.904 cv
109.846 -394.904 109.45 -394.184 109.306 -393.92 cv
109.283 -393.92 li
109.27 -394.364 109.258 -394.544 109.234 -394.82 cv
108.586 -394.82 li
108.599 -394.184 108.635 -393.56 108.635 -392.924 cv
cp
117.91 -392.876 mo
117.91 -393.32 117.91 -394.904 116.026 -394.904 cv
115.354 -394.904 114.922 -394.676 114.346 -394.364 cv
114.454 -393.62 li
114.526 -393.68 115.174 -394.256 115.99 -394.256 cv
117.262 -394.256 117.262 -393.152 117.262 -392.384 cv
116.818 -392.384 li
115.942 -392.384 113.866 -392.348 113.866 -390.392 cv
113.866 -389.396 114.622 -388.614 115.57 -388.614 cv
116.362 -388.614 116.866 -388.904 117.286 -389.576 cv
117.31 -389.576 li
117.358 -388.698 li
117.982 -388.698 li
117.946 -389.156 117.91 -389.612 117.91 -390.068 cv
cp
117.262 -391.064 mo
117.262 -389.396 116.062 -389.264 115.738 -389.264 cv
114.994 -389.264 114.61 -389.876 114.61 -390.392 cv
114.61 -391.784 115.822 -391.784 117.262 -391.784 cv
cp
119.578 -388.698 mo
120.274 -388.698 li
120.274 -397.7 li
119.578 -397.7 li
cp
125.062 -385.698 mo
125.662 -385.698 li
125.662 -397.7 li
125.062 -397.7 li
cp
132.106 -391.892 mo
133.258 -395.804 li
133.282 -395.804 li
134.338 -391.892 li
cp
135.25 -388.698 mo
136.834 -388.698 li
134.134 -397.076 li
132.454 -397.076 li
129.646 -388.698 li
131.182 -388.698 li
131.782 -390.716 li
134.662 -390.716 li
cp
137.626 -388.698 mo
139.114 -388.698 li
139.114 -392.084 li
139.114 -393.236 139.786 -393.608 140.398 -393.608 cv
140.554 -393.608 140.686 -393.584 140.818 -393.548 cv
140.818 -394.94 li
140.734 -394.952 140.662 -394.976 140.566 -394.976 cv
139.642 -394.976 139.174 -394.232 138.994 -393.752 cv
138.97 -393.752 li
138.97 -394.124 138.934 -394.508 138.922 -394.88 cv
137.578 -394.88 li
137.614 -394.604 137.626 -394.244 137.626 -393.86 cv
cp
142.354 -394.88 mo
141.37 -394.88 li
141.37 -393.788 li
142.354 -393.788 li
142.354 -390.404 li
142.354 -389.108 142.978 -388.602 144.082 -388.602 cv
144.526 -388.602 144.85 -388.698 145.078 -388.808 cv
145.078 -389.864 li
144.97 -389.804 144.778 -389.732 144.514 -389.732 cv
144.082 -389.732 143.842 -389.924 143.842 -390.584 cv
143.842 -393.788 li
145.078 -393.788 li
145.078 -394.88 li
143.842 -394.88 li
143.842 -396.608 li
142.354 -396.152 li
cp
146.17 -388.698 mo
147.658 -388.698 li
147.658 -394.88 li
146.17 -394.88 li
cp
146.146 -396.044 mo
147.682 -396.044 li
147.682 -397.508 li
146.146 -397.508 li
cp
153.262 -390.032 mo
153.058 -389.9 152.566 -389.732 152.206 -389.732 cv
151.066 -389.732 150.514 -390.62 150.514 -391.772 cv
150.514 -393.092 151.006 -393.848 152.134 -393.848 cv
152.542 -393.848 152.914 -393.68 153.178 -393.548 cv
153.262 -394.724 li
152.986 -394.832 152.434 -394.976 151.966 -394.976 cv
149.89 -394.976 148.978 -393.548 148.978 -391.784 cv
148.978 -390.032 149.842 -388.602 151.882 -388.602 cv
152.482 -388.602 152.998 -388.724 153.346 -388.856 cv
cp
159.142 -394.88 mo
157.654 -394.88 li
157.654 -391.34 li
157.654 -390.548 157.426 -389.828 156.634 -389.828 cv
156.01 -389.828 155.746 -390.224 155.746 -391.172 cv
155.746 -394.88 li
154.258 -394.88 li
154.258 -390.896 li
154.258 -389.648 154.678 -388.602 156.082 -388.602 cv
157.054 -388.602 157.438 -389.192 157.726 -389.648 cv
157.714 -389.66 li
157.75 -389.648 li
157.75 -389.336 157.786 -389.012 157.798 -388.7 cv
159.19 -388.7 li
159.154 -388.976 159.142 -389.336 159.142 -389.72 cv
cp
160.63 -388.698 mo
162.118 -388.698 li
162.118 -397.7 li
160.63 -397.7 li
cp
163.99 -393.32 mo
164.278 -393.56 164.938 -393.92 165.682 -393.92 cv
166.534 -393.92 166.834 -393.356 166.834 -392.744 cv
166.834 -392.516 li
166.534 -392.516 li
164.65 -392.516 163.282 -392.096 163.282 -390.416 cv
163.282 -389.264 164.17 -388.602 165.13 -388.602 cv
166.018 -388.602 166.486 -389.036 166.858 -389.54 cv
166.882 -389.54 li
166.882 -389.24 166.894 -388.94 166.966 -388.698 cv
168.31 -388.698 li
168.274 -388.94 168.226 -389.348 168.226 -389.792 cv
168.226 -392.492 li
168.226 -394.04 167.782 -394.976 165.862 -394.976 cv
164.914 -394.976 164.326 -394.712 163.906 -394.52 cv
cp
166.834 -391.376 mo
166.834 -390.272 166.51 -389.612 165.622 -389.612 cv
165.046 -389.612 164.674 -389.996 164.674 -390.56 cv
164.674 -391.46 165.43 -391.724 166.702 -391.724 cv
166.834 -391.724 li
cp
173.722 -390.032 mo
173.518 -389.9 173.026 -389.732 172.666 -389.732 cv
171.526 -389.732 170.974 -390.62 170.974 -391.772 cv
170.974 -393.092 171.466 -393.848 172.594 -393.848 cv
173.002 -393.848 173.374 -393.68 173.638 -393.548 cv
173.722 -394.724 li
173.446 -394.832 172.894 -394.976 172.426 -394.976 cv
170.35 -394.976 169.438 -393.548 169.438 -391.784 cv
169.438 -390.032 170.302 -388.602 172.342 -388.602 cv
172.942 -388.602 173.458 -388.724 173.806 -388.856 cv
cp
174.862 -388.698 mo
176.35 -388.698 li
176.35 -394.88 li
174.862 -394.88 li
cp
174.838 -396.044 mo
176.374 -396.044 li
176.374 -397.508 li
174.838 -397.508 li
cp
179.686 -395.564 mo
180.622 -395.564 li
181.846 -397.292 li
180.454 -397.292 li
cp
179.206 -391.796 mo
179.206 -392.828 179.434 -393.92 180.394 -393.92 cv
181.354 -393.92 181.57 -392.828 181.57 -391.796 cv
181.57 -390.764 181.354 -389.66 180.394 -389.66 cv
179.434 -389.66 179.206 -390.764 179.206 -391.796 cv
cp
177.67 -391.796 mo
177.67 -389.204 179.134 -388.602 180.394 -388.602 cv
181.654 -388.602 183.106 -389.204 183.106 -391.796 cv
183.106 -394.316 181.654 -394.976 180.394 -394.976 cv
179.134 -394.976 177.67 -394.316 177.67 -391.796 cv
cp
184.282 -388.698 mo
185.77 -388.698 li
185.77 -392.3 li
185.77 -393.092 186.046 -393.752 186.826 -393.752 cv
187.438 -393.752 187.678 -393.356 187.678 -392.408 cv
187.678 -388.698 li
189.166 -388.698 li
189.166 -392.684 li
189.166 -393.932 188.746 -394.976 187.342 -394.976 cv
186.334 -394.976 185.914 -394.304 185.698 -393.932 cv
185.71 -393.932 li
185.674 -393.932 li
185.674 -394.244 185.638 -394.568 185.626 -394.88 cv
184.234 -394.88 li
184.27 -394.604 184.282 -394.244 184.282 -393.86 cv
cp
197.218 -397.7 mo
197.218 -393.992 li
197.194 -393.992 li
196.978 -394.472 196.486 -394.976 195.598 -394.976 cv
194.266 -394.976 193.462 -393.8 193.462 -391.784 cv
193.462 -390.068 194.099 -388.602 195.634 -388.602 cv
196.594 -388.602 197.038 -389.132 197.278 -389.66 cv
197.314 -389.66 li
197.314 -389.24 197.339 -388.88 197.362 -388.698 cv
198.754 -388.698 li
198.718 -388.928 198.707 -389.312 198.707 -389.756 cv
198.707 -397.7 li
cp
194.95 -391.844 mo
194.95 -393.08 195.238 -393.884 196.066 -393.884 cv
196.882 -393.884 197.218 -393.008 197.218 -391.808 cv
197.218 -390.644 196.918 -389.696 196.043 -389.696 cv
195.178 -389.696 194.95 -390.416 194.95 -391.844 cv
cp
204.539 -390.176 mo
204.262 -389.972 203.83 -389.696 202.918 -389.696 cv
201.767 -389.696 201.346 -390.332 201.346 -391.388 cv
204.922 -391.388 li
204.922 -391.676 li
204.922 -394.196 203.783 -394.976 202.451 -394.976 cv
200.878 -394.976 199.906 -393.548 199.906 -391.7 cv
199.906 -390.032 200.77 -388.602 202.762 -388.602 cv
203.65 -388.602 204.298 -388.868 204.611 -389 cv
cp
201.346 -392.324 mo
201.346 -393.14 201.67 -393.968 202.451 -393.968 cv
203.122 -393.968 203.482 -393.416 203.482 -392.324 cv
cp
209.339 -388.698 mo
210.827 -388.698 li
210.827 -397.7 li
209.339 -397.7 li
cp
213.683 -391.796 mo
213.683 -392.828 213.911 -393.92 214.871 -393.92 cv
215.831 -393.92 216.047 -392.828 216.047 -391.796 cv
216.047 -390.764 215.831 -389.66 214.871 -389.66 cv
213.911 -389.66 213.683 -390.764 213.683 -391.796 cv
cp
212.147 -391.796 mo
212.147 -389.204 213.611 -388.602 214.871 -388.602 cv
216.131 -388.602 217.583 -389.204 217.583 -391.796 cv
217.583 -394.316 216.131 -394.976 214.871 -394.976 cv
213.611 -394.976 212.147 -394.316 212.147 -391.796 cv
cp
218.519 -388.904 mo
218.831 -388.784 219.467 -388.602 220.235 -388.602 cv
221.579 -388.602 222.539 -389.288 222.539 -390.428 cv
222.539 -391.148 222.155 -391.496 221.387 -391.988 cv
220.655 -392.456 li
220.223 -392.732 219.959 -392.912 219.959 -393.248 cv
219.959 -393.62 220.211 -393.848 220.811 -393.848 cv
221.351 -393.848 221.747 -393.716 222.119 -393.572 cv
222.203 -394.724 li
222.059 -394.772 221.447 -394.976 220.655 -394.976 cv
219.347 -394.976 218.519 -394.076 218.519 -393.224 cv
218.519 -392.252 219.203 -391.856 219.827 -391.484 cv
220.439 -391.124 li
220.979 -390.812 221.099 -390.584 221.099 -390.344 cv
221.099 -389.864 220.679 -389.732 220.139 -389.732 cv
219.443 -389.732 218.831 -390.044 218.591 -390.14 cv
cp
231.227 -390.176 mo
230.951 -389.972 230.519 -389.696 229.607 -389.696 cv
228.455 -389.696 228.035 -390.332 228.035 -391.388 cv
231.611 -391.388 li
231.611 -391.676 li
231.611 -394.196 230.471 -394.976 229.139 -394.976 cv
227.567 -394.976 226.595 -393.548 226.595 -391.7 cv
226.595 -390.032 227.459 -388.602 229.451 -388.602 cv
230.339 -388.602 230.987 -388.868 231.299 -389 cv
cp
228.035 -392.324 mo
228.035 -393.14 228.359 -393.968 229.139 -393.968 cv
229.811 -393.968 230.171 -393.416 230.171 -392.324 cv
cp
232.907 -388.698 mo
234.395 -388.698 li
234.395 -397.7 li
232.907 -397.7 li
cp
240.347 -390.176 mo
240.071 -389.972 239.639 -389.696 238.727 -389.696 cv
237.575 -389.696 237.155 -390.332 237.155 -391.388 cv
240.731 -391.388 li
240.731 -391.676 li
240.731 -394.196 239.591 -394.976 238.259 -394.976 cv
236.687 -394.976 235.715 -393.548 235.715 -391.7 cv
235.715 -390.032 236.579 -388.602 238.571 -388.602 cv
239.459 -388.602 240.107 -388.868 240.419 -389 cv
cp
237.155 -392.324 mo
237.155 -393.14 237.479 -393.968 238.259 -393.968 cv
238.931 -393.968 239.291 -393.416 239.291 -392.324 cv
cp
241.847 -388.698 mo
243.335 -388.698 li
243.335 -392.444 li
243.335 -393.128 243.683 -393.752 244.343 -393.752 cv
244.895 -393.752 245.135 -393.368 245.135 -392.6 cv
245.135 -388.698 li
246.623 -388.698 li
246.623 -392.444 li
246.623 -393.128 246.971 -393.752 247.631 -393.752 cv
248.183 -393.752 248.423 -393.368 248.423 -392.6 cv
248.423 -388.698 li
249.911 -388.698 li
249.911 -392.516 li
249.911 -394.016 249.479 -394.976 248.135 -394.976 cv
247.223 -394.976 246.779 -394.424 246.479 -393.992 cv
246.299 -394.328 245.963 -394.976 244.919 -394.976 cv
244.067 -394.976 243.587 -394.388 243.359 -393.908 cv
243.335 -393.908 li
243.335 -394.232 243.299 -394.556 243.287 -394.88 cv
241.799 -394.88 li
241.823 -394.652 241.847 -394.316 241.847 -393.872 cv
cp
255.683 -390.176 mo
255.407 -389.972 254.975 -389.696 254.063 -389.696 cv
252.911 -389.696 252.491 -390.332 252.491 -391.388 cv
256.067 -391.388 li
256.067 -391.676 li
256.067 -394.196 254.927 -394.976 253.595 -394.976 cv
252.023 -394.976 251.051 -393.548 251.051 -391.7 cv
251.051 -390.032 251.915 -388.602 253.907 -388.602 cv
254.795 -388.602 255.443 -388.868 255.755 -389 cv
cp
252.491 -392.324 mo
252.491 -393.14 252.815 -393.968 253.595 -393.968 cv
254.267 -393.968 254.627 -393.416 254.627 -392.324 cv
cp
257.219 -388.698 mo
258.707 -388.698 li
258.707 -392.3 li
258.707 -393.092 258.983 -393.752 259.763 -393.752 cv
260.375 -393.752 260.615 -393.356 260.615 -392.408 cv
260.615 -388.698 li
262.103 -388.698 li
262.103 -392.684 li
262.103 -393.932 261.683 -394.976 260.279 -394.976 cv
259.271 -394.976 258.851 -394.304 258.635 -393.932 cv
258.647 -393.932 li
258.611 -393.932 li
258.611 -394.244 258.575 -394.568 258.563 -394.88 cv
257.171 -394.88 li
257.207 -394.604 257.219 -394.244 257.219 -393.86 cv
cp
263.999 -394.88 mo
263.015 -394.88 li
263.015 -393.788 li
263.999 -393.788 li
263.999 -390.404 li
263.999 -389.108 264.623 -388.602 265.727 -388.602 cv
266.171 -388.602 266.495 -388.698 266.723 -388.808 cv
266.723 -389.864 li
266.615 -389.804 266.423 -389.732 266.159 -389.732 cv
265.727 -389.732 265.487 -389.924 265.487 -390.584 cv
265.487 -393.788 li
266.723 -393.788 li
266.723 -394.88 li
265.487 -394.88 li
265.487 -396.608 li
263.999 -396.152 li
cp
269.039 -391.796 mo
269.039 -392.828 269.267 -393.92 270.227 -393.92 cv
271.187 -393.92 271.403 -392.828 271.403 -391.796 cv
271.403 -390.764 271.187 -389.66 270.227 -389.66 cv
269.267 -389.66 269.039 -390.764 269.039 -391.796 cv
cp
267.503 -391.796 mo
267.503 -389.204 268.967 -388.602 270.227 -388.602 cv
271.487 -388.602 272.939 -389.204 272.939 -391.796 cv
272.939 -394.316 271.487 -394.976 270.227 -394.976 cv
268.967 -394.976 267.503 -394.316 267.503 -391.796 cv
cp
273.875 -388.904 mo
274.187 -388.784 274.823 -388.602 275.591 -388.602 cv
276.935 -388.602 277.895 -389.288 277.895 -390.428 cv
277.895 -391.148 277.511 -391.496 276.743 -391.988 cv
276.011 -392.456 li
275.579 -392.732 275.315 -392.912 275.315 -393.248 cv
275.315 -393.62 275.567 -393.848 276.167 -393.848 cv
276.707 -393.848 277.103 -393.716 277.475 -393.572 cv
277.559 -394.724 li
277.415 -394.772 276.803 -394.976 276.011 -394.976 cv
274.703 -394.976 273.875 -394.076 273.875 -393.224 cv
273.875 -392.252 274.559 -391.856 275.183 -391.484 cv
275.795 -391.124 li
276.335 -390.812 276.455 -390.584 276.455 -390.344 cv
276.455 -389.864 276.035 -389.732 275.495 -389.732 cv
274.799 -389.732 274.187 -390.044 273.947 -390.14 cv
cp
285.707 -397.7 mo
285.707 -393.992 li
285.683 -393.992 li
285.467 -394.472 284.975 -394.976 284.087 -394.976 cv
282.755 -394.976 281.951 -393.8 281.951 -391.784 cv
281.951 -390.068 282.587 -388.602 284.123 -388.602 cv
285.083 -388.602 285.527 -389.132 285.767 -389.66 cv
285.803 -389.66 li
285.803 -389.24 285.827 -388.88 285.851 -388.698 cv
287.243 -388.698 li
287.207 -388.928 287.195 -389.312 287.195 -389.756 cv
287.195 -397.7 li
cp
283.439 -391.844 mo
283.439 -393.08 283.727 -393.884 284.555 -393.884 cv
285.371 -393.884 285.707 -393.008 285.707 -391.808 cv
285.707 -390.644 285.407 -389.696 284.531 -389.696 cv
283.667 -389.696 283.439 -390.416 283.439 -391.844 cv
cp
293.027 -390.176 mo
292.751 -389.972 292.319 -389.696 291.407 -389.696 cv
290.255 -389.696 289.835 -390.332 289.835 -391.388 cv
293.411 -391.388 li
293.411 -391.676 li
293.411 -394.196 292.271 -394.976 290.939 -394.976 cv
289.367 -394.976 288.395 -393.548 288.395 -391.7 cv
288.395 -390.032 289.259 -388.602 291.251 -388.602 cv
292.139 -388.602 292.787 -388.868 293.099 -389 cv
cp
289.835 -392.324 mo
289.835 -393.14 290.159 -393.968 290.939 -393.968 cv
291.611 -393.968 291.971 -393.416 291.971 -392.324 cv
cp
297.828 -388.698 mo
299.316 -388.698 li
299.316 -394.88 li
297.828 -394.88 li
cp
297.803 -396.044 mo
299.34 -396.044 li
299.34 -397.508 li
297.803 -397.508 li
cp
304.392 -397.7 mo
304.392 -393.992 li
304.368 -393.992 li
304.152 -394.472 303.66 -394.976 302.772 -394.976 cv
301.439 -394.976 300.636 -393.8 300.636 -391.784 cv
300.636 -390.068 301.272 -388.602 302.808 -388.602 cv
303.768 -388.602 304.212 -389.132 304.452 -389.66 cv
304.488 -389.66 li
304.488 -389.24 304.512 -388.88 304.535 -388.698 cv
305.928 -388.698 li
305.892 -388.928 305.88 -389.312 305.88 -389.756 cv
305.88 -397.7 li
cp
302.124 -391.844 mo
302.124 -393.08 302.412 -393.884 303.24 -393.884 cv
304.056 -393.884 304.392 -393.008 304.392 -391.808 cv
304.392 -390.644 304.092 -389.696 303.216 -389.696 cv
302.352 -389.696 302.124 -390.416 302.124 -391.844 cv
cp
311.712 -390.176 mo
311.436 -389.972 311.004 -389.696 310.092 -389.696 cv
308.94 -389.696 308.52 -390.332 308.52 -391.388 cv
312.095 -391.388 li
312.095 -391.676 li
312.095 -394.196 310.956 -394.976 309.624 -394.976 cv
308.052 -394.976 307.08 -393.548 307.08 -391.7 cv
307.08 -390.032 307.944 -388.602 309.936 -388.602 cv
310.824 -388.602 311.472 -388.868 311.784 -389 cv
cp
308.52 -392.324 mo
308.52 -393.14 308.844 -393.968 309.624 -393.968 cv
310.296 -393.968 310.655 -393.416 310.655 -392.324 cv
cp
313.248 -388.698 mo
314.736 -388.698 li
314.736 -392.3 li
314.736 -393.092 315.012 -393.752 315.792 -393.752 cv
316.404 -393.752 316.644 -393.356 316.644 -392.408 cv
316.644 -388.698 li
318.132 -388.698 li
318.132 -392.684 li
318.132 -393.932 317.712 -394.976 316.308 -394.976 cv
315.3 -394.976 314.88 -394.304 314.664 -393.932 cv
314.676 -393.932 li
314.64 -393.932 li
314.64 -394.244 314.604 -394.568 314.592 -394.88 cv
313.2 -394.88 li
313.236 -394.604 313.248 -394.244 313.248 -393.86 cv
cp
320.028 -394.88 mo
319.044 -394.88 li
319.044 -393.788 li
320.028 -393.788 li
320.028 -390.404 li
320.028 -389.108 320.652 -388.602 321.756 -388.602 cv
322.2 -388.602 322.524 -388.698 322.752 -388.808 cv
322.752 -389.864 li
322.644 -389.804 322.452 -389.732 322.188 -389.732 cv
321.756 -389.732 321.516 -389.924 321.516 -390.584 cv
321.516 -393.788 li
322.752 -393.788 li
322.752 -394.88 li
321.516 -394.88 li
321.516 -396.608 li
320.028 -396.152 li
cp
323.844 -388.698 mo
325.332 -388.698 li
325.332 -394.88 li
323.844 -394.88 li
cp
323.82 -396.044 mo
325.356 -396.044 li
325.356 -397.508 li
323.82 -397.508 li
cp
327.3 -388.698 mo
328.788 -388.698 li
328.788 -393.788 li
329.916 -393.788 li
329.916 -394.88 li
328.788 -394.88 li
328.788 -395.948 li
328.788 -396.416 329.064 -396.716 329.496 -396.716 cv
329.712 -396.716 329.904 -396.668 330.084 -396.62 cv
330.144 -397.7 li
329.856 -397.759 329.472 -397.844 329.076 -397.844 cv
327.72 -397.844 327.3 -397.028 327.3 -396.14 cv
327.3 -394.88 li
326.268 -394.88 li
326.268 -393.788 li
327.3 -393.788 li
cp
330.96 -388.698 mo
332.448 -388.698 li
332.448 -394.88 li
330.96 -394.88 li
cp
330.936 -396.044 mo
332.472 -396.044 li
332.472 -397.508 li
330.936 -397.508 li
cp
338.052 -390.032 mo
337.848 -389.9 337.356 -389.732 336.996 -389.732 cv
335.856 -389.732 335.304 -390.62 335.304 -391.772 cv
335.304 -393.092 335.796 -393.848 336.924 -393.848 cv
337.332 -393.848 337.704 -393.68 337.968 -393.548 cv
338.052 -394.724 li
337.776 -394.832 337.224 -394.976 336.756 -394.976 cv
334.68 -394.976 333.768 -393.548 333.768 -391.784 cv
333.768 -390.032 334.632 -388.602 336.672 -388.602 cv
337.272 -388.602 337.788 -388.724 338.136 -388.856 cv
cp
339.432 -393.32 mo
339.72 -393.56 340.38 -393.92 341.124 -393.92 cv
341.976 -393.92 342.276 -393.356 342.276 -392.744 cv
342.276 -392.516 li
341.976 -392.516 li
340.092 -392.516 338.724 -392.096 338.724 -390.416 cv
338.724 -389.264 339.612 -388.602 340.572 -388.602 cv
341.46 -388.602 341.928 -389.036 342.3 -389.54 cv
342.324 -389.54 li
342.324 -389.24 342.336 -388.94 342.408 -388.698 cv
343.752 -388.698 li
343.716 -388.94 343.668 -389.348 343.668 -389.792 cv
343.668 -392.492 li
343.668 -394.04 343.224 -394.976 341.304 -394.976 cv
340.356 -394.976 339.768 -394.712 339.348 -394.52 cv
cp
342.276 -391.376 mo
342.276 -390.272 341.952 -389.612 341.064 -389.612 cv
340.488 -389.612 340.116 -389.996 340.116 -390.56 cv
340.116 -391.46 340.872 -391.724 342.144 -391.724 cv
342.276 -391.724 li
cp
349.164 -390.032 mo
348.96 -389.9 348.468 -389.732 348.108 -389.732 cv
346.968 -389.732 346.416 -390.62 346.416 -391.772 cv
346.416 -393.092 346.908 -393.848 348.036 -393.848 cv
348.444 -393.848 348.816 -393.68 349.08 -393.548 cv
349.164 -394.724 li
348.888 -394.832 348.336 -394.976 347.868 -394.976 cv
345.792 -394.976 344.88 -393.548 344.88 -391.784 cv
344.88 -390.032 345.744 -388.602 347.784 -388.602 cv
348.384 -388.602 348.9 -388.724 349.248 -388.856 cv
cp
350.304 -388.698 mo
351.792 -388.698 li
351.792 -394.88 li
350.304 -394.88 li
cp
350.28 -396.044 mo
351.816 -396.044 li
351.816 -397.508 li
350.28 -397.508 li
cp
355.128 -395.564 mo
356.064 -395.564 li
357.288 -397.292 li
355.896 -397.292 li
cp
354.648 -391.796 mo
354.648 -392.828 354.876 -393.92 355.836 -393.92 cv
356.796 -393.92 357.012 -392.828 357.012 -391.796 cv
357.012 -390.764 356.796 -389.66 355.836 -389.66 cv
354.876 -389.66 354.648 -390.764 354.648 -391.796 cv
cp
353.112 -391.796 mo
353.112 -389.204 354.576 -388.602 355.836 -388.602 cv
357.096 -388.602 358.548 -389.204 358.548 -391.796 cv
358.548 -394.316 357.096 -394.976 355.836 -394.976 cv
354.576 -394.976 353.112 -394.316 353.112 -391.796 cv
cp
359.724 -388.698 mo
361.212 -388.698 li
361.212 -392.3 li
361.212 -393.092 361.488 -393.752 362.268 -393.752 cv
362.88 -393.752 363.12 -393.356 363.12 -392.408 cv
363.12 -388.698 li
364.608 -388.698 li
364.608 -392.684 li
364.608 -393.932 364.188 -394.976 362.784 -394.976 cv
361.776 -394.976 361.356 -394.304 361.14 -393.932 cv
361.152 -393.932 li
361.116 -393.932 li
361.116 -394.244 361.08 -394.568 361.068 -394.88 cv
359.676 -394.88 li
359.712 -394.604 359.724 -394.244 359.724 -393.86 cv
cp
.17 .16 .16 rgb
ef
.216 lw
0 lc
0 lj
2.61313 ml
[] 0 dsh
true sadj
-205.798 -445.919 mo
-205.798 -354.445 li
@
-205.798 83.2776 mo
-205.798 174.752 li
@
-48.2844 -395.22 mo
-47.7444 -395.22 li
-47.1641 -395.22 -46.1241 -395.22 -46.1241 -393.83 cv
-46.1241 -392.75 -46.7341 -392.44 -47.6542 -392.44 cv
-48.2844 -392.44 li
cp
-48.9043 -388.818 mo
-48.2844 -388.818 li
-48.2844 -391.86 li
-47.4141 -391.86 li
-46.5141 -391.86 -45.4642 -392.32 -45.4642 -393.83 cv
-45.4642 -395.24 -46.2842 -395.8 -47.5941 -395.8 cv
-48.9043 -395.8 li
cp
-42.5541 -396.1 mo
-43.3141 -394.68 li
-42.8141 -394.68 li
-41.854 -396.1 li
cp
-41.2941 -392.3 mo
-41.2941 -392.67 -41.2941 -393.99 -42.8642 -393.99 cv
-43.4241 -393.99 -43.7841 -393.8 -44.264 -393.54 cv
-44.1741 -392.92 li
-44.114 -392.97 -43.574 -393.45 -42.894 -393.45 cv
-41.8341 -393.45 -41.8341 -392.53 -41.8341 -391.89 cv
-42.204 -391.89 li
-42.9343 -391.89 -44.6642 -391.86 -44.6642 -390.23 cv
-44.6642 -389.4 -44.0341 -388.748 -43.2441 -388.748 cv
-42.5842 -388.748 -42.1641 -388.99 -41.814 -389.55 cv
-41.7942 -389.55 li
-41.7542 -388.818 li
-41.234 -388.818 li
-41.2641 -389.2 -41.2941 -389.58 -41.2941 -389.96 cv
cp
-41.8341 -390.79 mo
-41.8341 -389.4 -42.8342 -389.29 -43.104 -389.29 cv
-43.724 -389.29 -44.044 -389.8 -44.044 -390.23 cv
-44.044 -391.39 -43.034 -391.39 -41.8341 -391.39 cv
cp
-40.2243 -391.18 mo
-40.2243 -390.21 -39.8142 -388.748 -38.5343 -388.748 cv
-37.9243 -388.748 -37.5442 -389.01 -37.2443 -389.52 cv
-37.2241 -389.52 li
-37.2241 -388.82 li
-37.2241 -388.298 -37.3041 -387.138 -38.5641 -387.138 cv
-38.8943 -387.138 -39.4743 -387.248 -39.9641 -387.528 cv
-40.0041 -386.878 li
-39.3643 -386.678 -39.1041 -386.598 -38.5542 -386.598 cv
-37.1941 -386.598 -36.6442 -387.498 -36.6442 -388.94 cv
-36.6442 -392.23 li
-36.6442 -393.03 -36.6243 -393.48 -36.6042 -393.92 cv
-37.1442 -393.92 li
-37.1442 -393.17 li
-37.1643 -393.17 li
-37.4642 -393.7 -37.8642 -393.99 -38.5043 -393.99 cv
-40.1642 -393.99 -40.2243 -391.89 -40.2243 -391.18 cv
cp
-39.6041 -391.37 mo
-39.6041 -391.79 -39.6041 -393.45 -38.4442 -393.45 cv
-37.4543 -393.45 -37.1842 -392.47 -37.1842 -391.43 cv
-37.1842 -390.14 -37.4742 -389.29 -38.4343 -389.29 cv
-39.3042 -389.29 -39.6041 -390.19 -39.6041 -391.37 cv
cp
-35.194 -388.82 mo
-34.4142 -388.82 li
-34.4142 -389.8 li
-35.194 -389.8 li
cp
-29.2639 -392.31 mo
-29.2639 -393.52 -29.504 -395.87 -31.2039 -395.87 cv
-32.9041 -395.87 -33.144 -393.52 -33.144 -392.31 cv
-33.144 -391.1 -32.9041 -388.748 -31.2039 -388.748 cv
-29.504 -388.748 -29.2639 -391.1 -29.2639 -392.31 cv
cp
-29.8841 -392.31 mo
-29.8841 -391.48 -29.9541 -389.33 -31.2039 -389.33 cv
-32.454 -389.33 -32.524 -391.48 -32.524 -392.31 cv
-32.524 -393.14 -32.454 -395.29 -31.2039 -395.29 cv
-29.9541 -395.29 -29.8841 -393.14 -29.8841 -392.31 cv
cp
-28.494 -391.12 mo
-28.494 -390.49 li
-25.724 -390.49 li
-25.724 -388.818 li
-25.104 -388.818 li
-25.104 -390.49 li
-24.314 -390.49 li
-24.314 -391.07 li
-25.104 -391.07 li
-25.104 -395.8 li
-25.9241 -395.8 li
cp
-25.7441 -395.18 mo
-25.724 -395.18 li
-25.724 -391.07 li
-27.954 -391.07 li
cp
ef
2.19302 -88.5476 mo
4.60931 -88.5476 li
4.60931 -81.3575 li
4.60931 -80.1672 4.80972 -79.2919 5.21051 -78.738 cv
5.60822 -78.1813 6.23581 -77.904 7.08762 -77.904 cv
7.9451 -77.904 8.59341 -78.2017 9.02933 -78.7969 cv
9.46841 -79.3922 9.6864 -80.2761 9.6864 -81.4431 cv
9.6864 -88.5476 li
11.9643 -88.5476 li
11.9643 -81.4252 li
11.9643 -79.6309 11.5547 -78.2813 10.7355 -77.3824 cv
9.91351 -76.4807 8.6875 -76.03 7.05222 -76.03 cv
5.44611 -76.03 4.23511 -76.4751 3.41901 -77.3677 cv
2.6026 -78.2606 2.19302 -79.5776 2.19302 -81.322 cv
cp
23.1969 -81.6168 mo
23.1969 -76.2803 li
20.8748 -76.2803 li
20.8748 -81.1247 li
20.8748 -81.9527 20.7333 -82.5628 20.4476 -82.9576 cv
20.1618 -83.3525 19.7168 -83.5498 19.1127 -83.5498 cv
18.4676 -83.5498 17.9548 -83.2995 17.5747 -82.7955 cv
17.1945 -82.2918 17.006 -81.6052 17.006 -80.7358 cv
17.006 -76.2803 li
14.7105 -76.2803 li
14.7105 -85.2412 li
16.8085 -85.2412 li
16.8085 -83.6175 li
17.1472 -84.2276 17.5863 -84.6902 18.1226 -85.0025 cv
18.662 -85.3178 19.2865 -85.4739 19.9937 -85.4739 cv
21.0457 -85.4739 21.8445 -85.1471 22.3865 -84.4957 cv
22.9259 -83.8415 23.1969 -82.8811 23.1969 -81.6168 cv
cp
25.6721 -85.2412 mo
27.9673 -85.2412 li
27.9673 -76.2803 li
25.6721 -76.2803 li
cp
25.6721 -89.2548 mo
27.9673 -89.2548 li
27.9673 -87.027 li
25.6721 -87.027 li
cp
29.4878 -85.2412 mo
31.9574 -85.2412 li
34.0995 -78.3519 li
36.2918 -85.2412 li
38.587 -85.2412 li
35.3312 -76.2803 li
32.6822 -76.2803 li
cp
47.8838 -80.8566 mo
47.8838 -80.1318 li
41.575 -80.1318 li
41.6371 -79.3775 41.9316 -78.7853 42.4504 -78.3491 cv
42.972 -77.9159 43.6585 -77.6977 44.51 -77.6977 cv
44.9755 -77.6977 45.4293 -77.7538 45.8684 -77.8629 cv
46.3075 -77.9721 46.7318 -78.1339 47.1414 -78.3519 cv
47.1414 -76.5839 li
46.7052 -76.4042 46.2338 -76.2716 45.7269 -76.1803 cv
45.2201 -76.0918 44.6781 -76.0476 44.1033 -76.0476 cv
42.6063 -76.0476 41.4367 -76.4779 40.594 -77.3382 cv
39.7509 -78.1985 39.3297 -79.3922 39.3297 -80.9156 cv
39.3297 -82.2739 39.7393 -83.3729 40.5585 -84.2128 cv
41.3806 -85.0527 42.4473 -85.4739 43.7674 -85.4739 cv
45.0668 -85.4739 46.0776 -85.0703 46.7996 -84.2599 cv
47.5216 -83.4526 47.8838 -82.3181 47.8838 -80.8566 cv
cp
45.8038 -81.5638 mo
45.7417 -82.3241 45.5265 -82.9134 45.1643 -83.3378 cv
44.8017 -83.759 44.3303 -83.9713 43.7498 -83.9713 cv
43.1576 -83.9713 42.6684 -83.759 42.2823 -83.3378 cv
41.8962 -82.9134 41.6606 -82.3241 41.575 -81.5638 cv
cp
55.1975 -85.3708 mo
55.1122 -83.2995 li
54.9911 -83.3406 54.8644 -83.3701 54.732 -83.3908 cv
54.5994 -83.4115 54.4608 -83.4202 54.3165 -83.4202 cv
53.5562 -83.4202 52.9788 -83.1697 52.5808 -82.6659 cv
52.1831 -82.1619 51.9856 -81.4283 51.9856 -80.4677 cv
51.9856 -76.2803 li
49.6903 -76.2803 li
49.6903 -85.2412 li
51.7528 -85.2412 li
51.7528 -83.4554 li
52.0417 -84.1215 52.404 -84.6224 52.8462 -84.9555 cv
53.285 -85.2883 53.8037 -85.4564 54.4018 -85.4564 cv
54.5081 -85.4564 54.6229 -85.4504 54.7496 -85.4357 cv
54.8763 -85.4209 55.0237 -85.4005 55.1975 -85.3708 cv
cp
62.3606 -84.9643 mo
62.1869 -83.2641 li
61.792 -83.4704 61.4003 -83.6266 61.0142 -83.7298 cv
60.6281 -83.8327 60.2451 -83.8857 59.865 -83.8857 cv
59.4526 -83.8857 59.1343 -83.8151 58.9131 -83.6737 cv
58.692 -83.5322 58.5801 -83.3318 58.5801 -83.0668 cv
58.5801 -82.6688 59.0489 -82.262 59.9858 -81.8499 cv
60.089 -81.8025 60.1683 -81.7671 60.2185 -81.7467 cv
61.1823 -81.3192 61.8422 -80.9008 62.2047 -80.4884 cv
62.567 -80.0788 62.7498 -79.5688 62.7498 -78.9647 cv
62.7498 -78.1132 62.4108 -77.4386 61.7302 -76.9405 cv
61.0525 -76.4425 60.1272 -76.195 58.9514 -76.195 cv
58.4565 -76.195 57.976 -76.2333 57.5049 -76.3129 cv
57.036 -76.3895 56.5913 -76.5014 56.1729 -76.6517 cv
56.3024 -78.4228 li
56.7268 -78.2104 57.1628 -78.0483 57.6078 -77.9423 cv
58.0557 -77.8363 58.4976 -77.7833 58.9338 -77.7833 cv
59.3877 -77.7833 59.7411 -77.8598 59.9917 -78.0132 cv
60.2423 -78.1634 60.3659 -78.3754 60.3659 -78.6467 cv
60.3659 -79.0886 59.7735 -79.6074 58.5889 -80.1995 cv
58.5449 -80.2262 li
57.6608 -80.6653 57.0627 -81.0689 56.7503 -81.4431 cv
56.4408 -81.8173 56.2849 -82.2711 56.2849 -82.8074 cv
56.2849 -83.594 56.6177 -84.2363 57.2807 -84.7316 cv
57.9468 -85.2265 58.819 -85.4739 59.9002 -85.4739 cv
60.189 -85.4739 60.5074 -85.4388 60.858 -85.3708 cv
61.2115 -85.3002 61.7095 -85.1675 62.3606 -84.9643 cv
cp
64.7006 -85.2412 mo
66.9959 -85.2412 li
66.9959 -76.2803 li
64.7006 -76.2803 li
cp
64.7006 -89.2548 mo
66.9959 -89.2548 li
66.9959 -87.027 li
64.7006 -87.027 li
cp
73.6026 -83.7386 mo
72.9806 -83.7386 72.4769 -83.4704 72.0877 -82.931 cv
71.6988 -82.395 71.5044 -81.6846 71.5044 -80.8036 cv
71.5044 -79.911 71.696 -79.2065 72.0821 -78.685 cv
72.4679 -78.1634 72.9954 -77.904 73.6612 -77.904 cv
74.3362 -77.904 74.8753 -78.1662 75.2818 -78.6909 cv
75.6855 -79.2125 75.889 -79.9166 75.889 -80.8036 cv
75.889 -81.7141 75.6855 -82.4301 75.2761 -82.9517 cv
74.8694 -83.4761 74.3095 -83.7386 73.6026 -83.7386 cv
cp
75.9066 -89.5051 mo
78.2021 -89.5051 li
78.2021 -76.2803 li
76.1305 -76.2803 li
76.1305 -78.0869 li
75.7682 -77.4355 75.3172 -76.9493 74.7753 -76.6253 cv
74.233 -76.3041 73.6082 -76.142 72.8922 -76.142 cv
71.7932 -76.142 70.8884 -76.5868 70.1783 -77.4768 cv
69.4682 -78.3638 69.1116 -79.513 69.1116 -80.9156 cv
69.1116 -82.2799 69.4563 -83.382 70.1432 -84.2188 cv
70.8326 -85.0556 71.7311 -85.4739 72.842 -85.4739 cv
73.5198 -85.4739 74.1122 -85.3444 74.616 -85.085 cv
75.12 -84.8257 75.5503 -84.4308 75.9066 -83.9036 cv
cp
85.2946 -80.5649 mo
84.3547 -80.5649 83.6505 -80.4354 83.176 -80.1729 cv
82.7018 -79.911 82.4628 -79.5189 82.4628 -79.0002 cv
82.4628 -78.6113 82.5986 -78.2929 82.8696 -78.0483 cv
83.1377 -77.804 83.4943 -77.6801 83.9303 -77.6801 cv
84.5639 -77.6801 85.0826 -77.904 85.4922 -78.3491 cv
85.9015 -78.7969 86.1051 -79.3744 86.1051 -80.0816 cv
86.1051 -80.5649 li
cp
88.3149 -81.3929 mo
88.3149 -76.2803 li
86.2788 -76.2803 li
86.2437 -77.7331 li
85.8692 -77.1792 85.4273 -76.7608 84.9145 -76.4751 cv
84.4017 -76.1891 83.8303 -76.0476 83.2055 -76.0476 cv
82.3069 -76.0476 81.5818 -76.3098 81.0279 -76.8373 cv
80.4769 -77.3649 80.1999 -78.0455 80.1999 -78.8794 cv
80.1999 -79.8755 80.5948 -80.6239 81.3817 -81.1219 cv
82.1711 -81.6197 83.3498 -81.8674 84.9233 -81.8674 cv
86.1051 -81.8674 li
86.1051 -81.997 li
86.1051 -82.607 85.9134 -83.0784 85.5274 -83.4174 cv
85.1416 -83.7533 84.5965 -83.9211 83.8949 -83.9211 cv
83.4972 -83.9211 83.0847 -83.8622 82.6544 -83.7414 cv
82.2273 -83.6207 81.7853 -83.4378 81.3315 -83.1963 cv
81.2961 -84.8347 li
81.8324 -85.0556 82.3568 -85.2149 82.8755 -85.3178 cv
83.394 -85.4209 83.9156 -85.4739 84.4371 -85.4739 cv
85.7867 -85.4739 86.7681 -85.1471 87.3869 -84.4957 cv
88.0057 -83.8415 88.3149 -82.8074 88.3149 -81.3929 cv
cp
94.7799 -83.7386 mo
94.1583 -83.7386 93.6543 -83.4704 93.2654 -82.931 cv
92.8765 -82.395 92.6817 -81.6846 92.6817 -80.8036 cv
92.6817 -79.911 92.8736 -79.2065 93.2594 -78.685 cv
93.6455 -78.1634 94.173 -77.904 94.8389 -77.904 cv
95.5135 -77.904 96.053 -78.1662 96.4594 -78.6909 cv
96.8631 -79.2125 97.0666 -79.9166 97.0666 -80.8036 cv
97.0666 -81.7141 96.8631 -82.4301 96.4535 -82.9517 cv
96.047 -83.4761 95.4872 -83.7386 94.7799 -83.7386 cv
cp
97.0842 -89.5051 mo
99.3797 -89.5051 li
99.3797 -76.2803 li
97.3081 -76.2803 li
97.3081 -78.0869 li
96.9459 -77.4355 96.4949 -76.9493 95.9526 -76.6253 cv
95.4103 -76.3041 94.7859 -76.142 94.0698 -76.142 cv
92.9706 -76.142 92.066 -76.5868 91.356 -77.4768 cv
90.6459 -78.3638 90.2893 -79.513 90.2893 -80.9156 cv
90.2893 -82.2799 90.634 -83.382 91.3205 -84.2188 cv
92.0099 -85.0556 92.9088 -85.4739 94.0197 -85.4739 cv
94.6974 -85.4739 95.2896 -85.3444 95.7936 -85.085 cv
96.2976 -84.8257 96.7276 -84.4308 97.0842 -83.9036 cv
cp
111.234 -83.7386 mo
110.612 -83.7386 110.109 -83.4704 109.719 -82.931 cv
109.33 -82.395 109.136 -81.6846 109.136 -80.8036 cv
109.136 -79.911 109.328 -79.2065 109.714 -78.685 cv
110.1 -78.1634 110.627 -77.904 111.293 -77.904 cv
111.968 -77.904 112.507 -78.1662 112.913 -78.6909 cv
113.317 -79.2125 113.521 -79.9166 113.521 -80.8036 cv
113.521 -81.7141 113.317 -82.4301 112.908 -82.9517 cv
112.501 -83.4761 111.941 -83.7386 111.234 -83.7386 cv
cp
113.538 -89.5051 mo
115.834 -89.5051 li
115.834 -76.2803 li
113.762 -76.2803 li
113.762 -78.0869 li
113.4 -77.4355 112.949 -76.9493 112.407 -76.6253 cv
111.865 -76.3041 111.24 -76.142 110.524 -76.142 cv
109.425 -76.142 108.52 -76.5868 107.81 -77.4768 cv
107.1 -78.3638 106.743 -79.513 106.743 -80.9156 cv
106.743 -82.2799 107.088 -83.382 107.775 -84.2188 cv
108.464 -85.0556 109.363 -85.4739 110.474 -85.4739 cv
111.151 -85.4739 111.744 -85.3444 112.248 -85.085 cv
112.752 -84.8257 113.182 -84.4308 113.538 -83.9036 cv
cp
126.436 -80.8566 mo
126.436 -80.1318 li
120.127 -80.1318 li
120.189 -79.3775 120.484 -78.7853 121.002 -78.3491 cv
121.524 -77.9159 122.21 -77.6977 123.062 -77.6977 cv
123.528 -77.6977 123.981 -77.7538 124.42 -77.8629 cv
124.859 -77.9721 125.284 -78.1339 125.693 -78.3519 cv
125.693 -76.5839 li
125.257 -76.4042 124.786 -76.2716 124.279 -76.1803 cv
123.772 -76.0918 123.23 -76.0476 122.655 -76.0476 cv
121.158 -76.0476 119.989 -76.4779 119.146 -77.3382 cv
118.303 -78.1985 117.882 -79.3922 117.882 -80.9156 cv
117.882 -82.2739 118.291 -83.3729 119.111 -84.2128 cv
119.933 -85.0527 120.999 -85.4739 122.319 -85.4739 cv
123.619 -85.4739 124.63 -85.0703 125.352 -84.2599 cv
126.074 -83.4526 126.436 -82.3181 126.436 -80.8566 cv
cp
124.355 -81.5638 mo
124.294 -82.3241 124.079 -82.9134 123.716 -83.3378 cv
123.354 -83.759 122.882 -83.9713 122.302 -83.9713 cv
121.709 -83.9713 121.22 -83.759 120.834 -83.3378 cv
120.448 -82.9134 120.212 -82.3241 120.127 -81.5638 cv
cp
133.437 -89.5051 mo
135.733 -89.5051 li
135.733 -76.2803 li
133.437 -76.2803 li
cp
142.808 -80.5649 mo
141.868 -80.5649 141.163 -80.4354 140.689 -80.1729 cv
140.215 -79.911 139.976 -79.5189 139.976 -79.0002 cv
139.976 -78.6113 140.111 -78.2929 140.383 -78.0483 cv
140.651 -77.804 141.007 -77.6801 141.443 -77.6801 cv
142.077 -77.6801 142.595 -77.904 143.005 -78.3491 cv
143.415 -78.7969 143.618 -79.3744 143.618 -80.0816 cv
143.618 -80.5649 li
cp
145.828 -81.3929 mo
145.828 -76.2803 li
143.792 -76.2803 li
143.756 -77.7331 li
143.382 -77.1792 142.94 -76.7608 142.428 -76.4751 cv
141.915 -76.1891 141.343 -76.0476 140.719 -76.0476 cv
139.82 -76.0476 139.095 -76.3098 138.541 -76.8373 cv
137.99 -77.3649 137.713 -78.0455 137.713 -78.8794 cv
137.713 -79.8755 138.108 -80.6239 138.894 -81.1219 cv
139.684 -81.6197 140.863 -81.8674 142.436 -81.8674 cv
143.618 -81.8674 li
143.618 -81.997 li
143.618 -82.607 143.426 -83.0784 143.04 -83.4174 cv
142.654 -83.7533 142.109 -83.9211 141.408 -83.9211 cv
141.01 -83.9211 140.597 -83.8622 140.167 -83.7414 cv
139.74 -83.6207 139.298 -83.4378 138.844 -83.1963 cv
138.809 -84.8347 li
139.345 -85.0556 139.87 -85.2149 140.388 -85.3178 cv
140.907 -85.4209 141.429 -85.4739 141.95 -85.4739 cv
143.3 -85.4739 144.281 -85.1471 144.9 -84.4957 cv
145.518 -83.8415 145.828 -82.8074 145.828 -81.3929 cv
cp
154.025 -84.9643 mo
153.852 -83.2641 li
153.457 -83.4704 153.065 -83.6266 152.679 -83.7298 cv
152.293 -83.8327 151.91 -83.8857 151.53 -83.8857 cv
151.117 -83.8857 150.799 -83.8151 150.578 -83.6737 cv
150.357 -83.5322 150.245 -83.3318 150.245 -83.0668 cv
150.245 -82.6688 150.713 -82.262 151.65 -81.8499 cv
151.754 -81.8025 151.833 -81.7671 151.883 -81.7467 cv
152.847 -81.3192 153.507 -80.9008 153.869 -80.4884 cv
154.232 -80.0788 154.414 -79.5688 154.414 -78.9647 cv
154.414 -78.1132 154.075 -77.4386 153.395 -76.9405 cv
152.717 -76.4425 151.792 -76.195 150.616 -76.195 cv
150.121 -76.195 149.641 -76.2333 149.169 -76.3129 cv
148.701 -76.3895 148.256 -76.5014 147.837 -76.6517 cv
147.967 -78.4228 li
148.391 -78.2104 148.827 -78.0483 149.272 -77.9423 cv
149.72 -77.8363 150.162 -77.7833 150.598 -77.7833 cv
151.052 -77.7833 151.406 -77.8598 151.656 -78.0132 cv
151.907 -78.1634 152.03 -78.3754 152.03 -78.6467 cv
152.03 -79.0886 151.438 -79.6074 150.254 -80.1995 cv
150.209 -80.2262 li
149.325 -80.6653 148.727 -81.0689 148.415 -81.4431 cv
148.106 -81.8173 147.949 -82.2711 147.949 -82.8074 cv
147.949 -83.594 148.282 -84.2363 148.945 -84.7316 cv
149.611 -85.2265 150.483 -85.4739 151.565 -85.4739 cv
151.854 -85.4739 152.172 -85.4388 152.522 -85.3708 cv
152.876 -85.3002 153.374 -85.1675 154.025 -84.9643 cv
cp
171.051 -88.1584 mo
170.895 -86.2166 li
170.712 -86.2844 li
169.575 -86.7116 168.685 -86.9239 168.046 -86.9239 cv
166.699 -86.9239 165.623 -86.5055 164.816 -85.6715 cv
164.012 -84.8376 163.608 -83.7267 163.608 -82.3417 cv
163.608 -81.0275 164.024 -79.9637 164.854 -79.1476 cv
165.688 -78.3315 166.785 -77.9216 168.149 -77.9216 cv
168.605 -77.9216 169.289 -78.0809 170.206 -78.3961 cv
170.527 -78.5053 170.768 -78.5818 170.93 -78.6288 cv
171.137 -76.6871 li
170.986 -76.6457 170.765 -76.5868 170.471 -76.5043 cv
169.36 -76.1891 168.517 -76.03 167.942 -76.03 cv
165.83 -76.03 164.162 -76.5956 162.942 -77.7303 cv
161.722 -78.8647 161.112 -80.3999 161.112 -82.3417 cv
161.112 -84.2806 161.725 -85.8453 162.948 -87.0327 cv
164.171 -88.2204 165.792 -88.8157 167.813 -88.8157 cv
168.441 -88.8157 169.289 -88.6592 170.359 -88.35 cv
170.677 -88.2615 170.907 -88.1997 171.051 -88.1584 cv
cp
172.964 -85.2412 mo
175.259 -85.2412 li
175.259 -76.2803 li
172.964 -76.2803 li
cp
172.964 -89.2548 mo
175.259 -89.2548 li
175.259 -87.027 li
172.964 -87.027 li
cp
185.844 -80.8566 mo
185.844 -80.1318 li
179.535 -80.1318 li
179.597 -79.3775 179.891 -78.7853 180.41 -78.3491 cv
180.931 -77.9159 181.618 -77.6977 182.47 -77.6977 cv
182.935 -77.6977 183.389 -77.7538 183.828 -77.8629 cv
184.267 -77.9721 184.691 -78.1339 185.101 -78.3519 cv
185.101 -76.5839 li
184.665 -76.4042 184.193 -76.2716 183.687 -76.1803 cv
183.18 -76.0918 182.638 -76.0476 182.063 -76.0476 cv
180.566 -76.0476 179.396 -76.4779 178.553 -77.3382 cv
177.711 -78.1985 177.289 -79.3922 177.289 -80.9156 cv
177.289 -82.2739 177.699 -83.3729 178.518 -84.2128 cv
179.34 -85.0527 180.407 -85.4739 181.727 -85.4739 cv
183.026 -85.4739 184.037 -85.0703 184.759 -84.2599 cv
185.481 -83.4526 185.844 -82.3181 185.844 -80.8566 cv
cp
183.763 -81.5638 mo
183.701 -82.3241 183.486 -82.9134 183.124 -83.3378 cv
182.761 -83.759 182.29 -83.9713 181.709 -83.9713 cv
181.117 -83.9713 180.628 -83.759 180.242 -83.3378 cv
179.856 -82.9134 179.62 -82.3241 179.535 -81.5638 cv
cp
196.136 -81.6168 mo
196.136 -76.2803 li
193.814 -76.2803 li
193.814 -81.1247 li
193.814 -81.9527 193.673 -82.5628 193.387 -82.9576 cv
193.101 -83.3525 192.656 -83.5498 192.052 -83.5498 cv
191.407 -83.5498 190.894 -83.2995 190.514 -82.7955 cv
190.134 -82.2918 189.945 -81.6052 189.945 -80.7358 cv
189.945 -76.2803 li
187.65 -76.2803 li
187.65 -85.2412 li
189.748 -85.2412 li
189.748 -83.6175 li
190.087 -84.2276 190.526 -84.6902 191.062 -85.0025 cv
191.601 -85.3178 192.226 -85.4739 192.933 -85.4739 cv
193.985 -85.4739 194.784 -85.1471 195.326 -84.4957 cv
195.865 -83.8415 196.136 -82.8811 196.136 -81.6168 cv
cp
205.309 -85.0173 mo
205.129 -83.2139 li
204.72 -83.376 204.372 -83.4908 204.083 -83.5617 cv
203.798 -83.6354 203.544 -83.6708 203.326 -83.6708 cv
202.463 -83.6708 201.767 -83.4055 201.24 -82.8751 cv
200.712 -82.3476 200.45 -81.6492 200.45 -80.7857 cv
200.45 -79.9226 200.712 -79.2182 201.24 -78.6702 cv
201.767 -78.1251 202.451 -77.851 203.29 -77.851 cv
203.594 -77.851 203.904 -77.8981 204.219 -77.9893 cv
204.531 -78.0809 204.885 -78.2311 205.277 -78.4375 cv
205.362 -76.5987 li
204.723 -76.3807 204.225 -76.2333 203.865 -76.1596 cv
203.506 -76.0859 203.167 -76.0476 202.852 -76.0476 cv
201.39 -76.0476 200.223 -76.4839 199.351 -77.3561 cv
198.479 -78.2283 198.043 -79.3894 198.043 -80.839 cv
198.043 -82.1795 198.493 -83.2876 199.392 -84.1626 cv
200.294 -85.038 201.44 -85.4739 202.834 -85.4739 cv
203.347 -85.4739 204.024 -85.3591 204.87 -85.1293 cv
205.064 -85.0762 205.212 -85.0408 205.309 -85.0173 cv
cp
207.278 -85.2412 mo
209.573 -85.2412 li
209.573 -76.2803 li
207.278 -76.2803 li
cp
207.278 -89.2548 mo
209.573 -89.2548 li
209.573 -87.027 li
207.278 -87.027 li
cp
216.648 -80.5649 mo
215.708 -80.5649 215.004 -80.4354 214.529 -80.1729 cv
214.055 -79.911 213.816 -79.5189 213.816 -79.0002 cv
213.816 -78.6113 213.952 -78.2929 214.223 -78.0483 cv
214.491 -77.804 214.847 -77.6801 215.284 -77.6801 cv
215.917 -77.6801 216.436 -77.904 216.845 -78.3491 cv
217.255 -78.7969 217.458 -79.3744 217.458 -80.0816 cv
217.458 -80.5649 li
cp
219.668 -81.3929 mo
219.668 -76.2803 li
217.632 -76.2803 li
217.597 -77.7331 li
217.222 -77.1792 216.78 -76.7608 216.268 -76.4751 cv
215.755 -76.1891 215.184 -76.0476 214.559 -76.0476 cv
213.66 -76.0476 212.935 -76.3098 212.381 -76.8373 cv
211.83 -77.3649 211.553 -78.0455 211.553 -78.8794 cv
211.553 -79.8755 211.948 -80.6239 212.735 -81.1219 cv
213.524 -81.6197 214.703 -81.8674 216.277 -81.8674 cv
217.458 -81.8674 li
217.458 -81.997 li
217.458 -82.607 217.267 -83.0784 216.881 -83.4174 cv
216.495 -83.7533 215.949 -83.9211 215.248 -83.9211 cv
214.85 -83.9211 214.438 -83.8622 214.008 -83.7414 cv
213.581 -83.6207 213.139 -83.4378 212.685 -83.1963 cv
212.649 -84.8347 li
213.186 -85.0556 213.71 -85.2149 214.229 -85.3178 cv
214.747 -85.4209 215.269 -85.4739 215.79 -85.4739 cv
217.14 -85.4739 218.121 -85.1471 218.74 -84.4957 cv
219.359 -83.8415 219.668 -82.8074 219.668 -81.3929 cv
cp
227.866 -84.9643 mo
227.692 -83.2641 li
227.297 -83.4704 226.905 -83.6266 226.519 -83.7298 cv
226.133 -83.8327 225.75 -83.8857 225.37 -83.8857 cv
224.957 -83.8857 224.639 -83.8151 224.418 -83.6737 cv
224.197 -83.5322 224.085 -83.3318 224.085 -83.0668 cv
224.085 -82.6688 224.554 -82.262 225.491 -81.8499 cv
225.594 -81.8025 225.673 -81.7671 225.724 -81.7467 cv
226.687 -81.3192 227.347 -80.9008 227.71 -80.4884 cv
228.072 -80.0788 228.255 -79.5688 228.255 -78.9647 cv
228.255 -78.1132 227.916 -77.4386 227.235 -76.9405 cv
226.558 -76.4425 225.632 -76.195 224.457 -76.195 cv
223.961 -76.195 223.481 -76.2333 223.01 -76.3129 cv
222.541 -76.3895 222.096 -76.5014 221.678 -76.6517 cv
221.808 -78.4228 li
222.232 -78.2104 222.668 -78.0483 223.113 -77.9423 cv
223.561 -77.8363 224.003 -77.7833 224.439 -77.7833 cv
224.892 -77.7833 225.246 -77.8598 225.496 -78.0132 cv
225.747 -78.1634 225.871 -78.3754 225.871 -78.6467 cv
225.871 -79.0886 225.279 -79.6074 224.094 -80.1995 cv
224.05 -80.2262 li
223.166 -80.6653 222.568 -81.0689 222.255 -81.4431 cv
221.946 -81.8173 221.79 -82.2711 221.79 -82.8074 cv
221.79 -83.594 222.123 -84.2363 222.786 -84.7316 cv
223.452 -85.2265 224.324 -85.4739 225.405 -85.4739 cv
225.694 -85.4739 226.012 -85.4388 226.363 -85.3708 cv
226.717 -85.3002 227.215 -85.1675 227.866 -84.9643 cv
.65 .62 .8 rgb
ef
161.336 -157.637 mo
174.902 -157.637 li
174.902 -106.758 li
161.336 -106.758 li
cp
.07 .09 .55 rgb
ef
158.912 -160.11 mo
177.354 -160.11 li
177.354 -141.668 li
158.912 -141.668 li
cp
1 1 1 rgb
ef
gsave
161.294 -144.04 mo
162.983 -145.729 li
162.983 -155.927 li
161.294 -157.615 li
161.294 -144.04 li
eclp
162.983 -157.615 mo
161.294 -157.615 li
161.294 -144.04 li
162.983 -144.04 li
cp
level3{
gsave
clp
[-1.68831 0 0 13.5757 162.983 -157.616 ]ct
/0
<<
/ShadingType 2
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ]
/FunctionType 3
/Functions [
<<
/Domain[0 1 ]
/FunctionType 2
/C0 [.137 .141 .133 ]
/C1 [.129 .133 .125 ]
/N 1
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.68831 0 0 13.5757 162.983 -157.616 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256
/NumComp 3
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T
+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ0R+X&!P+X&!P
+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P
+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!O+<VdL+<VdL+<VdL
~>
<~,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX
,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX+sJ3T+sJ3T
+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T
+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ0R+X&!P+X&!P
~>
<~+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P
+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X&!O+<VdL+<VdL+<VdL
+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL
+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<M[I+!2RH+!2RH+!2RH
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
grestore
161.294 -144.04 mo
162.983 -145.729 li
162.983 -155.927 li
161.294 -157.615 li
cp
0 0 .14 rgb
ef
2 lj
161.294 -144.04 mo
162.983 -145.729 li
162.983 -155.927 li
161.294 -157.615 li
cp
1 1 1 rgb
@
gsave
174.87 -144.04 mo
173.181 -145.729 li
162.983 -145.729 li
161.294 -144.04 li
174.87 -144.04 li
eclp
161.294 -145.729 mo
161.294 -144.04 li
174.87 -144.04 li
174.87 -145.729 li
cp
level3{
gsave
clp
[0 1.68831 13.5757 0 161.294 -145.729 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[0 1.68831 13.5757 0 161.294 -145.729 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
grestore
174.87 -144.04 mo
173.181 -145.729 li
162.983 -145.729 li
161.294 -144.04 li
cp
0 0 .14 rgb
ef
174.87 -144.04 mo
173.181 -145.729 li
162.983 -145.729 li
161.294 -144.04 li
cp
1 1 1 rgb
@
gsave
174.87 -157.615 mo
173.181 -155.927 li
173.181 -145.729 li
174.87 -144.04 li
174.87 -157.615 li
eclp
173.181 -144.04 mo
174.87 -144.04 li
174.87 -157.615 li
173.181 -157.615 li
cp
level3{
gsave
clp
[1.68888 0 0 -13.5757 173.181 -144.04 ]ct
/1
<<
/ShadingType 2
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ]
/FunctionType 3
/Functions [
<<
/Domain[0 1 ]
/FunctionType 2
/C0 [.894 .89 .914 ]
/C1 [.482 .455 .58 ]
/N 1
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.68888 0 0 -13.5757 173.181 -144.04 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256
/NumComp 3
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~j5]1Zio/kTi8EMMhqm5Gh;$f@gY:H9g=b03f\"g-f%/F&e^W*te'landF$@gd*L%acHa\Zbfn;SbK@uM
aiVWFaN)?@`l?!:`5KR2_ns:,_83q&^V@Ot^:h4m]Y(kg]"5J`\[]/Z\$rfS[^ENM['R*FZEga?Z*:I9
YHP+3Xf\\+XK/D%WiE%tW2QYmVl$>gV59u`USFTYU7n9STV.pLT:VXFSXc4?S"#k8R[KS2R$a5,QBmf$
Q'@MsPEV/mOcbcfOH5H`NfK*YN/W^RMi*CLM2@%ELkgb?L4t>8KS4u1K7\]+JUr?%It)rsIXQWlI!g9f
~>
<~io8tViS`YOhr!;Ih;-lAgtUT;g=b03f\"g-f%/C%e^W*te'c[mdF$=fcd0q_cHXVXbfe2Qb0%iJaN2HC
a2Z-<`Pod6_o'@._SO((^q[Xu^:q:o]Y(kg]=PSa\[]/Z\$rfS[C*EL['R*EZE^[>Yct=7Y-+q0XfSV)
X/i8#WMuhpW2HPjVPU,bUnjc\U8"?TTqJ'NT:VXGSXl:@S"#n9R[KS2R$X/+QBmf$Pa%DrPEM)kOcb`e
O,o<]NfB$WN/NUOMMd7ILkphALPCP;KnP,4K7ec-JUrB&J:E&tIXQWmI!g9fH?sm_H$FRXGB\4RF`heJ
~>
<~l0.?pkND$jk2tdejlGL`j5]1Zio8qUiS`YPhr!>JhVR)Eh;$f@gY:K:g=k65g"=s0f@SX*f%/C%e^W*u
e'ldodaHOjdEp7ecd0q_cHa\Zc-4DUbKJ)Ob0%iJaiMQEa2c6?`l?!:`Pf^5_o'C/_SX.*_8*k%^V@Ot
^:q:o]tD"j]=Y\d]"5G_\[]/Z\$riT[^NTO[C!<JZa7!DZEga?Z*:I:YHP.4Y-+n/XfSV*X/i;$WiE%t
WMlboVl-GiVP^2dV50o_USFTYU8"?TTqJ'OT:_aISt;LDSXc4?S"#n9R[TY4R@'A/Q^=&)QBmf$Q'@Mt
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
grestore
174.87 -157.615 mo
173.181 -155.927 li
173.181 -145.729 li
174.87 -144.04 li
cp
@
gsave
161.294 -157.615 mo
162.983 -155.927 li
173.181 -155.927 li
174.87 -157.615 li
161.294 -157.615 li
eclp
174.87 -155.927 mo
174.87 -157.615 li
161.294 -157.615 li
161.294 -155.927 li
cp
level3{
gsave
clp
[0 -1.68888 -13.5757 0 174.87 -155.927 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[0 -1.68888 -13.5757 0 174.87 -155.927 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
grestore
161.294 -157.615 mo
162.983 -155.927 li
173.181 -155.927 li
174.87 -157.615 li
cp
@
162.983 -155.927 mo
173.181 -155.927 li
173.181 -145.729 li
162.983 -145.729 li
cp
.8 .79 .85 rgb
ef
162.983 -155.927 mo
173.181 -155.927 li
173.181 -145.729 li
162.983 -145.729 li
cp
1 1 1 rgb
@
56.2653 -156.55 mo
70.0326 -156.55 li
70.0326 -127.301 li
70.0326 -123.004 70.6903 -119.914 71.9925 -117.995 cv
73.3072 -116.087 75.4031 -115.134 78.2806 -115.134 cv
81.2326 -115.134 83.4651 -116.16 84.9658 -118.212 cv
86.4668 -120.264 87.2233 -123.294 87.2233 -127.301 cv
87.2233 -156.55 li
100.346 -156.55 li
100.346 -127.301 li
100.346 -119.902 98.5097 -114.349 94.8383 -110.655 cv
91.1672 -106.974 85.6481 -105.127 78.2931 -105.127 cv
71.0001 -105.127 65.5057 -106.986 61.8096 -110.691 cv
58.1135 -114.409 56.2653 -119.95 56.2653 -127.301 cv
cp
.07 .09 .55 rgb
ef
149.995 -157.457 mo
149.999 -147.727 li
138.026 -147.731 li
133.103 -147.733 129.18 -146.301 126.271 -143.434 cv
123.357 -140.561 121.904 -136.71 121.904 -131.869 cv
121.904 -127.015 123.383 -123.144 126.355 -120.268 cv
129.326 -117.391 133.291 -115.947 138.239 -115.947 cv
149.999 -115.933 li
149.999 -105.8 li
136.89 -105.79 li
127.941 -105.785 120.968 -108.087 115.973 -112.68 cv
110.978 -117.261 108.48 -123.665 108.48 -131.869 cv
108.48 -139.717 110.943 -145.932 115.866 -150.536 cv
120.791 -155.141 127.479 -157.426 135.919 -157.438 cv
cp
ef
58.0304 -71.7228 mo
60.6868 -71.7228 li
60.6868 -58.237 li
58.0304 -58.237 li
cp
73.0164 -64.1036 mo
73.0164 -58.237 li
70.4635 -58.237 li
70.4635 -63.5624 li
70.4635 -64.4729 70.3081 -65.1436 69.9938 -65.5776 cv
69.6797 -66.0116 69.1904 -66.2287 68.5263 -66.2287 cv
67.8171 -66.2287 67.2532 -65.9534 66.8354 -65.3996 cv
66.4176 -64.8454 66.2101 -64.0905 66.2101 -63.135 cv
66.2101 -58.237 li
63.6867 -58.237 li
63.6867 -68.0882 li
65.9932 -68.0882 li
65.9932 -66.3032 li
66.3657 -66.9736 66.8482 -67.4824 67.4381 -67.8257 cv
68.0308 -68.1724 68.7176 -68.3442 69.4949 -68.3442 cv
70.6514 -68.3442 71.5293 -67.9845 72.1254 -67.2684 cv
72.7182 -66.5496 73.0164 -65.4934 73.0164 -64.1036 cv
cp
81.7564 -72.7756 mo
81.6235 -70.926 li
81.4389 -70.9971 81.2703 -71.049 81.1215 -71.0782 cv
80.9692 -71.1105 80.8332 -71.1267 80.7133 -71.1267 cv
80.2175 -71.1267 79.8547 -70.9679 79.6183 -70.6473 cv
79.385 -70.3264 79.2685 -69.831 79.2685 -69.1603 cv
79.2685 -68.0882 li
81.6042 -68.0882 li
81.6042 -66.2091 li
79.2685 -66.2091 li
79.2685 -58.237 li
76.7643 -58.237 li
76.7643 -66.2091 li
74.7041 -66.2091 li
74.7041 -68.0882 li
76.7643 -68.0882 li
76.7643 -69.3516 li
76.7643 -70.5405 77.0591 -71.441 77.6519 -72.0502 cv
78.2449 -72.6622 79.1097 -72.9669 80.2467 -72.9669 cv
80.5188 -72.9669 80.7813 -72.9508 81.0339 -72.9182 cv
81.2864 -72.889 81.5297 -72.8405 81.7564 -72.7756 cv
cp
87.9243 -66.5139 mo
87.1598 -66.5139 86.5376 -66.2091 86.0583 -65.5968 cv
85.5821 -64.988 85.3425 -64.1846 85.3425 -63.1933 cv
85.3425 -62.2052 85.5821 -61.4084 86.0583 -60.7995 cv
86.5376 -60.1934 87.1598 -59.889 87.9243 -59.889 cv
88.7016 -59.889 89.3269 -60.1903 89.8 -60.7896 cv
90.2697 -61.3922 90.5061 -62.1924 90.5061 -63.1933 cv
90.5061 -64.1974 90.2697 -65.0041 89.7935 -65.6068 cv
89.3204 -66.2125 88.6954 -66.5139 87.9243 -66.5139 cv
cp
87.9243 -68.3442 mo
89.5571 -68.3442 90.8398 -67.8841 91.7726 -66.9674 cv
92.7058 -66.0507 93.1721 -64.7839 93.1721 -63.1707 cv
93.1721 -61.564 92.7024 -60.2972 91.7661 -59.3708 cv
90.8301 -58.4442 89.5506 -57.981 87.9243 -57.981 cv
86.2981 -57.981 85.0217 -58.4442 84.0919 -59.3674 cv
83.1624 -60.2907 82.6958 -61.5575 82.6958 -63.1707 cv
82.6958 -64.7839 83.159 -66.0507 84.0854 -66.9674 cv
85.012 -67.8841 86.2916 -68.3442 87.9243 -68.3442 cv
cp
101.504 -68.2308 mo
101.41 -65.9534 li
101.278 -65.9985 101.138 -66.0311 100.992 -66.0538 cv
100.846 -66.0765 100.694 -66.0861 100.536 -66.0861 cv
99.6997 -66.0861 99.0648 -65.8109 98.6274 -65.257 cv
98.19 -64.7028 97.9731 -63.8963 97.9731 -62.8401 cv
97.9731 -58.237 li
95.4495 -58.237 li
95.4495 -68.0882 li
97.7172 -68.0882 li
97.7172 -66.1249 li
98.0347 -66.8571 98.4329 -67.4079 98.9191 -67.7739 cv
99.4018 -68.1398 99.9719 -68.3246 100.63 -68.3246 cv
100.746 -68.3246 100.872 -68.3181 101.012 -68.3019 cv
101.151 -68.2858 101.313 -68.2631 101.504 -68.2308 cv
cp
111.809 -66.2287 mo
112.188 -66.9252 112.667 -67.4467 113.247 -67.7965 cv
113.827 -68.1497 114.501 -68.3246 115.272 -68.3246 cv
116.325 -68.3246 117.135 -67.9587 117.701 -67.2296 cv
118.272 -66.4974 118.557 -65.4545 118.557 -64.1004 cv
118.557 -58.237 li
116.033 -58.237 li
116.033 -63.5624 li
116.033 -64.4599 115.894 -65.1209 115.615 -65.5484 cv
115.337 -65.9758 114.909 -66.1899 114.336 -66.1899 cv
113.646 -66.1899 113.101 -65.9211 112.703 -65.38 cv
112.305 -64.8389 112.104 -64.0905 112.104 -63.135 cv
112.104 -58.237 li
109.58 -58.237 li
109.58 -63.5624 li
109.58 -64.4533 109.441 -65.1144 109.159 -65.5453 cv
108.877 -65.9758 108.443 -66.1899 107.863 -66.1899 cv
107.173 -66.1899 106.629 -65.9211 106.23 -65.38 cv
105.832 -64.8389 105.631 -64.0905 105.631 -63.135 cv
105.631 -58.237 li
103.127 -58.237 li
103.127 -68.0882 li
105.414 -68.0882 li
105.414 -66.3032 li
105.787 -66.9736 106.257 -67.479 106.827 -67.8161 cv
107.397 -68.156 108.061 -68.3246 108.819 -68.3246 cv
109.496 -68.3246 110.095 -68.1398 110.62 -67.7739 cv
111.142 -67.4079 111.537 -66.8928 111.809 -66.2287 cv
cp
126.182 -62.947 mo
125.149 -62.947 124.375 -62.8044 123.853 -62.5161 cv
123.332 -62.2279 123.069 -61.797 123.069 -61.227 cv
123.069 -60.7995 123.218 -60.4494 123.516 -60.1807 cv
123.811 -59.9117 124.203 -59.7756 124.683 -59.7756 cv
125.379 -59.7756 125.949 -60.0219 126.4 -60.5109 cv
126.85 -61.0033 127.073 -61.6383 127.073 -62.4158 cv
127.073 -62.947 li
cp
129.503 -63.8575 mo
129.503 -58.237 li
127.264 -58.237 li
127.226 -59.834 li
126.814 -59.2248 126.328 -58.7651 125.765 -58.4507 cv
125.201 -58.1366 124.572 -57.981 123.886 -57.981 cv
122.898 -57.981 122.101 -58.2693 121.492 -58.8493 cv
120.886 -59.4289 120.581 -60.1773 120.581 -61.094 cv
120.581 -62.189 121.015 -63.0119 121.881 -63.5593 cv
122.749 -64.107 124.044 -64.3791 125.774 -64.3791 cv
127.073 -64.3791 li
127.073 -64.5214 li
127.073 -65.1921 126.863 -65.7102 126.438 -66.083 cv
126.014 -66.4523 125.415 -66.6369 124.644 -66.6369 cv
124.206 -66.6369 123.753 -66.572 123.28 -66.4393 cv
122.81 -66.3064 122.324 -66.1054 121.825 -65.8398 cv
121.786 -67.6409 li
122.376 -67.8841 122.953 -68.059 123.523 -68.1724 cv
124.093 -68.2858 124.666 -68.3442 125.24 -68.3442 cv
126.723 -68.3442 127.802 -67.9845 128.482 -67.2684 cv
129.163 -66.5496 129.503 -65.4123 129.503 -63.8575 cv
cp
125.748 -72.834 mo
127.97 -72.834 li
125.065 -69.4162 li
123.86 -69.4162 li
cp
135.642 -71.2953 mo
135.642 -68.0882 li
138.016 -68.0882 li
138.016 -66.2287 li
135.642 -66.2287 li
135.642 -61.9104 li
135.642 -61.1751 135.755 -60.6504 135.985 -60.3295 cv
136.212 -60.0089 136.584 -59.8502 137.103 -59.8502 cv
137.236 -59.8502 137.385 -59.8632 137.55 -59.8924 cv
137.715 -59.9213 137.89 -59.9636 138.071 -60.0219 cv
138.11 -58.2466 li
137.832 -58.1721 137.543 -58.1139 137.245 -58.0782 cv
136.95 -58.0391 136.656 -58.0198 136.364 -58.0198 cv
135.198 -58.0198 134.366 -58.3081 133.857 -58.885 cv
133.351 -59.4581 133.099 -60.4171 133.099 -61.7582 cv
133.099 -66.2287 li
131.152 -66.2287 li
131.152 -68.0882 li
133.212 -68.0882 li
133.212 -70.479 li
cp
140.035 -68.0882 mo
142.558 -68.0882 li
142.558 -58.237 li
140.035 -58.237 li
cp
140.035 -72.5003 mo
142.558 -72.5003 li
142.558 -70.0512 li
140.035 -70.0512 li
cp
152.798 -67.8419 mo
152.6 -65.8593 li
152.15 -66.0376 151.768 -66.1641 151.45 -66.2414 cv
151.136 -66.3225 150.858 -66.3613 150.618 -66.3613 cv
149.669 -66.3613 148.904 -66.0699 148.324 -65.4869 cv
147.744 -64.9069 147.456 -64.1393 147.456 -63.1899 cv
147.456 -62.2409 147.744 -61.4668 148.324 -60.8641 cv
148.904 -60.2649 149.656 -59.9636 150.579 -59.9636 cv
150.912 -59.9636 151.253 -60.0154 151.6 -60.1158 cv
151.943 -60.2161 152.331 -60.3814 152.762 -60.6081 cv
152.856 -58.5868 li
152.153 -58.347 151.606 -58.1851 151.211 -58.104 cv
150.816 -58.023 150.443 -57.981 150.096 -57.981 cv
148.489 -57.981 147.207 -58.4603 146.248 -59.4193 cv
145.289 -60.3783 144.809 -61.6544 144.809 -63.2483 cv
144.809 -64.7224 145.305 -65.9404 146.293 -66.9025 cv
147.284 -67.8646 148.545 -68.3442 150.077 -68.3442 cv
150.641 -68.3442 151.386 -68.2178 152.315 -67.9652 cv
152.529 -67.9065 152.691 -67.868 152.798 -67.8419 cv
cp
159.863 -62.947 mo
158.83 -62.947 158.056 -62.8044 157.534 -62.5161 cv
157.013 -62.2279 156.75 -61.797 156.75 -61.227 cv
156.75 -60.7995 156.899 -60.4494 157.197 -60.1807 cv
157.492 -59.9117 157.884 -59.7756 158.363 -59.7756 cv
159.06 -59.7756 159.63 -60.0219 160.081 -60.5109 cv
160.531 -61.0033 160.754 -61.6383 160.754 -62.4158 cv
160.754 -62.947 li
cp
163.184 -63.8575 mo
163.184 -58.237 li
160.945 -58.237 li
160.906 -59.834 li
160.495 -59.2248 160.009 -58.7651 159.446 -58.4507 cv
158.882 -58.1366 158.253 -57.981 157.566 -57.981 cv
156.579 -57.981 155.782 -58.2693 155.173 -58.8493 cv
154.567 -59.4289 154.262 -60.1773 154.262 -61.094 cv
154.262 -62.189 154.696 -63.0119 155.561 -63.5593 cv
156.43 -64.107 157.725 -64.3791 159.455 -64.3791 cv
160.754 -64.3791 li
160.754 -64.5214 li
160.754 -65.1921 160.544 -65.7102 160.119 -66.083 cv
159.695 -66.4523 159.095 -66.6369 158.324 -66.6369 cv
157.887 -66.6369 157.434 -66.572 156.961 -66.4393 cv
156.491 -66.3064 156.005 -66.1054 155.506 -65.8398 cv
155.467 -67.6409 li
156.057 -67.8841 156.634 -68.059 157.204 -68.1724 cv
157.774 -68.2858 158.347 -68.3442 158.921 -68.3442 cv
160.404 -68.3442 161.483 -67.9845 162.163 -67.2684 cv
162.844 -66.5496 163.184 -65.4123 163.184 -63.8575 cv
cp
172.196 -67.7835 mo
172.005 -65.9146 li
171.571 -66.1411 171.14 -66.3129 170.715 -66.4263 cv
170.291 -66.5396 169.87 -66.598 169.452 -66.598 cv
168.999 -66.598 168.649 -66.5201 168.406 -66.3647 cv
168.163 -66.2091 168.04 -65.9889 168.04 -65.6975 cv
168.04 -65.2601 168.555 -64.8131 169.585 -64.3595 cv
169.699 -64.3076 169.786 -64.2688 169.841 -64.2461 cv
170.9 -63.7764 171.626 -63.3164 172.024 -62.8628 cv
172.423 -62.4124 172.624 -61.8523 172.624 -61.1881 cv
172.624 -60.2518 172.251 -59.51 171.503 -58.9626 cv
170.758 -58.415 169.74 -58.1429 168.448 -58.1429 cv
167.904 -58.1429 167.376 -58.1851 166.858 -58.2724 cv
166.342 -58.3569 165.853 -58.4799 165.393 -58.6452 cv
165.535 -60.592 li
166.002 -60.3587 166.482 -60.1807 166.971 -60.0639 cv
167.463 -59.9474 167.949 -59.889 168.429 -59.889 cv
168.927 -59.889 169.316 -59.9732 169.592 -60.1419 cv
169.867 -60.3068 170.003 -60.5401 170.003 -60.838 cv
170.003 -61.3242 169.352 -61.8942 168.05 -62.5453 cv
168.001 -62.5745 li
167.029 -63.0573 166.371 -63.5012 166.028 -63.9125 cv
165.688 -64.3238 165.516 -64.8227 165.516 -65.4123 cv
165.516 -66.2772 165.882 -66.9836 166.611 -67.5275 cv
167.343 -68.0721 168.302 -68.3442 169.491 -68.3442 cv
169.809 -68.3442 170.159 -68.3051 170.544 -68.2308 cv
170.933 -68.1528 171.48 -68.0071 172.196 -67.7835 cv
ef
275.774 67.0354 mo
275.6 68.7356 li
275.205 68.5292 274.813 68.3733 274.428 68.2701 cv
274.042 68.167 273.658 68.114 273.278 68.114 cv
272.866 68.114 272.547 68.1845 272.327 68.3263 cv
272.105 68.4674 271.993 68.6679 271.993 68.9329 cv
271.993 69.3309 272.462 69.7376 273.399 70.1498 cv
273.502 70.1971 273.582 70.2326 273.632 70.253 cv
274.595 70.6804 275.256 71.0986 275.618 71.5113 cv
275.98 71.9209 276.163 72.4308 276.163 73.0349 cv
276.163 73.8861 275.824 74.5614 275.144 75.0594 cv
274.466 75.5572 273.54 75.8046 272.365 75.8046 cv
271.87 75.8046 271.389 75.7664 270.918 75.6867 cv
270.449 75.6102 270.005 75.4982 269.586 75.348 cv
269.716 73.5772 li
270.14 73.7892 270.576 73.9513 271.021 74.0574 cv
271.469 74.1631 271.911 74.2164 272.347 74.2164 cv
272.801 74.2164 273.155 74.1396 273.405 73.9865 cv
273.655 73.8363 273.779 73.6242 273.779 73.353 cv
273.779 72.911 273.187 72.3923 272.002 71.8001 cv
271.958 71.7738 li
271.074 71.3347 270.476 70.9307 270.163 70.5566 cv
269.854 70.1824 269.698 69.7289 269.698 69.1925 cv
269.698 68.4056 270.031 67.7633 270.694 67.2681 cv
271.36 66.7732 272.232 66.5257 273.314 66.5257 cv
273.602 66.5257 273.921 66.5611 274.271 66.6289 cv
274.625 66.6995 275.123 66.8321 275.774 67.0354 cv
cp
267.577 70.6067 mo
267.577 75.7193 li
265.541 75.7193 li
265.505 74.2666 li
265.131 74.8204 264.689 75.2388 264.176 75.5246 cv
263.663 75.8106 263.092 75.952 262.467 75.952 cv
261.568 75.952 260.843 75.6898 260.29 75.1623 cv
259.738 74.6348 259.462 73.9542 259.462 73.1202 cv
259.462 72.1241 259.856 71.3758 260.643 70.8777 cv
261.433 70.3797 262.611 70.1322 264.185 70.1322 cv
265.367 70.1322 li
265.367 70.003 li
265.367 69.393 265.175 68.9213 264.789 68.5825 cv
264.403 68.2466 263.858 68.0785 263.157 68.0785 cv
262.759 68.0785 262.346 68.1372 261.916 68.2585 cv
261.489 68.379 261.047 68.5618 260.593 68.8033 cv
260.558 67.1649 li
261.094 66.9441 261.618 66.7848 262.137 66.6819 cv
262.656 66.5787 263.177 66.5257 263.699 66.5257 cv
265.048 66.5257 266.03 66.8525 266.649 67.5039 cv
267.267 68.1582 267.577 69.1925 267.577 70.6067 cv
cp
264.556 71.4345 mo
263.616 71.4345 262.912 71.5646 262.438 71.8268 cv
261.963 72.089 261.725 72.481 261.725 72.9995 cv
261.725 73.3884 261.86 73.7067 262.131 73.9513 cv
262.399 74.1957 262.756 74.3196 263.192 74.3196 cv
263.825 74.3196 264.344 74.0953 264.754 73.6506 cv
265.163 73.2027 265.367 72.6253 265.367 71.9181 cv
265.367 71.4345 li
cp
255.186 62.7449 mo
257.481 62.7449 li
257.481 64.9729 li
255.186 64.9729 li
cp
255.186 66.7584 mo
257.481 66.7584 li
257.481 75.7193 li
255.186 75.7193 li
cp
253.217 66.9824 mo
253.038 68.7858 li
252.628 68.6236 252.28 68.5085 251.992 68.438 cv
251.706 68.3643 251.452 68.3288 251.234 68.3288 cv
250.371 68.3288 249.675 68.5944 249.148 69.1248 cv
248.621 69.652 248.358 70.3505 248.358 71.2136 cv
248.358 72.0771 248.621 72.7815 249.148 73.3294 cv
249.675 73.8745 250.359 74.1486 251.199 74.1486 cv
251.502 74.1486 251.812 74.1016 252.127 74.0103 cv
252.439 73.9187 252.793 73.7685 253.185 73.5621 cv
253.271 75.401 li
252.631 75.619 252.133 75.7664 251.773 75.8401 cv
251.414 75.9138 251.075 75.952 250.76 75.952 cv
249.298 75.952 248.132 75.5158 247.259 74.6439 cv
246.387 73.7713 245.951 72.6106 245.951 71.1609 cv
245.951 69.8201 246.402 68.7121 247.301 67.8367 cv
248.202 66.9617 249.349 66.5257 250.742 66.5257 cv
251.255 66.5257 251.933 66.6405 252.778 66.8704 cv
252.973 66.9234 253.12 66.9588 253.217 66.9824 cv
cp
244.044 70.3828 mo
244.044 75.7193 li
241.723 75.7193 li
241.723 70.8749 li
241.723 70.0469 241.581 69.4369 241.295 69.042 cv
241.009 68.6472 240.564 68.4499 239.96 68.4499 cv
239.315 68.4499 238.802 68.7002 238.422 69.2042 cv
238.042 69.7079 237.854 70.3944 237.854 71.2641 cv
237.854 75.7193 li
235.558 75.7193 li
235.558 66.7584 li
237.656 66.7584 li
237.656 68.3821 li
237.995 67.7721 238.434 67.3095 238.97 66.9971 cv
239.51 66.6819 240.134 66.5257 240.841 66.5257 cv
241.894 66.5257 242.692 66.8525 243.234 67.5039 cv
243.773 68.1582 244.044 69.1186 244.044 70.3828 cv
cp
231.672 70.4358 mo
231.61 69.6756 231.395 69.0862 231.032 68.6622 cv
230.67 68.2407 230.198 68.0284 229.618 68.0284 cv
229.025 68.0284 228.536 68.2407 228.15 68.6622 cv
227.764 69.0862 227.528 69.6756 227.443 70.4358 cv
cp
233.752 71.1431 mo
233.752 71.8682 li
227.443 71.8682 li
227.505 72.6222 227.8 73.2143 228.318 73.6506 cv
228.84 74.0837 229.526 74.3017 230.378 74.3017 cv
230.844 74.3017 231.297 74.2459 231.736 74.1367 cv
232.175 74.0279 232.6 73.8657 233.009 73.6478 cv
233.009 75.4157 li
232.573 75.5954 232.102 75.7281 231.595 75.8194 cv
231.088 75.9078 230.546 75.952 229.971 75.952 cv
228.474 75.952 227.305 75.522 226.462 74.6611 cv
225.619 73.8011 225.198 72.6077 225.198 71.0841 cv
225.198 69.7257 225.607 68.6267 226.426 67.7868 cv
227.248 66.9469 228.315 66.5257 229.635 66.5257 cv
230.935 66.5257 231.946 66.9294 232.668 67.7398 cv
233.389 68.5471 233.752 69.6815 233.752 71.1431 cv
cp
220.872 62.7449 mo
223.167 62.7449 li
223.167 64.9729 li
220.872 64.9729 li
cp
220.872 66.7584 mo
223.167 66.7584 li
223.167 75.7193 li
220.872 75.7193 li
cp
218.96 63.8413 mo
218.803 65.7833 li
218.621 65.7153 li
217.483 65.2881 216.593 65.0761 215.954 65.0761 cv
214.607 65.0761 213.532 65.4945 212.724 66.3284 cv
211.92 67.1621 211.516 68.273 211.516 69.658 cv
211.516 70.9719 211.932 72.036 212.763 72.8524 cv
213.597 73.6684 214.693 74.0781 216.057 74.0781 cv
216.514 74.0781 217.197 73.9187 218.114 73.6035 cv
218.435 73.4944 218.677 73.4179 218.839 73.3708 cv
219.045 75.3125 li
218.895 75.3539 218.674 75.4129 218.379 75.4951 cv
217.268 75.8106 216.426 75.9696 215.851 75.9696 cv
213.738 75.9696 212.07 75.4041 210.85 74.2694 cv
209.63 73.135 209.02 71.6 209.02 69.658 cv
209.02 67.7191 209.633 66.1544 210.856 64.9669 cv
212.079 63.7795 213.7 63.1839 215.721 63.1839 cv
216.349 63.1839 217.197 63.3404 218.267 63.6497 cv
218.585 63.7381 218.815 63.7999 218.96 63.8413 cv
cp
201.934 67.0354 mo
201.76 68.7356 li
201.365 68.5292 200.973 68.3733 200.587 68.2701 cv
200.201 68.167 199.818 68.114 199.438 68.114 cv
199.025 68.114 198.707 68.1845 198.486 68.3263 cv
198.265 68.4674 198.153 68.6679 198.153 68.9329 cv
198.153 69.3309 198.621 69.7376 199.559 70.1498 cv
199.662 70.1971 199.741 70.2326 199.792 70.253 cv
200.755 70.6804 201.415 71.0986 201.778 71.5113 cv
202.14 71.9209 202.323 72.4308 202.323 73.0349 cv
202.323 73.8861 201.984 74.5614 201.303 75.0594 cv
200.626 75.5572 199.7 75.8046 198.524 75.8046 cv
198.029 75.8046 197.549 75.7664 197.078 75.6867 cv
196.609 75.6102 196.164 75.4982 195.746 75.348 cv
195.875 73.5772 li
196.3 73.7892 196.736 73.9513 197.181 74.0574 cv
197.629 74.1631 198.071 74.2164 198.507 74.2164 cv
198.961 74.2164 199.314 74.1396 199.565 73.9865 cv
199.815 73.8363 199.939 73.6242 199.939 73.353 cv
199.939 72.911 199.346 72.3923 198.162 71.8001 cv
198.118 71.7738 li
197.234 71.3347 196.636 70.9307 196.323 70.5566 cv
196.014 70.1824 195.858 69.7289 195.858 69.1925 cv
195.858 68.4056 196.191 67.7633 196.854 67.2681 cv
197.52 66.7732 198.392 66.5257 199.473 66.5257 cv
199.762 66.5257 200.08 66.5611 200.431 66.6289 cv
200.784 66.6995 201.282 66.8321 201.934 67.0354 cv
cp
193.736 70.6067 mo
193.736 75.7193 li
191.7 75.7193 li
191.665 74.2666 li
191.29 74.8204 190.848 75.2388 190.336 75.5246 cv
189.823 75.8106 189.251 75.952 188.626 75.952 cv
187.728 75.952 187.003 75.6898 186.449 75.1623 cv
185.898 74.6348 185.621 73.9542 185.621 73.1202 cv
185.621 72.1241 186.016 71.3758 186.803 70.8777 cv
187.592 70.3797 188.771 70.1322 190.345 70.1322 cv
191.526 70.1322 li
191.526 70.003 li
191.526 69.393 191.335 68.9213 190.949 68.5825 cv
190.563 68.2466 190.017 68.0785 189.316 68.0785 cv
188.918 68.0785 188.506 68.1372 188.076 68.2585 cv
187.648 68.379 187.206 68.5618 186.753 68.8033 cv
186.717 67.1649 li
187.254 66.9441 187.778 66.7848 188.297 66.6819 cv
188.815 66.5787 189.337 66.5257 189.858 66.5257 cv
191.208 66.5257 192.189 66.8525 192.808 67.5039 cv
193.427 68.1582 193.736 69.1925 193.736 70.6067 cv
cp
190.716 71.4345 mo
189.776 71.4345 189.072 71.5646 188.597 71.8268 cv
188.123 72.089 187.884 72.481 187.884 72.9995 cv
187.884 73.3884 188.02 73.7067 188.291 73.9513 cv
188.559 74.1957 188.915 74.3196 189.352 74.3196 cv
189.985 74.3196 190.504 74.0953 190.913 73.6506 cv
191.323 73.2027 191.526 72.6253 191.526 71.9181 cv
191.526 71.4345 li
cp
181.345 62.4946 mo
183.641 62.4946 li
183.641 75.7193 li
181.345 75.7193 li
cp
172.264 70.4358 mo
172.202 69.6756 171.987 69.0862 171.624 68.6622 cv
171.262 68.2407 170.79 68.0284 170.21 68.0284 cv
169.618 68.0284 169.129 68.2407 168.743 68.6622 cv
168.357 69.0862 168.121 69.6756 168.035 70.4358 cv
cp
174.345 71.1431 mo
174.345 71.8682 li
168.035 71.8682 li
168.098 72.6222 168.392 73.2143 168.911 73.6506 cv
169.432 74.0837 170.119 74.3017 170.97 74.3017 cv
171.436 74.3017 171.889 74.2459 172.329 74.1367 cv
172.767 74.0279 173.192 73.8657 173.602 73.6478 cv
173.602 75.4157 li
173.165 75.5954 172.694 75.7281 172.187 75.8194 cv
171.681 75.9078 171.138 75.952 170.564 75.952 cv
169.067 75.952 167.897 75.522 167.054 74.6611 cv
166.211 73.8011 165.79 72.6077 165.79 71.0841 cv
165.79 69.7257 166.2 68.6267 167.019 67.7868 cv
167.841 66.9469 168.908 66.5257 170.228 66.5257 cv
171.527 66.5257 172.538 66.9294 173.26 67.7398 cv
173.982 68.5471 174.345 69.6815 174.345 71.1431 cv
cp
161.447 62.4946 mo
163.742 62.4946 li
163.742 75.7193 li
161.671 75.7193 li
161.671 73.9131 li
161.309 74.5642 160.858 75.0503 160.315 75.3743 cv
159.773 75.6958 159.149 75.8579 158.432 75.8579 cv
157.333 75.8579 156.429 75.4129 155.718 74.5228 cv
155.008 73.6359 154.652 72.4867 154.652 71.0841 cv
154.652 69.7198 154.996 68.618 155.683 67.7809 cv
156.373 66.9441 157.271 66.5257 158.382 66.5257 cv
159.06 66.5257 159.652 66.6553 160.156 66.9146 cv
160.66 67.174 161.09 67.5689 161.447 68.0964 cv
cp
159.142 68.2611 mo
158.521 68.2611 158.017 68.5292 157.628 69.0687 cv
157.239 69.6047 157.044 70.3151 157.044 71.1961 cv
157.044 72.089 157.236 72.7934 157.622 73.3147 cv
158.008 73.8363 158.535 74.0953 159.201 74.0953 cv
159.876 74.0953 160.415 73.8334 160.822 73.3087 cv
161.226 72.7872 161.429 72.083 161.429 71.1961 cv
161.429 70.2856 161.226 69.5696 160.816 69.048 cv
160.41 68.5236 159.85 68.2611 159.142 68.2611 cv
.65 .62 .8 rgb
ef
249.081 43.3375 mo
251.376 43.3375 li
251.376 56.5619 li
249.304 56.5619 li
249.304 54.7557 li
248.942 55.4068 248.491 55.893 247.949 56.2172 cv
247.407 56.5384 246.782 56.7005 246.066 56.7005 cv
244.967 56.7005 244.063 56.2558 243.352 55.3657 cv
242.642 54.4785 242.285 53.3296 242.285 51.927 cv
242.285 50.5627 242.63 49.4606 243.317 48.6238 cv
244.006 47.787 244.905 47.3683 246.016 47.3683 cv
246.694 47.3683 247.286 47.4981 247.79 47.7572 cv
248.294 48.0169 248.724 48.4118 249.081 48.939 cv
cp
246.776 49.104 mo
246.155 49.104 245.651 49.3721 245.262 49.9113 cv
244.873 50.4476 244.678 51.158 244.678 52.0387 cv
244.678 52.9316 244.87 53.636 245.256 54.1573 cv
245.642 54.6792 246.169 54.9382 246.835 54.9382 cv
247.51 54.9382 248.049 54.676 248.456 54.1516 cv
248.859 53.6301 249.063 52.9256 249.063 52.0387 cv
249.063 51.1285 248.859 50.4124 248.45 49.8909 cv
248.043 49.3662 247.483 49.104 246.776 49.104 cv
cp
240.311 51.4494 mo
240.311 56.5619 li
238.275 56.5619 li
238.24 55.1095 li
237.866 55.6633 237.424 56.0817 236.911 56.3675 cv
236.398 56.6532 235.827 56.7947 235.202 56.7947 cv
234.303 56.7947 233.578 56.5327 233.024 56.0049 cv
232.473 55.4777 232.197 54.7971 232.197 53.9631 cv
232.197 52.967 232.591 52.2187 233.378 51.7206 cv
234.168 51.2226 235.346 50.9748 236.92 50.9748 cv
238.101 50.9748 li
238.101 50.8456 li
238.101 50.2356 237.91 49.7642 237.524 49.4251 cv
237.138 49.0892 236.593 48.9214 235.891 48.9214 cv
235.494 48.9214 235.081 48.9801 234.651 49.1011 cv
234.224 49.2219 233.782 49.4047 233.328 49.646 cv
233.293 48.0078 li
233.829 47.787 234.353 47.6277 234.872 47.5248 cv
235.391 47.4213 235.912 47.3683 236.434 47.3683 cv
237.783 47.3683 238.764 47.6954 239.383 48.3468 cv
240.002 49.0011 240.311 50.0352 240.311 51.4494 cv
cp
237.291 52.2774 mo
236.351 52.2774 235.647 52.4072 235.172 52.6697 cv
234.698 52.9316 234.459 53.3236 234.459 53.8421 cv
234.459 54.2313 234.595 54.5493 234.866 54.794 cv
235.134 55.0386 235.491 55.1622 235.927 55.1622 cv
236.56 55.1622 237.079 54.9382 237.488 54.4935 cv
237.898 54.0456 238.101 53.4682 238.101 52.761 cv
238.101 52.2774 li
cp
227.903 43.3375 mo
230.199 43.3375 li
230.199 56.5619 li
228.127 56.5619 li
228.127 54.7557 li
227.765 55.4068 227.314 55.893 226.772 56.2172 cv
226.229 56.5384 225.605 56.7005 224.889 56.7005 cv
223.79 56.7005 222.885 56.2558 222.175 55.3657 cv
221.465 54.4785 221.108 53.3296 221.108 51.927 cv
221.108 50.5627 221.453 49.4606 222.139 48.6238 cv
222.829 47.787 223.728 47.3683 224.839 47.3683 cv
225.516 47.3683 226.108 47.4981 226.613 47.7572 cv
227.116 48.0169 227.547 48.4118 227.903 48.939 cv
cp
225.599 49.104 mo
224.977 49.104 224.473 49.3721 224.084 49.9113 cv
223.695 50.4476 223.501 51.158 223.501 52.0387 cv
223.501 52.9316 223.692 53.636 224.078 54.1573 cv
224.464 54.6792 224.992 54.9382 225.658 54.9382 cv
226.332 54.9382 226.872 54.676 227.278 54.1516 cv
227.682 53.6301 227.885 52.9256 227.885 52.0387 cv
227.885 51.1285 227.682 50.4124 227.272 49.8909 cv
226.866 49.3662 226.306 49.104 225.599 49.104 cv
cp
216.697 43.5878 mo
218.992 43.5878 li
218.992 45.8155 li
216.697 45.8155 li
cp
216.697 47.6013 mo
218.992 47.6013 li
218.992 56.5619 li
216.697 56.5619 li
cp
214.357 47.8783 mo
214.183 49.5785 li
213.788 49.3721 213.397 49.2159 213.011 49.1128 cv
212.625 49.0096 212.241 48.9569 211.861 48.9569 cv
211.449 48.9569 211.131 49.0274 210.91 49.1689 cv
210.688 49.3101 210.577 49.5107 210.577 49.7758 cv
210.577 50.1735 211.045 50.5803 211.982 50.9927 cv
212.085 51.04 212.165 51.0755 212.215 51.0959 cv
213.179 51.5233 213.839 51.9415 214.201 52.3542 cv
214.563 52.7638 214.746 53.2735 214.746 53.8775 cv
214.746 54.729 214.407 55.404 213.727 55.902 cv
213.049 56.3998 212.124 56.6475 210.948 56.6475 cv
210.453 56.6475 209.973 56.609 209.501 56.5296 cv
209.032 56.4531 208.587 56.3408 208.169 56.1906 cv
208.299 54.4198 li
208.723 54.6318 209.159 54.794 209.604 54.9003 cv
210.052 55.006 210.494 55.059 210.93 55.059 cv
211.384 55.059 211.737 54.9825 211.988 54.8294 cv
212.239 54.6792 212.362 54.4668 212.362 54.1959 cv
212.362 53.7539 211.77 53.2352 210.585 52.643 cv
210.542 52.6164 li
209.657 52.1773 209.059 51.7734 208.747 51.3995 cv
208.437 51.0253 208.281 50.5715 208.281 50.0352 cv
208.281 49.2483 208.614 48.6059 209.277 48.111 cv
209.943 47.6161 210.815 47.3683 211.897 47.3683 cv
212.186 47.3683 212.504 47.4038 212.855 47.4715 cv
213.208 47.5424 213.706 47.675 214.357 47.8783 cv
cp
207.194 47.4715 mo
207.108 49.5431 li
206.987 49.5017 206.861 49.4722 206.728 49.4518 cv
206.596 49.4311 206.457 49.422 206.313 49.422 cv
205.553 49.422 204.975 49.6729 204.577 50.1766 cv
204.18 50.6806 203.982 51.4139 203.982 52.3746 cv
203.982 56.5619 li
201.687 56.5619 li
201.687 47.6013 li
203.749 47.6013 li
203.749 49.3869 li
204.038 48.7207 204.401 48.2201 204.842 47.8868 cv
205.282 47.5543 205.8 47.3862 206.398 47.3862 cv
206.504 47.3862 206.619 47.3921 206.746 47.4069 cv
206.873 47.4213 207.02 47.442 207.194 47.4715 cv
cp
197.8 51.2787 mo
197.738 50.5185 197.523 49.9291 197.16 49.5048 cv
196.798 49.0836 196.327 48.871 195.746 48.871 cv
195.154 48.871 194.665 49.0836 194.279 49.5048 cv
193.892 49.9291 193.657 50.5185 193.572 51.2787 cv
cp
199.88 51.986 mo
199.88 52.7108 li
193.572 52.7108 li
193.633 53.4651 193.928 54.0572 194.447 54.4935 cv
194.968 54.9266 195.655 55.1446 196.506 55.1446 cv
196.972 55.1446 197.426 55.0885 197.865 54.9796 cv
198.304 54.8705 198.728 54.7086 199.138 54.4904 cv
199.138 56.2583 li
198.701 56.4383 198.23 56.5707 197.724 56.6623 cv
197.217 56.7507 196.674 56.7947 196.1 56.7947 cv
194.603 56.7947 193.433 56.3646 192.59 55.504 cv
191.748 54.6437 191.326 53.4503 191.326 51.927 cv
191.326 50.5684 191.736 49.4694 192.555 48.6297 cv
193.377 47.7898 194.444 47.3683 195.764 47.3683 cv
197.063 47.3683 198.074 47.772 198.796 48.5824 cv
199.518 49.3897 199.88 50.5241 199.88 51.986 cv
cp
181.484 47.6013 mo
183.954 47.6013 li
186.096 54.4904 li
188.288 47.6013 li
190.584 47.6013 li
187.328 56.5619 li
184.679 56.5619 li
cp
177.669 43.5878 mo
179.964 43.5878 li
179.964 45.8155 li
177.669 45.8155 li
cp
177.669 47.6013 mo
179.964 47.6013 li
179.964 56.5619 li
177.669 56.5619 li
cp
175.193 51.2257 mo
175.193 56.5619 li
172.871 56.5619 li
172.871 51.7178 li
172.871 50.8898 172.73 50.2795 172.444 49.8846 cv
172.158 49.4901 171.713 49.2928 171.109 49.2928 cv
170.464 49.2928 169.951 49.5431 169.571 50.0468 cv
169.191 50.5508 169.002 51.2373 169.002 52.1067 cv
169.002 56.5619 li
166.707 56.5619 li
166.707 47.6013 li
168.805 47.6013 li
168.805 49.2247 li
169.144 48.6147 169.583 48.1521 170.119 47.8397 cv
170.659 47.5248 171.283 47.3683 171.99 47.3683 cv
173.042 47.3683 173.841 47.6954 174.383 48.3468 cv
174.922 49.0011 175.193 49.9615 175.193 51.2257 cv
cp
154.19 44.295 mo
156.606 44.295 li
156.606 51.4848 li
156.606 52.6753 156.806 53.5507 157.207 54.1046 cv
157.605 54.6613 158.232 54.9382 159.084 54.9382 cv
159.941 54.9382 160.59 54.6406 161.026 54.0456 cv
161.465 53.4503 161.683 52.5662 161.683 51.3995 cv
161.683 44.295 li
163.961 44.295 li
163.961 51.417 li
163.961 53.2117 163.551 54.561 162.732 55.4598 cv
161.91 56.3615 160.684 56.8125 159.048 56.8125 cv
157.443 56.8125 156.231 56.3675 155.415 55.4746 cv
154.599 54.5819 154.19 53.2647 154.19 51.5202 cv
cp
ef
145.225 66.6923 mo
-.442047 66.6923 li
-.442047 1.4137 li
145.225 1.4137 li
145.225 66.6923 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 386.442 98.4436 ]ct
[147.423 0 0 66.7792 -387.887 31.0011 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 196
/H 89
/M[196 0 0 -89 0 89 ]
/BC 8
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 196 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 196 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 196 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
NW8qUrr)io!;u9^rqucorViJia8c):rr)iomJHn\rr)fpjo9r4rr;lplM^SYWW0X2r;Q]orVZ*\rquco
rVl<dK)bQEr;Q]orqu0\rqucorVj8*Y5eCulM^SYq>Z'Hnc/Re%K68'r;6Bfq>'g[p\+=Vp%\.ip%A%P
p\=R[qYU3grVc`p`W*%>rVd9)rVZTjqYL$_p\4CSp&=UTo*4jZp%A%Qp]gQjqtp<irVleTs5a4Xrr2lp
r;QTgqY9mbqZ$Hmr;QZnrm1VAs8N!1rVcZkqtg-`p\+:PoCDG@n*]TBm.ouHlMTo[lg4$,n*ol=o_%tR
q>:*grVlebs5F"VrY>D1r;6Bfq"XRUo^hYDnF,c2m-Es%ros4A!9a@F''\]Im-X92o(2MIq"ad`r;HWo
huB,ErVd6(rVZTjqtg0bq=saZrq??a!;5mS%JBDfp@n@Xq>1!cr;HTnrhTSJs8N!8rVcZkqYBp\p@\%J
naGo4lg!`ukN:mejQ$7!qr.D0ro"OMj5f=bkj%L$n+$#Bp\F^arVlf`s-<W`rX\u+r;6?dq"FCPo'l,8
m-4l@ki_*hj5]+Wro!_3p>-M@hr3STjQ>[jm-X<5o_8.Wr;HWoZiA;MrVdH.rVZTjqYL$_q"OLTp%7nJ
o()eMq=+(G'(GG]o()DEp%J.Tq>1!drVc`pp]$9Rrr*3%rVZQgq"OLS'_:e_md06'kiV!fio8nShqm5G
gt_h^r7_##rRqt?gtgiFiT'%^l0Rj.oChtUr;HWo_>hUVrr*o9r;6?dq"FCPnaGo4lKIEmjPo.Uhqd,D
gY1?6rRh&"r7:bq&_>Rdf\5*9hVdDSk3D@&o(D_[qYU6jreLLRs8N!4rVcZlqtg0bq"OLTo^h\FnaZ,<
n*g8DqsF+DrTjILrp:9bn*oi:o(2PKq"agbr;HWobQ#BX)#jO5rVQHeq"F@OnaGl3lKIBljPo.Vhqn@g
rnID*s4RG)qq(Gjrmqb8g"Y<=iT'(bm-sT>q"jperfmH[s8N!:rVZQhq=jRRnaGl3l0.9jio/eOh:p]<
g"G!/rmq%u!7^trr6kSl!7L\j'[kFZeCN7)gYUoLkN_L*p%S=\rVl*^U]:>m'`J".qtp6cq"OLTo^h\F
naQ&:mdC)Aqs==JqWdtBrTa=Fs6BUL%.*BLnF6#?p@nCZr;HWoYlE__)?0X6rVZQgq"F@Nna>c/l0%0h
io/hQhVI#eh#?(.gAKY%f_jA!f)4(seGIc-f%8R-gu%)Pkj7g1p\FacrqHG`ru1n9rVZQhq=jRRnaGl1
l0%0giS`SKgtUQ9f`0V'f)XD#ebmqqe,.SldJVAkchu-%dF$Fmf%Jj9io]Ooo(MnVrVjM1ec-6\rr)fn
qtp3ap\+:Qo^_SCnG_kVmelJOm/-,ClM'Q@kkaNRlKdg(mdTc<p%S:Zr;HTprg*Qsrr2loqtg*^p%._A
m-<iujl>>)i8EMLhVI#eh#?(+gABS%f_a:uf)=.reGn"pe.1']f\>9Ajlu1'pA+UarlY8ertk\6rVZQh
q"F@Nn*TH)k2bO\hqm/Dg=lPZs4I>&rRUnsr7(\or6kMjrQtJg!7(Jf!7;8)e_&X5j6,ato_A=^rg3Za
rWE,sr;-p!q=s[Vo^hYDnaQ#9rpK^OrTs=FpZhM;q<.hCrTFdVl0@U$mdTf=pA"L^rVlfHs2Y-Srr2lo
qt^$\o^_M=lfmTojPo.Vhr"Fis5!Y/p"T>sr7V)%rR_&"!7h(us4$hm&(K+[f%Ad8j6,e!p%eOargs,i
rY>G3rVZNfp\"+Hmd03$jl>=XhVHr@rRq8)rRghqqpki!e^j`Mrm^qrrmLhorm:Viq9BMscdC4lf\GHI
lL4B?qu-NRs1A=1rX\u*qtg-`p\+7OoCDG@nF-;Cs6].=q!7eA!9s=Croa4C%-d'Cm-aB7pA"L^rVi_p
q>V--rr)clq=jRRnaGi0kiV!eio/hphuDR+h>H.$hu;I4h>Z40g],t,f`'J$eH"+se,RkqdgagVf%8X4
io]UtpA+Xcmf0Zo'`S+1r;-6_o^_J<lKIBkio&\Lgt_n`s4[2"rS%8*qqV,)rS.>)$/!k\f$r3uda?J@
d/;2hc2Putcd1"ff%T$BlL=KBr;O)'mJd^rrr)fnqtg-`p\"1Mo'u5Kn,2VDmJH>In,2VRmJZAOli$,H
l2TuFkPXNOl0@X'nFQ>Jqu$Hmq>[Pr'`S+1r;6<ap%.\@m-<fsjQ#7Yi8FLir8.D0"lSA!ioB)!jT"?@
k5OQ?kl9iFjpgD4j5T%Uhqm/Cg=Y'0rmh"tr6kSn%+NhYg"kZNmIU)LrVjY5k5Q+orr)ckq=jOOn*K?&
k2YIYhVI#eh#,q*g'ufkgtgfChr!AMiSieVroF"=r8naUjlGL_io/hQh;-i>g"4g*e'cXjd/MAhc2Pun
cdC1kg>D#X"S)6`rViYnrr*?)r;6?dp\+:PoCDG@rU9LKrU0[RrUBgVr:9RQrpgNgnaQ&:n*]W2m-O''
lM]uIkksWBkR-S>lg=35pA+Uarlb>urtGD2rVZQgp\".Jmd06%jlGI]iSj^mrSRV4(?+95jQ,FbkNV6r
lg*p)mdBQ4nF5u<qXPHmnaQ&:n*]T0lg!]sk2bR]hqd&?f[n^Re,n+Jdf7bpdgO[Tf%Jp?l0n<@r;N_r
')qn/r;-6_o^_J<lKI?iiS`VMrnRS0qqV2,'].a*iSihXjlYail0@U#m-X6/n*fu>)Xm._mHj0(l0.9k
j5JnPgtLE3eC)akcd0n^rltGf$d[2Je_9!Fme$>Qrn.8!s8N!,rVZQhq"OLTo^hYDnF6;Cr9jRQ!:^!X
s760\s7H?arq?<bpA"U\%/0Dfp%7nJo'u5<n*L2Dlg+Q7rTO7DrTFUQl0Rj.oCr+Zrr0#!%K?A*qtg*]
oC;88lKIC1jT"6<iV_UMiSihWjQ5Oel0@U$mI'K6o(2JGp%J+RrV69c!;cWhrqI3%p@\+NoCDD=mHa$"
jPo+RgY(30rm^tss3gnq$ImVXgYh5]oD&7_p&DT&'E7t.qt^!Zo'bu2kiUsci8<GKhYZ+KhVR/Ii8N_W
jlYdklg4$,nF?&>oCV_Kp@n=Vq#C-cq>L((p\4CSo^hYDnF,c1l0%-ehqd#<e^MqFci;;jc2Puqcd:.m
h;mklp\Xs%s761!rr2loqtg-`p@\(Lo'u_Kp[A+N%e9)[oCV\Jp%J+Rq"X[\rVHNjo)/I`'DhS$q=s^X
p%7nIo'l,8m-Es$l2BiGkPaTOl0@X(o(MnVrVli%rt,2/rVZQgp@RqEmH`uujlGJ$ir%aMio9"ZjlYai
lKmp+nF?)@p%J.Tq>('erql]mn,<7`)Z0F.q=s^Xp%._BmHWlriniJDf@JI$e'lanrmM2'f%Ag=lLFWG
rQ"s(rt>>1rVZNep%.\@lfmQmio/hQhtu7Khr!ANioK4akiqF#mdK]:o_%qPq"aa^qYU0hr:'[ar#P\3
qYBs^p\"1LnEoQ*jl5.Pg""R!cd0n^c-=PZ$dR)GeCrjDnFlbXriuJ5rr2lpr;6?cp\"1Mo()>KnGVe_
nF5u<o()DDo^qe^p@n@Xq>0sbqu6NkrTsO]r=]&+qtg0bq"OIRo'u5;mHa'%l2KoHkPaTMl0Id,o_A=^
rmLi+rt#,-rVQHcp%.\@lfmTojlHF$rSeUQj5f=akiqC!mI0Q8o_%qPq"ad`r;?Qmq>Tj_qu6Tn$iKnu
q=jUTo'br/jTac&gt:3.eG@W"eCN@4kj\<CrNuS9rr)clq=jOPn*K<%jl>@Yi;;C6i8ESR'BA3;l0@X&
n+#u@p%J1VqYL*er;QZkrpTmarY>D1r;?Hgq=jRRna5W(j58YEe^MplqT]Dne(<L>me-JUrnmb,rso&-
rVZQhq=s[Vo^_SCnbDSbnaZ2AoCV_Lp\4IYqYU0fr;QZkroX7YrW)m.rVcZkqYBp\p@IkEmd09)l1sNK
l0@X)oCr+[rjMh=rr)clq=jOOn*KB(kN1dcj5^*u($+H;kNM3tmI0T9o_%tRq>1!cr;HTmrnRPPrXo,-
r;6?cp@Ie@l/gm\g=Op*qpPi#f%T$Dn+QYWlMo31&H;\-r;-3^oC2/5kiUsciSj[l(#e04jQ>Xjlg=02
o(;YMq"jmbr;HTlroX7Us8Dp/rVcZkq=jRQmd'#qhV-Q0dEh^8#g^oLh;mtrqYdo'rr*#ur;69nq"FFR
oCDkMqsY*co()DEp%J.Tq"ad`qu$Hlr;P=Jrr*E+rVZTiq=s[To'l)6lKS-.#O1UCoCr+[rq6<2rt#,.
rVZNep@IhBm-3`rjlQF$'BS?<kNM3smI0T:p%J1VqYU3hrVc`\s6'F]rXSo)qYBjVnEf>uhqH`6eGRc$
eCN:/k3r$@rk/7Bs8N#rqt^!Zo'br1kN:gbiqq[JioB._kj%L%n+-)Cp\=U^r;?NlrVk4E&cVe.rVQHd
p%%P8jl"qGe'ZM>c3VbDe_K6Qp&"a"rs\o+rVZQhq=jUUo^hYLnIY9^oCMVIp@n@XqYL*er;HTmrq$0E
s8N!+rVcZjq=jRRnF#Z.l2'TKl0Id/p\Ojfa8bo6%K?A*qt^!Zo'l&4l0%4.jo4<RjlYailKdj+nalDH
q"ad`r;HTnrl>$Mrr2loqY9aRmHEWfg=Xs*e,If%eCN:0kOA6DrkACArr2imq=jOOmd03$jlHF#ro"LL
j5f@cl0Ia*nalGJq>1!drVc`pqu=q@&,uS,r;-0[nE]5qgt1$&ci),pcdC:ujR2a=rmUo5rseu,rVZQh
q"OLTo^hYEqsb0eo(2MGp@e7UqYL*erVc]o`;]u>rr)fm#l=>ioC;88lKS30#O1RBoCr.\rkSODrr2im
q=jOOn*K?(kN:q*jUgS:kNM3tmdTf>pA"I\r;?NmrkJICrr2lnq=aCIl/UXSf$r4Kdg4IRf\bo_q#(-K
s5X+hrr)clq"F=KmHa!!jl>D"iXk/2jlYdlmI'N9p%S:Yqu$Elrl>'7rso&-rVQE`na,DsgXaj"ci22q
cdC:uk3r'BrkSO@rr2loqtg*^p@RtTo)A.bo()DDo_%qPp]^Kiqu$EkrVjM1%0$8)r;6<`oC227lKS61
#3kIAoD&4^qZ"\;%0$5'qt]sXnaGi0kihs,&*N->lKdj+nalGJq>1!drVlfRs4[J]rr)ckp@@V7in`8<
eGdo%eCN@4lLXlN_uBc:r<rQ"q"F=KmH`uujlHC#&*2j7kj%O&n+-,Eq"jmcrVlf,rseu,rVZKbna,Dq
g=4NrrltSkdFJHWkOSHI_Z'uBrr)clq=s^Xo^hqM%.j)_p%J.Tq>1!dr;HTnl2T*0rr*3$qt]sWnF#W,
r9+@Lm-sZCr;Oq?qYq$(rVZNep@RnCm-<iukPjTUkND*pm-X94o_/(Uqu$Ekrr05'"oeJuqY'I`m,m3Z
f$s]J#Lq>Zj6ZI9rl4sHrr)ckq"=7ImHWotjo"0NjlYdlm-aB6p%S:Yqu$Elrpg$*rsSi)r;$$TlJp^P
e'J$=#LCfMi9Kt3rn.8=rsSi*rVZNfq"FCQoCMnN%.j)_p%J.Tq>:'erVc`p[f?7)$NC&&qtTjTmd06'
rTFIMm-s`FrVjn<%0$5'qt]sWna>c/l0/-0%d<-@lg4'/o(;YNqYU3hrr2`n[Jq!@rVZKan*/ief[\L#
e'ut)k4&0DroF+AruV1<r;-3]o'bu2kiV!gjQ,FakNV9umdTi@p\F^arVlf2s6ot&rr)`ho^:o"g!nEq
cHabbg>q\rr;Oe;$3'r&r;-6ap@\(WoD\:ioCMVIp@n@XqYU3hrVlirX8`M*rVZNdo^M;6l2BfLlL+6;
qu6$`h>[l^rquZhp@IhCm-Ep6kRQkBm-X<5o_/(Vqu$Elrl4utrtGD1qtK[JjPJP?eC2msf\l&eqYn\<
%0$5'qY9aSnEoN)kN;d*"m5"3lKmpFnFQ>Iq>:*grr/hq'E7t,p@7G-g==TscHaeeh<=J,rqcZBrsA](
rVZQgq"FCQqst0eo_%qPq"ad`r;HWod/V_t$3'r&qtTjSmd'-:kQ^;<n+?GRrltHOrr2lnq=aINmd09)
l2KlVl0@U%n+$#Cq"agbrVlejrseu*q=O(:hq?T1e'ut("Q]"Fr;P"A$i^/'qtTmVnEoQ+kPaNQkNM0s
mdTf?p\F^arVlfLs3(EUrr2ijoBYJme^;^gcdLJ*mJ$PXc2ReC$3'o$qt^$]p%7nSo*P'^p@n@XqYU3h
rr/Vk!ri2s"o7l_md'-:kQU8<nb;q[ci4CPrr)`ip[n"EmHa'9kmcqDmI0T:p%S:Zr;HWoiW$Xl&cVb*
p@%2&g=Fd&eC`[Co_SR=s8)a9rr2lnq=aFLmd'-$kN:pikiqF#nF?/Fq"jperr/hqq#:s*rVH0RjP8>6
cd'kdgun8)rm1TPrr2loqt^$]p@\(MrppHgp%A(Sq>1!drVlf^s0DY0rquWeoBtu0roaONme$>Rro3tI
ru:t9r;-0\o'l&5lg!a!lKdg)nFH5Fq>1$frr0,$m/IXrrVQ?Ykht1GeC3"(jm`'DdJjRQrVQEao^VA9
lKJ61%I!'BmI'N9pA"L]rVlfgs/5l1rr)]emcE9UdEg+cf])>nrVlise,K^QrVZQhq"OLTqt(6gp@n@X
qu$Ekrr1(?ci4OTrVQ?\md03%kiqI(p\Xs=rsJc(r;-3^oC227li-/LlO<.In+$#Cq"jmcrVle^rs&K"
p[IA'fEg$WeC`aHp&"a<rsJc(r;-0[o'br1l2KlUl0@X'nFH8Hq>:*grr1FI_uC8HqtBI=gssfucdgn;
o_\X:rrW3!quuuoq=jUUr:C9fp@n@XqYU3hrr/>crVmB,rVQ?\md'-$kj.a2qYetE)ZKa6qt]sWnaGl3
lg!g%m-aB6o_81Xr;HWoh#Fk`%fZA!n)iKZeC<(+kjnTLg].3O)ZKa6qY9aSnEoQ+kih9qlKms/oChtU
qu-NnUAsc`%fZ@umH!!Mcd1%nk4/9Hec,sTrr)clq=s[Wp&=Rkp%A%Qq"jmcrVc`pk5VO_%fZG(p[[b;
l0.F#oD/=`k5Y#P$3'o#q=jOPn*TK@lO<.In+$#Bp\F^arVless5j7irqlEVjP8>9e_B3Tq#/hE$3'o#
q=aFLmd06<kmZkCmI0W<p\F^arVlfcs.KB$rqc<Rin2]*dFdIHp\jX^kPkherr)clqY9gYqt16hq"ad`
r;HWo[/\k[%K?>&p@7P8kiqI(p\b$DrsA]'r;-3]oC228rp1$[mdK`=pA"L]rVlfks-3NnrVH0PinDu6
f\u2jr;Q]ps5*bmrr)ckp[n"Em-Es$lKdg)nFQ>Jq>:-irkAEXrso#(oBG/`dEpG$lLk)Srn@AWrr2ln
qYBmZr:L?hp\=R\r;?Nm!<.lU#6+Prp$h>4"mP@BpA4dCrttb7rVQEaoC;;:mHj3,mdTf>pA+R_rVlf:
s2+dFrV?$Khq6K3i9L"4rr1aR%K?A)qtTjTnF#Z/lK[[Bm-jK9p%\C]rVleUs8Ds-rr)W]k1nJ6e(s6[
qu6TMrs8W'rVZQgq"OL]oa:Edp\=R]r;HTnrmCbTrsSi(q"*q>l0@^/qYf4L"9/8sq?6Qco'l,Hm0`:N
o(;\Pqu$Elrg*TSrseu*p[7.uf%8gDo_\XehZ!l\rVQEbo^VD;rTagXn+$#Cq"jperr1[PXT&b/r:]O;
f[A7'kOSNLroO1UrtPJ2r;6?cp\+=Rp%J.Sq"jmcrVlegs5j7hrqlH[mHX!)o_JIbro!elrr2lnq=aIN
n*]T1mdKZ:p%S:Zr;HWTs.KB#rqc9PiRlc<kO\QLro!elrr2ilq"=4Imd09*m-X93o_/+Xr;HW+s2k9L
rqc3LhUU*/jmi3Hrnm_\rr2loqt^$]r:UBjq"jmcrVlfqs+LCQrr!3"o^D,2mdp8Prr1mV#laf#qY0[R
nF-AE$1IETp%S:ZrVc`5s1\LArr)W]k2"\GkOSKKro*k_rr)cjp@RnDmJcGRmI0QLo_/(Wr;HVOs7lU&
rquNYj4Vu:jmi3Hro!e]rr)clqY9gZrq6Wlq"ad`r;HWoc2Y*L$i^(uo'Yi3oD/=`ro3q\rr)`ip(-fc
nF,f5n+$#Bp\F^arr/)\m/IImqt014gYV,aqYpKRrtPJ2qtTjUnF#]1mI'H6o_/+Wr;HWHs/5l)rqc6M
h:LECnG<.`kl:P[$3'r&r;-6ap\+=[pBLHiqu$Elrga#IrsSi)qXj7Cmdp8Prr2!Y#QF]"qY9aTnc%t`
nF?,Cp\F^arr1jUS,Wiop[@2!hrjS,rr2Nho)BF'rVZNdo^_J=mHs?1nauPMqu$ElVZ56I$i^(umGcjS
jm`*Fro="krr2lnqYBp\p@e7Uq>1!drVlf]s,d6frqlH[mdB]Ar;Q]ps60Irrr)`ip[n%Hn*fc9o(DbQ
qu$ElYQ)cF$NBnnki(I_o(r@bjo6"nrVQEaoC;;;mI'H5o_/(Vr;HWes+UISrqc-ik2"kTnG3(_jSoD_
rVZQgq#0plq"X^_r;HWo\c9GE$NBtuoC)/>q#(-jk5PYbr;69_o^VqM#k@KXpA+U`rVlcqK)bZH$NBts
m,R'go(r@bkPl4prquWfp%%V@mdBQ6oChtUr;HW4s0Ve5rqlBRiSWbdqYpKVrs&K%rVZNfq#:$fp]^Nk
r;HWoM#ZlB$2s_nnF6&Fr;Q]Zrt>>0r;-0\oC;>>nac>Gq"jperlkD@rsAZ!n)iZpo(r@bkl1_`rVQfp
p[n%GrpL*^oC_kSr;HVXs5O%brV,a@iTKb-rr2*\#6+W#qtg-`rq?Zmq>1!erVlfJs.0/rrqlH]nFQJR
rr20^#6+Suq=jRQrp^6ao_/(Vr;HVrs2P'Frqc3Mk3DR7rr20^')qk,q=aINnF,l:oC_kRqu-Nno)F=A
$NL,$nE8lro(r@bkl1ebrVZQhr:gKlqYU3hrr0D,]Di3:r:opTo_JFarp'Lqrr)`ip@RqGnac>Fp\F^b
rr2fpK)bND$3'hom-3m/qu6T[rt58.qtTjUnaQ&<o(;YOqu$Hm_>gb>$3'hnlK7C'qu6T[rs&K%rVZNf
q>U-jq>0sjr;HWoLB$Q=$3'o"p%.kPrVlf_rs&K%r;-3^o`"CdoC_kRqu$Elb5\=<$3'krmd'<6qu6T]
rr`9"r;$lsp%._Cnac>Gq"jperfI0;rsA]%p$M#1o_\Xeli..frr)ckq>U-nq>1!drVlfGs-`lkrVH9]
pA4aXs82g-rr)ckq"=:Mo(2MIq"jpergEf9rsA]&p[RY@p\b$imJdCirVZKco^`"O#4qN^q>:-ihZ&Z:
$3'krn*KN:r;Q]ps6ostrr)clqYBp]q>'marVc_js2b3ErqlKaq"k!VrrrE#r;-0\rppBep%S:ZrVlf[
s+C=Or<;uenFHAQm/IXrrVQEbo^_PBo(;\Pqu$HmY5c38#6">emd^)Nli.+erVZQhrV6Wnqu$Elrpp)@
s7cNtrquTdq>C6Zrt#,-qt^!Zo^h\IpA"L^rVj;+ZMt.-q=O7NqYfg]"oeJtq=aI[ncna[q"jperqueJ
s6TairV6!So_JIPrri?"r;6?iq$$Wlr;HWo_>gG5#6+Prq>1$gmf*XnrVQEbp%7kJp@nadqu-MKs5Et^
rVH6\q"t'Yrso&,qtTmWoCDMGp\F^brlb>3rs8T!p%8"Urr<#frrrE$rVZQhrqQ`oqu$ElrhBG3rs&K#
qYL*frpTjsrr)`ip\"1Np%S:Zr;HWWs+:7Vs8W&oq"OU^rpTjsrquZgp@RtJo_/(Vr;HVrs1847rVH9^
q>C6\rseu,rVZQhq>'mar;HWonGe+?o`#*orVQKirpTjrrr)`ip@\(NpA"L]rVj5)YQ"e*qt^'brU9aq
rquWfp@RtKp%S:ZrVlZnK)b*8"o\>oq>:-Zrri?#rVZQkq?6]nrVlf3s.oYurr)cmrVl<d$NC#$q"OIS
p@n@Y!rW#rL&^$0"oeGsqu-N`rseu*qY9dVo_%qQqY^<kb5[n0"oeGrqu$H_rri?#rVZQlq?6]nrVleW
s3q#Jrr;rsrpg!trquZhp\+:Rq"agcrr1FINrK7]rVZTmqZ$<i%K?;%q"FCQp%S:ZrVlebs2b3Drr)cm
rr2Hf"TJE!r;6Ki"T/,qrr1dSKDtrN"9/8urpg!srr)`hp\+=Tq"jperhKM,rri?#rVlferseu,r;-3^
p%A%RqY^<kkl687p\t6mrquirnc'!rrr)clqYL*dr;HVss0;V'rpg!srquZhp\+=Tq>:*hrpp)@s6K^a
rpg!srquWfp@\.Rq"jperj`!*s8N#frsSi*rVZQhqYU3hrr2iqK)aa.!<2Ng"9/8rq>U*kq"agcrk\Vu
s7cO$rquWfp\+=Tq>:-iR/aJl"9/;ur;HKpr;HWoh>`*,mJdRnrVQEcp\4L[r;HVhs/>r*rquWfp\+@V
qY^<kkPp/6ir9,[rr)coqZHcprVinuT)T2trVQEcp\=R]r;Q]cs+::'rr`8uqt^6c"ShikrVj;+PQ(aa
rr)coqZHcprr2fpK)a-r"9/8rqYp6mqYU6jrk\Vkrs&K$qt^$]p]UEir;Q\Ns24j=rr2lorqcfqrVlf>
s+::MrsJc(r;-6aq>1$frfI/jrsJc(qt^$]q"agcrmh%#s760qrr)cmqu$BjrgNkjrr`9!r;-Eg"8_ro
rnma-s69Ojrr)`jq"X[]qu-Mjs.fSqrr)fpquZiqrosH7s53hYrr2imrqQZnr;HVus-irprr)ckq=sd^
r;HWes+::"rrW3!rVl]rrVlf,s-*K]rsA]'qtg-bqu$HmOT2ij!ri,orqQZmr;HWFs+::ArrW3!rVl]r
rVlebs/uA.rr)`jq>1!err1gTK)b'7$3'o#qYC!br;Q\ls.fSqrr2lqquZirrosH7s5*b]rr)clqYL*f
riZ9hrsA]'r;-6cqu$Hmo`'OCdf0ROrVcZmrVlf,s,d9[rW`;tqYU0grr)kKs2t?Jrr2loqtg0drVj_7
KDtrN!<2rqs8IlT^]+B7rr)in!rW#rc2WCqq>Ua"rquZiqYU6jPQ/#irr2lps8L[NK)b9=#QF]"qtp<i
rgj(grs/Q%r;6BhrVkgVK)aj1!<2rqs8JtsT)T#or;?HirVl0`K)aL'#6"Jsqu$ElZN$-gs8N#rs8IlT
]`/!1rqlfqrltIps7ZHrrVZQjrVi#\Z2Xn)rVc`pf`-R'li6t^!WE"gs/,hqquQcqir=W1i;WiWrVlep
s-s#jr;?Nmm/M\;ec,aLr;HW#s,d9ZrqHGEs2t?CrVc`.s+UISr;HTpre(6cs8N#<s+::HrrW/urf-rb
rrW/urmLgus6fperg3Yas8W)Rs+::2s8W(ms.95jroX64s4I>OriH-`rrE%Ns+:9&s+:9&s+:9&s+:9&
s+:9&s+:9&s+:9&s+:9&s+:9&s+:9&s+:9&s+:9&s+:9&s+:9&s+:97s+:9&s+:9&s+:9&s+:9&s+:9&
s+:9&s+:9&s+:9&s+:9&s+:9&s+:9&s+:9&s+:9&s+:9&s+:9&s-*J7s+:9&s+:9&s+:9&s+:9&s+:9?
s*t~>

%%EndBinary
grestore
np
125.86 43.3564 mo
139.425 43.3564 li
139.425 94.2358 li
125.86 94.2358 li
cp
.07 .09 .55 rgb
ef
123.435 40.8841 mo
141.877 40.8841 li
141.877 59.3263 li
123.435 59.3263 li
cp
1 1 1 rgb
ef
gsave
125.818 56.9537 mo
127.506 55.2653 li
127.506 45.0669 li
125.818 43.3783 li
125.818 56.9537 li
eclp
127.506 43.3783 mo
125.818 43.3783 li
125.818 56.9537 li
127.506 56.9537 li
cp
level3{
gsave
clp
[-1.68831 0 0 13.5757 127.506 43.3783 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.68831 0 0 13.5757 127.506 43.3783 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
grestore
125.818 56.9537 mo
127.506 55.2654 li
127.506 45.0669 li
125.818 43.3783 li
cp
0 0 .14 rgb
ef
125.818 56.9537 mo
127.506 55.2654 li
127.506 45.0669 li
125.818 43.3783 li
cp
1 1 1 rgb
@
gsave
139.393 56.9537 mo
137.705 55.2653 li
127.506 55.2653 li
125.818 56.9537 li
139.393 56.9537 li
eclp
125.818 55.2654 mo
125.818 56.9537 li
139.393 56.9537 li
139.393 55.2654 li
cp
level3{
gsave
clp
[0 1.68831 13.5757 0 125.818 55.2654 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[0 1.68831 13.5757 0 125.818 55.2654 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
grestore
139.393 56.9537 mo
137.705 55.2654 li
127.506 55.2654 li
125.818 56.9537 li
cp
0 0 .14 rgb
ef
139.393 56.9537 mo
137.705 55.2654 li
127.506 55.2654 li
125.818 56.9537 li
cp
1 1 1 rgb
@
gsave
139.393 43.3783 mo
137.705 45.0669 li
137.705 55.2653 li
139.393 56.9537 li
139.393 43.3783 li
eclp
137.705 56.9537 mo
139.393 56.9537 li
139.393 43.3783 li
137.705 43.3783 li
cp
level3{
gsave
clp
[1.68888 0 0 -13.5757 137.704 56.954 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.68888 0 0 -13.5757 137.704 56.954 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
grestore
139.393 43.3783 mo
137.705 45.0669 li
137.705 55.2654 li
139.393 56.9537 li
cp
@
gsave
125.818 43.3783 mo
127.506 45.0669 li
137.705 45.0669 li
139.393 43.3783 li
125.818 43.3783 li
eclp
139.393 45.0669 mo
139.393 43.3783 li
125.818 43.3783 li
125.818 45.0669 li
cp
level3{
gsave
clp
[0 -1.68945 -13.5757 0 139.393 45.0672 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[0 -1.68945 -13.5757 0 139.393 45.0672 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
grestore
125.818 43.3783 mo
127.506 45.0669 li
137.705 45.0669 li
139.393 43.3783 li
cp
@
127.506 45.0669 mo
137.705 45.0669 li
137.705 55.2654 li
127.506 55.2654 li
cp
.8 .79 .85 rgb
ef
127.506 45.0669 mo
137.705 45.0669 li
137.705 55.2654 li
127.506 55.2654 li
cp
1 1 1 rgb
@
20.7889 44.4435 mo
34.5562 44.4435 li
34.5562 73.6925 li
34.5562 77.9899 35.2135 81.0799 36.5158 82.9993 cv
37.8305 84.9067 39.9264 85.8603 42.8041 85.8603 cv
45.7561 85.8603 47.9884 84.8341 49.4894 82.7821 cv
50.99 80.7298 51.7466 77.6999 51.7466 73.6925 cv
51.7466 44.4435 li
64.8687 44.4435 li
64.8687 73.6925 li
64.8687 81.0918 63.033 86.6449 59.3619 90.3384 cv
55.6907 94.0204 50.1714 95.8671 42.8163 95.8671 cv
35.5234 95.8671 30.029 94.0084 26.3331 90.3024 cv
22.6371 86.5842 20.7889 81.0436 20.7889 73.6925 cv
cp
.07 .09 .55 rgb
ef
114.518 43.537 mo
114.523 53.2672 li
102.55 53.263 li
97.6265 53.2613 93.7036 54.6928 90.795 57.5597 cv
87.8804 60.4329 86.4268 64.2838 86.4268 69.1254 cv
86.4268 73.9786 87.9065 77.8496 90.878 80.7259 cv
93.849 83.6025 97.8147 85.0467 102.763 85.0467 cv
114.523 85.0606 li
114.523 95.1945 li
101.413 95.2033 li
92.4643 95.2089 85.4916 92.9069 80.4964 88.3136 cv
75.5009 83.7326 73.003 77.3288 73.003 69.1254 cv
73.003 61.2771 75.4661 55.0618 80.3896 50.4575 cv
85.3139 45.8532 92.0023 43.5676 100.442 43.5563 cv
cp
ef
154.495 81.7064 mo
157.152 81.7064 li
157.152 95.1925 li
154.495 95.1925 li
cp
169.481 89.3256 mo
169.481 95.1925 li
166.928 95.1925 li
166.928 89.8667 li
166.928 88.9565 166.773 88.2859 166.459 87.8516 cv
166.144 87.4176 165.655 87.2005 164.991 87.2005 cv
164.282 87.2005 163.718 87.476 163.3 88.0299 cv
162.883 88.5838 162.675 89.3387 162.675 90.2942 cv
162.675 95.1925 li
160.151 95.1925 li
160.151 85.3412 li
162.458 85.3412 li
162.458 87.1262 li
162.83 86.4555 163.313 85.947 163.903 85.6037 cv
164.496 85.257 165.183 85.0853 165.96 85.0853 cv
167.116 85.0853 167.994 85.4447 168.59 86.1607 cv
169.183 86.8799 169.481 87.9361 169.481 89.3256 cv
cp
178.221 80.6536 mo
178.089 82.5035 li
177.904 82.432 177.735 82.3802 177.586 82.351 cv
177.434 82.3187 177.298 82.3025 177.178 82.3025 cv
176.683 82.3025 176.32 82.4612 176.083 82.7821 cv
175.85 83.1027 175.733 83.5982 175.733 84.2689 cv
175.733 85.3412 li
178.069 85.3412 li
178.069 87.22 li
175.733 87.22 li
175.733 95.1925 li
173.229 95.1925 li
173.229 87.22 li
171.169 87.22 li
171.169 85.3412 li
173.229 85.3412 li
173.229 84.0778 li
173.229 82.889 173.524 81.9881 174.117 81.3793 cv
174.71 80.767 175.575 80.4625 176.712 80.4625 cv
176.984 80.4625 177.246 80.4787 177.499 80.511 cv
177.751 80.5402 177.995 80.589 178.221 80.6536 cv
cp
184.389 86.9156 mo
183.625 86.9156 183.003 87.22 182.523 87.8323 cv
182.047 88.4412 181.808 89.2445 181.808 90.2361 cv
181.808 91.224 182.047 92.0211 182.523 92.63 cv
183.003 93.2357 183.625 93.5404 184.389 93.5404 cv
185.167 93.5404 185.792 93.2388 186.265 92.6399 cv
186.734 92.0372 186.971 91.237 186.971 90.2361 cv
186.971 89.2318 186.734 88.425 186.259 87.8227 cv
185.785 87.2166 185.16 86.9156 184.389 86.9156 cv
cp
184.389 85.0853 mo
186.022 85.0853 187.305 85.545 188.238 86.4621 cv
189.171 87.3788 189.637 88.6453 189.637 90.2585 cv
189.637 91.8655 189.167 93.132 188.231 94.0586 cv
187.295 94.985 186.016 95.4484 184.389 95.4484 cv
182.763 95.4484 181.487 94.985 180.557 94.0617 cv
179.627 93.1385 179.161 91.872 179.161 90.2585 cv
179.161 88.6453 179.624 87.3788 180.55 86.4621 cv
181.477 85.545 182.757 85.0853 184.389 85.0853 cv
cp
197.969 85.1987 mo
197.875 87.476 li
197.742 87.4307 197.603 87.3983 197.457 87.3757 cv
197.311 87.3527 197.159 87.3431 197 87.3431 cv
196.165 87.3431 195.53 87.6186 195.092 88.1725 cv
194.655 88.7264 194.438 89.5331 194.438 90.589 cv
194.438 95.1925 li
191.914 95.1925 li
191.914 85.3412 li
194.182 85.3412 li
194.182 87.3042 li
194.5 86.572 194.898 86.0216 195.384 85.6553 cv
195.867 85.2894 196.437 85.1048 197.094 85.1048 cv
197.211 85.1048 197.337 85.1111 197.477 85.1272 cv
197.616 85.1434 197.778 85.1661 197.969 85.1987 cv
cp
208.274 87.2005 mo
208.653 86.5043 209.132 85.9827 209.712 85.6326 cv
210.292 85.2794 210.966 85.1048 211.737 85.1048 cv
212.79 85.1048 213.6 85.4708 214.166 86.1996 cv
214.737 86.9318 215.022 87.9746 215.022 89.329 cv
215.022 95.1925 li
212.498 95.1925 li
212.498 89.8667 li
212.498 88.9693 212.359 88.3085 212.08 87.8808 cv
211.802 87.4533 211.374 87.2396 210.801 87.2396 cv
210.111 87.2396 209.566 87.5083 209.168 88.0495 cv
208.77 88.5903 208.569 89.3387 208.569 90.2942 cv
208.569 95.1925 li
206.045 95.1925 li
206.045 89.8667 li
206.045 88.9758 205.906 88.3151 205.624 87.8842 cv
205.342 87.4533 204.908 87.2396 204.328 87.2396 cv
203.638 87.2396 203.094 87.5083 202.695 88.0495 cv
202.297 88.5903 202.096 89.3387 202.096 90.2942 cv
202.096 95.1925 li
199.592 95.1925 li
199.592 85.3412 li
201.879 85.3412 li
201.879 87.1262 li
202.251 86.4555 202.721 85.9501 203.292 85.6134 cv
203.862 85.2732 204.526 85.1048 205.284 85.1048 cv
205.961 85.1048 206.56 85.2894 207.085 85.6553 cv
207.607 86.0216 208.002 86.5366 208.274 87.2005 cv
cp
222.647 90.4821 mo
221.614 90.4821 220.84 90.6247 220.318 90.913 cv
219.797 91.2013 219.534 91.6322 219.534 92.2022 cv
219.534 92.63 219.683 92.9798 219.981 93.2488 cv
220.276 93.5175 220.668 93.6536 221.147 93.6536 cv
221.844 93.6536 222.414 93.4075 222.865 92.9182 cv
223.315 92.4259 223.538 91.7909 223.538 91.0134 cv
223.538 90.4821 li
cp
225.968 89.5719 mo
225.968 95.1925 li
223.729 95.1925 li
223.69 93.5952 li
223.279 94.2043 222.793 94.6644 222.23 94.9785 cv
221.666 95.2928 221.037 95.4484 220.35 95.4484 cv
219.362 95.4484 218.566 95.1599 217.957 94.5802 cv
217.351 94.0002 217.046 93.2519 217.046 92.3352 cv
217.046 91.2404 217.48 90.4172 218.345 89.8699 cv
219.214 89.3225 220.509 89.0504 222.239 89.0504 cv
223.538 89.0504 li
223.538 88.9078 li
223.538 88.2371 223.327 87.7189 222.903 87.3462 cv
222.479 86.9771 221.879 86.7923 221.108 86.7923 cv
220.671 86.7923 220.218 86.8572 219.745 86.9901 cv
219.275 87.1228 218.789 87.3238 218.29 87.5894 cv
218.251 85.7883 li
218.841 85.545 219.418 85.3704 219.988 85.257 cv
220.558 85.1434 221.131 85.0853 221.705 85.0853 cv
223.188 85.0853 224.267 85.4447 224.947 86.1607 cv
225.627 86.8799 225.968 88.0169 225.968 89.5719 cv
cp
222.213 80.5955 mo
224.436 80.5955 li
221.53 84.0129 li
220.325 84.0129 li
cp
232.107 82.1341 mo
232.107 85.3412 li
234.481 85.3412 li
234.481 87.2005 li
232.107 87.2005 li
232.107 91.5188 li
232.107 92.2544 232.22 92.7791 232.45 93.0997 cv
232.677 93.4205 233.049 93.579 233.568 93.579 cv
233.7 93.579 233.849 93.5662 234.015 93.537 cv
234.18 93.5079 234.355 93.4656 234.536 93.4075 cv
234.575 95.1826 li
234.297 95.2571 234.008 95.3155 233.71 95.3512 cv
233.415 95.3901 233.121 95.4093 232.829 95.4093 cv
231.663 95.4093 230.83 95.121 230.322 94.5445 cv
229.816 93.971 229.564 93.0124 229.564 91.671 cv
229.564 87.2005 li
227.617 87.2005 li
227.617 85.3412 li
229.677 85.3412 li
229.677 82.9505 li
cp
236.499 85.3412 mo
239.023 85.3412 li
239.023 95.1925 li
236.499 95.1925 li
cp
236.499 80.9288 mo
239.023 80.9288 li
239.023 83.378 li
236.499 83.378 li
cp
249.263 85.5873 mo
249.065 87.5698 li
248.615 87.3918 248.233 87.2654 247.915 87.1877 cv
247.601 87.1067 247.322 87.0678 247.083 87.0678 cv
246.134 87.0678 245.369 87.3592 244.789 87.9423 cv
244.209 88.5223 243.921 89.2902 243.921 90.2392 cv
243.921 91.1883 244.209 91.9627 244.789 92.565 cv
245.369 93.1646 246.121 93.4656 247.044 93.4656 cv
247.377 93.4656 247.718 93.414 248.064 93.3134 cv
248.408 93.213 248.796 93.0478 249.227 92.821 cv
249.321 94.8424 li
248.618 95.0822 248.071 95.2441 247.676 95.3251 cv
247.28 95.4062 246.908 95.4484 246.561 95.4484 cv
244.954 95.4484 243.672 94.9688 242.713 94.0099 cv
241.754 93.0512 241.274 91.7747 241.274 90.1808 cv
241.274 88.7071 241.77 87.4888 242.758 86.5267 cv
243.749 85.5646 245.01 85.0853 246.542 85.0853 cv
247.106 85.0853 247.85 85.2117 248.78 85.4643 cv
248.994 85.5227 249.156 85.5615 249.263 85.5873 cv
cp
256.328 90.4821 mo
255.295 90.4821 254.521 90.6247 253.999 90.913 cv
253.478 91.2013 253.215 91.6322 253.215 92.2022 cv
253.215 92.63 253.364 92.9798 253.662 93.2488 cv
253.957 93.5175 254.349 93.6536 254.828 93.6536 cv
255.525 93.6536 256.095 93.4075 256.545 92.9182 cv
256.996 92.4259 257.219 91.7909 257.219 91.0134 cv
257.219 90.4821 li
cp
259.649 89.5719 mo
259.649 95.1925 li
257.41 95.1925 li
257.371 93.5952 li
256.96 94.2043 256.474 94.6644 255.91 94.9785 cv
255.347 95.2928 254.718 95.4484 254.031 95.4484 cv
253.043 95.4484 252.246 95.1599 251.637 94.5802 cv
251.032 94.0002 250.727 93.2519 250.727 92.3352 cv
250.727 91.2404 251.161 90.4172 252.026 89.8699 cv
252.895 89.3225 254.19 89.0504 255.92 89.0504 cv
257.219 89.0504 li
257.219 88.9078 li
257.219 88.2371 257.008 87.7189 256.584 87.3462 cv
256.16 86.9771 255.561 86.7923 254.789 86.7923 cv
254.352 86.7923 253.899 86.8572 253.426 86.9901 cv
252.956 87.1228 252.47 87.3238 251.971 87.5894 cv
251.932 85.7883 li
252.522 85.545 253.099 85.3704 253.669 85.257 cv
254.239 85.1434 254.812 85.0853 255.386 85.0853 cv
256.869 85.0853 257.948 85.4447 258.628 86.1607 cv
259.308 86.8799 259.649 88.0169 259.649 89.5719 cv
cp
268.661 85.6457 mo
268.47 87.5148 li
268.036 87.2881 267.605 87.1163 267.181 87.0029 cv
266.756 86.8898 266.335 86.8311 265.917 86.8311 cv
265.464 86.8311 265.114 86.9091 264.871 87.0644 cv
264.628 87.22 264.505 87.4403 264.505 87.7317 cv
264.505 88.1694 265.02 88.6161 266.05 89.0699 cv
266.163 89.1215 266.251 89.1604 266.306 89.1833 cv
267.365 89.6527 268.091 90.1128 268.489 90.5663 cv
268.888 91.0168 269.089 91.5772 269.089 92.2413 cv
269.089 93.1773 268.716 93.9194 267.968 94.4668 cv
267.223 95.0142 266.205 95.2863 264.913 95.2863 cv
264.369 95.2863 263.841 95.2441 263.322 95.1568 cv
262.807 95.0726 262.318 94.9496 261.858 94.7843 cv
262.001 92.8372 li
262.467 93.0705 262.946 93.2488 263.436 93.3653 cv
263.928 93.4818 264.414 93.5404 264.894 93.5404 cv
265.392 93.5404 265.781 93.456 266.057 93.2876 cv
266.332 93.1223 266.468 92.889 266.468 92.5911 cv
266.468 92.1053 265.817 91.5349 264.514 90.8838 cv
264.466 90.8549 li
263.494 90.3722 262.836 89.9283 262.493 89.5167 cv
262.153 89.1054 261.981 88.6065 261.981 88.0169 cv
261.981 87.152 262.347 86.4456 263.076 85.9016 cv
263.808 85.3574 264.767 85.0853 265.956 85.0853 cv
266.273 85.0853 266.623 85.1241 267.009 85.1987 cv
267.397 85.2763 267.945 85.422 268.661 85.6457 cv
ef
-14.7414 -349.678 mo
-11.2543 -349.678 li
-11.2543 -350.515 li
-13.7734 -350.515 li
-13.7734 -357.36 li
-14.7414 -357.36 li
cp
-10.1215 -354.037 mo
-9.80258 -354.389 -9.25269 -354.62 -8.68069 -354.62 cv
-8.29568 -354.62 -7.93259 -354.521 -7.74548 -354.268 cv
-7.56949 -354.026 -7.53659 -353.783 -7.53659 -353.365 cv
-7.53659 -353.112 li
-8.07578 -353.112 li
-10.0008 -353.112 -10.7157 -352.308 -10.7157 -351.219 cv
-10.7157 -350.14 -10.0226 -349.599 -9.09879 -349.599 cv
-8.24069 -349.599 -7.77869 -350.008 -7.52557 -350.438 cv
-7.50369 -350.438 li
-7.4487 -349.676 li
-6.61249 -349.676 li
-6.63458 -349.876 -6.65668 -350.206 -6.65668 -350.537 cv
-6.65668 -353.464 li
-6.65668 -354.257 -6.8985 -354.598 -7.14059 -354.84 cv
-7.31659 -355.016 -7.81158 -355.368 -8.63669 -355.368 cv
-9.18668 -355.368 -9.7587 -355.203 -10.2207 -354.906 cv
cp
-7.53659 -351.725 mo
-7.53659 -350.955 -8.04257 -350.305 -8.84567 -350.305 cv
-9.48367 -350.305 -9.7916 -350.691 -9.7916 -351.285 cv
-9.7916 -351.935 -9.27448 -352.452 -8.1857 -352.452 cv
-7.93259 -352.452 -7.7016 -352.452 -7.53659 -352.43 cv
cp
-2.38858 -354.037 mo
-2.06967 -354.389 -1.52008 -354.62 -.947998 -354.62 cv
-.56308 -354.62 -.199982 -354.521 -.0128784 -354.268 cv
.163116 -354.026 .196014 -353.783 .196014 -353.365 cv
.196014 -353.112 li
-.343079 -353.112 li
-2.26788 -353.112 -2.98279 -352.308 -2.98279 -351.219 cv
-2.98279 -350.14 -2.28967 -349.599 -1.36618 -349.599 cv
-.508087 -349.599 -.0460815 -350.008 .207123 -350.438 cv
.228912 -350.438 li
.283905 -349.676 li
1.12012 -349.676 li
1.09802 -349.876 1.07593 -350.206 1.07593 -350.537 cv
1.07593 -353.464 li
1.07593 -354.257 .834106 -354.598 .59201 -354.84 cv
.416016 -355.016 -.0788879 -355.368 -.904083 -355.368 cv
-1.45398 -355.368 -2.02579 -355.203 -2.48779 -354.906 cv
cp
.196014 -351.725 mo
.196014 -350.955 -.309998 -350.305 -1.11298 -350.305 cv
-1.7511 -350.305 -2.05869 -350.691 -2.05869 -351.285 cv
-2.05869 -351.935 -1.5419 -352.452 -.453094 -352.452 cv
-.199982 -352.452 .0310059 -352.452 .196014 -352.43 cv
cp
2.38492 -349.676 mo
3.30902 -349.676 li
3.30902 -352.65 li
3.30902 -353.871 3.815 -354.488 4.52991 -354.488 cv
4.65091 -354.488 4.772 -354.477 4.88202 -354.455 cv
4.88202 -355.368 li
4.05713 -355.368 3.58401 -355.093 3.28693 -354.411 cv
3.26511 -354.411 li
3.2319 -355.291 li
2.341 -355.291 li
2.35202 -354.895 2.38492 -354.488 2.38492 -354.081 cv
cp
8.11603 -350.493 mo
7.94 -350.415 7.77502 -350.349 7.54401 -350.349 cv
7.12622 -350.349 6.96121 -350.592 6.96121 -351.23 cv
6.96121 -354.543 li
8.11603 -354.543 li
8.11603 -355.291 li
6.96121 -355.291 li
6.96121 -356.711 li
6.03711 -356.436 li
6.03711 -355.291 li
5.14621 -355.291 li
5.14621 -354.543 li
6.03711 -354.543 li
6.03711 -350.933 li
6.03711 -349.942 6.48813 -349.599 7.33481 -349.599 cv
7.58792 -349.599 7.89581 -349.665 8.11603 -349.744 cv
cp
8.98511 -349.676 mo
9.90891 -349.676 li
9.90891 -355.291 li
8.98511 -355.291 li
cp
8.94092 -357.603 mo
8.94092 -356.502 li
9.95313 -356.502 li
9.95313 -357.603 li
cp
14.683 -355.148 mo
14.386 -355.291 13.9571 -355.368 13.5721 -355.368 cv
12.01 -355.368 11.064 -354.246 11.064 -352.43 cv
11.064 -350.845 11.8782 -349.599 13.55 -349.599 cv
13.9571 -349.599 14.452 -349.722 14.727 -349.843 cv
14.683 -350.691 li
14.3641 -350.526 13.99 -350.393 13.55 -350.393 cv
12.648 -350.393 12.0321 -351.131 12.0321 -352.43 cv
12.0321 -353.949 12.6702 -354.576 13.5721 -354.576 cv
14.001 -354.576 14.3202 -354.488 14.6391 -354.312 cv
cp
19.5779 -355.291 mo
18.6541 -355.291 li
18.6541 -351.912 li
18.6541 -350.9 18.192 -350.393 17.4661 -350.393 cv
16.872 -350.393 16.542 -350.779 16.542 -351.67 cv
16.542 -355.291 li
15.6182 -355.291 li
15.6182 -351.395 li
15.6182 -350.162 16.2784 -349.599 17.2569 -349.599 cv
17.906 -349.599 18.3789 -349.876 18.6759 -350.515 cv
18.698 -350.515 li
18.7309 -349.676 li
19.6221 -349.676 li
19.6111 -350.074 19.5779 -350.482 19.5779 -350.889 cv
cp
21.008 -349.676 mo
21.9318 -349.676 li
21.9318 -357.933 li
21.008 -357.933 li
cp
23.6811 -354.037 mo
24 -354.389 24.5499 -354.62 25.1219 -354.62 cv
25.5066 -354.62 25.8697 -354.521 26.0568 -354.268 cv
26.2328 -354.026 26.2657 -353.783 26.2657 -353.365 cv
26.2657 -353.112 li
25.7265 -353.112 li
23.8018 -353.112 23.0869 -352.308 23.0869 -351.219 cv
23.0869 -350.14 23.78 -349.599 24.7038 -349.599 cv
25.5616 -349.599 26.0236 -350.008 26.2767 -350.438 cv
26.2986 -350.438 li
26.3536 -349.676 li
27.1898 -349.676 li
27.1677 -349.876 27.1456 -350.206 27.1456 -350.537 cv
27.1456 -353.464 li
27.1456 -354.257 26.9038 -354.598 26.6617 -354.84 cv
26.4857 -355.016 25.9907 -355.368 25.1658 -355.368 cv
24.6159 -355.368 24.0439 -355.203 23.5818 -354.906 cv
cp
26.2657 -351.725 mo
26.2657 -350.955 25.7597 -350.305 24.9569 -350.305 cv
24.3189 -350.305 24.011 -350.691 24.011 -351.285 cv
24.011 -351.935 24.528 -352.452 25.6166 -352.452 cv
25.8697 -352.452 26.1007 -352.452 26.2657 -352.43 cv
cp
31.7986 -355.148 mo
31.5016 -355.291 31.0727 -355.368 30.6877 -355.368 cv
29.1256 -355.368 28.1796 -354.246 28.1796 -352.43 cv
28.1796 -350.845 28.9937 -349.599 30.6656 -349.599 cv
31.0727 -349.599 31.5676 -349.722 31.8426 -349.843 cv
31.7986 -350.691 li
31.4797 -350.526 31.1056 -350.393 30.6656 -350.393 cv
29.7636 -350.393 29.1477 -351.131 29.1477 -352.43 cv
29.1477 -353.949 29.7857 -354.576 30.6877 -354.576 cv
31.1166 -354.576 31.4358 -354.488 31.7547 -354.312 cv
cp
32.8219 -349.676 mo
33.7457 -349.676 li
33.7457 -355.291 li
32.8219 -355.291 li
cp
32.7777 -357.603 mo
32.7777 -356.502 li
33.79 -356.502 li
33.79 -357.603 li
cp
36.6056 -356.062 mo
37.3097 -356.062 li
38.4317 -357.658 li
37.3426 -357.658 li
cp
35.8686 -352.485 mo
35.8686 -353.893 36.2757 -354.62 37.1555 -354.62 cv
38.0357 -354.62 38.4428 -353.893 38.4428 -352.485 cv
38.4428 -351.076 38.0357 -350.349 37.1555 -350.349 cv
36.2757 -350.349 35.8686 -351.076 35.8686 -352.485 cv
cp
34.9006 -352.485 mo
34.9006 -350.724 35.6705 -349.599 37.1555 -349.599 cv
38.6406 -349.599 39.4105 -350.724 39.4105 -352.485 cv
39.4105 -354.246 38.6406 -355.368 37.1555 -355.368 cv
35.6705 -355.368 34.9006 -354.246 34.9006 -352.485 cv
cp
40.4775 -349.676 mo
41.4016 -349.676 li
41.4016 -353.057 li
41.4016 -354.07 41.8636 -354.576 42.5896 -354.576 cv
43.1834 -354.576 43.5137 -354.191 43.5137 -353.299 cv
43.5137 -349.676 li
44.4372 -349.676 li
44.4372 -353.574 li
44.4372 -354.807 43.7773 -355.368 42.7985 -355.368 cv
42.1496 -355.368 41.6765 -355.093 41.3794 -354.455 cv
41.3576 -354.455 li
41.3245 -355.291 li
40.4335 -355.291 li
40.4446 -354.895 40.4775 -354.488 40.4775 -354.081 cv
cp
51.532 -352.485 mo
51.532 -351.076 51.1471 -350.349 50.3001 -350.349 cv
49.4531 -350.349 49.0681 -351.076 49.0681 -352.485 cv
49.0681 -353.893 49.4531 -354.62 50.3001 -354.62 cv
51.1471 -354.62 51.532 -353.893 51.532 -352.485 cv
cp
52.4561 -357.933 mo
51.532 -357.933 li
51.532 -354.521 li
51.5102 -354.521 li
51.136 -355.115 50.7182 -355.368 50.0801 -355.368 cv
48.925 -355.368 48.144 -354.422 48.144 -352.485 cv
48.144 -350.548 48.925 -349.599 50.0801 -349.599 cv
50.8942 -349.599 51.312 -350.063 51.5541 -350.504 cv
51.576 -350.504 li
51.6091 -349.676 li
52.5 -349.676 li
52.489 -350.019 52.4561 -350.371 52.4561 -350.713 cv
cp
57.5709 -352.21 mo
57.5709 -352.705 li
57.5709 -354.356 56.8668 -355.368 55.602 -355.368 cv
54.2048 -355.368 53.4349 -354.246 53.4349 -352.485 cv
53.4349 -350.724 54.2048 -349.599 55.6899 -349.599 cv
56.2509 -349.599 56.8229 -349.722 57.2631 -349.931 cv
57.2189 -350.768 li
56.9 -350.537 56.394 -350.305 55.932 -350.305 cv
54.9089 -350.305 54.4029 -350.911 54.4029 -352.21 cv
cp
54.4029 -352.914 mo
54.4251 -354.224 54.9529 -354.664 55.547 -354.664 cv
56.284 -354.664 56.6469 -354.081 56.6469 -352.914 cv
cp
61.322 -349.676 mo
62.2456 -349.676 li
62.2456 -357.933 li
61.322 -357.933 li
cp
64.3687 -352.485 mo
64.3687 -353.893 64.7758 -354.62 65.6556 -354.62 cv
66.5358 -354.62 66.9429 -353.893 66.9429 -352.485 cv
66.9429 -351.076 66.5358 -350.349 65.6556 -350.349 cv
64.7758 -350.349 64.3687 -351.076 64.3687 -352.485 cv
cp
63.4007 -352.485 mo
63.4007 -350.724 64.1706 -349.599 65.6556 -349.599 cv
67.1407 -349.599 67.9106 -350.724 67.9106 -352.485 cv
67.9106 -354.246 67.1407 -355.368 65.6556 -355.368 cv
64.1706 -355.368 63.4007 -354.246 63.4007 -352.485 cv
cp
68.6805 -349.931 mo
69.0875 -349.722 69.6156 -349.599 70.1987 -349.599 cv
71.4854 -349.599 72.0024 -350.371 72.0024 -351.34 cv
72.0024 -352.034 71.5732 -352.496 70.8915 -352.771 cv
70.5616 -352.903 li
69.9456 -353.145 69.6156 -353.398 69.6156 -353.849 cv
69.6156 -354.29 69.9345 -354.62 70.5397 -354.62 cv
70.9576 -354.62 71.3533 -354.51 71.6393 -354.378 cv
71.6832 -355.17 li
71.3643 -355.291 70.9576 -355.368 70.4955 -355.368 cv
69.4067 -355.368 68.6915 -354.664 68.6915 -353.739 cv
68.6915 -353.024 68.9886 -352.661 69.7917 -352.297 cv
70.4076 -352.022 li
70.9247 -351.791 71.1223 -351.527 71.1223 -351.142 cv
71.1223 -350.713 70.7597 -350.349 70.0556 -350.349 cv
69.5935 -350.349 69.1536 -350.515 68.7355 -350.768 cv
cp
79.5482 -352.21 mo
79.5482 -352.705 li
79.5482 -354.356 78.8441 -355.368 77.5793 -355.368 cv
76.1821 -355.368 75.4122 -354.246 75.4122 -352.485 cv
75.4122 -350.724 76.1821 -349.599 77.6672 -349.599 cv
78.2281 -349.599 78.8002 -349.722 79.2404 -349.931 cv
79.1962 -350.768 li
78.8773 -350.537 78.3713 -350.305 77.9092 -350.305 cv
76.8862 -350.305 76.3802 -350.911 76.3802 -352.21 cv
cp
76.3802 -352.914 mo
76.4023 -354.224 76.9302 -354.664 77.5243 -354.664 cv
78.2613 -354.664 78.6241 -354.081 78.6241 -352.914 cv
cp
80.6591 -349.676 mo
81.5829 -349.676 li
81.5829 -357.933 li
80.6591 -357.933 li
cp
86.8741 -352.21 mo
86.8741 -352.705 li
86.8741 -354.356 86.17 -355.368 84.9051 -355.368 cv
83.508 -355.368 82.7381 -354.246 82.7381 -352.485 cv
82.7381 -350.724 83.508 -349.599 84.993 -349.599 cv
85.554 -349.599 86.126 -349.722 86.5663 -349.931 cv
86.522 -350.768 li
86.2031 -350.537 85.6971 -350.305 85.2351 -350.305 cv
84.2121 -350.305 83.7061 -350.911 83.7061 -352.21 cv
cp
83.7061 -352.914 mo
83.7282 -354.224 84.256 -354.664 84.8502 -354.664 cv
85.5872 -354.664 85.95 -354.081 85.95 -352.914 cv
cp
87.8971 -349.676 mo
88.8212 -349.676 li
88.8212 -353.145 li
88.8212 -354.158 89.1951 -354.576 89.8768 -354.576 cv
90.427 -354.576 90.7349 -354.246 90.7349 -353.531 cv
90.7349 -349.676 li
91.659 -349.676 li
91.659 -353.145 li
91.659 -354.158 92.0329 -354.576 92.7149 -354.576 cv
93.2648 -354.576 93.5729 -354.246 93.5729 -353.531 cv
93.5729 -349.676 li
94.497 -349.676 li
94.497 -353.574 li
94.497 -354.807 93.8368 -355.368 92.8688 -355.368 cv
92.231 -355.368 91.8018 -355.038 91.5051 -354.488 cv
91.219 -355.06 90.7788 -355.368 90.185 -355.368 cv
89.569 -355.368 89.0962 -355.093 88.7991 -354.455 cv
88.7773 -354.455 li
88.7441 -355.291 li
87.8532 -355.291 li
87.8642 -354.895 87.8971 -354.488 87.8971 -354.081 cv
cp
99.6997 -352.21 mo
99.6997 -352.705 li
99.6997 -354.356 98.9956 -355.368 97.7311 -355.368 cv
96.3339 -355.368 95.564 -354.246 95.564 -352.485 cv
95.564 -350.724 96.3339 -349.599 97.8189 -349.599 cv
98.3799 -349.599 98.9517 -349.722 99.3919 -349.931 cv
99.3477 -350.768 li
99.0288 -350.537 98.5228 -350.305 98.061 -350.305 cv
97.038 -350.305 96.532 -350.911 96.532 -352.21 cv
cp
96.532 -352.914 mo
96.5541 -354.224 97.0819 -354.664 97.6761 -354.664 cv
98.4128 -354.664 98.7756 -354.081 98.7756 -352.914 cv
cp
100.723 -349.676 mo
101.647 -349.676 li
101.647 -353.057 li
101.647 -354.07 102.109 -354.576 102.835 -354.576 cv
103.429 -354.576 103.759 -354.191 103.759 -353.299 cv
103.759 -349.676 li
104.683 -349.676 li
104.683 -353.574 li
104.683 -354.807 104.023 -355.368 103.044 -355.368 cv
102.395 -355.368 101.922 -355.093 101.625 -354.455 cv
101.603 -354.455 li
101.57 -355.291 li
100.679 -355.291 li
100.69 -354.895 100.723 -354.488 100.723 -354.081 cv
cp
108.5 -350.493 mo
108.324 -350.415 108.159 -350.349 107.928 -350.349 cv
107.51 -350.349 107.345 -350.592 107.345 -351.23 cv
107.345 -354.543 li
108.5 -354.543 li
108.5 -355.291 li
107.345 -355.291 li
107.345 -356.711 li
106.421 -356.436 li
106.421 -355.291 li
105.53 -355.291 li
105.53 -354.543 li
106.421 -354.543 li
106.421 -350.933 li
106.421 -349.942 106.872 -349.599 107.718 -349.599 cv
107.972 -349.599 108.279 -349.665 108.5 -349.744 cv
cp
109.974 -352.485 mo
109.974 -353.893 110.381 -354.62 111.261 -354.62 cv
112.141 -354.62 112.548 -353.893 112.548 -352.485 cv
112.548 -351.076 112.141 -350.349 111.261 -350.349 cv
110.381 -350.349 109.974 -351.076 109.974 -352.485 cv
cp
109.006 -352.485 mo
109.006 -350.724 109.776 -349.599 111.261 -349.599 cv
112.746 -349.599 113.516 -350.724 113.516 -352.485 cv
113.516 -354.246 112.746 -355.368 111.261 -355.368 cv
109.776 -355.368 109.006 -354.246 109.006 -352.485 cv
cp
114.285 -349.931 mo
114.693 -349.722 115.221 -349.599 115.804 -349.599 cv
117.09 -349.599 117.607 -350.371 117.607 -351.34 cv
117.607 -352.034 117.178 -352.496 116.496 -352.771 cv
116.167 -352.903 li
115.551 -353.145 115.221 -353.398 115.221 -353.849 cv
115.221 -354.29 115.539 -354.62 116.145 -354.62 cv
116.563 -354.62 116.958 -354.51 117.244 -354.378 cv
117.288 -355.17 li
116.969 -355.291 116.563 -355.368 116.1 -355.368 cv
115.012 -355.368 114.297 -354.664 114.297 -353.739 cv
114.297 -353.024 114.594 -352.661 115.397 -352.297 cv
116.013 -352.022 li
116.53 -351.791 116.727 -351.527 116.727 -351.142 cv
116.727 -350.713 116.365 -350.349 115.661 -350.349 cv
115.198 -350.349 114.759 -350.515 114.34 -350.768 cv
cp
124.405 -352.485 mo
124.405 -351.076 124.02 -350.349 123.173 -350.349 cv
122.326 -350.349 121.941 -351.076 121.941 -352.485 cv
121.941 -353.893 122.326 -354.62 123.173 -354.62 cv
124.02 -354.62 124.405 -353.893 124.405 -352.485 cv
cp
124.405 -347.299 mo
125.329 -347.299 li
125.329 -354.257 li
125.329 -354.598 125.362 -354.95 125.373 -355.291 cv
124.482 -355.291 li
124.449 -354.466 li
124.427 -354.466 li
124.185 -354.906 123.767 -355.368 122.953 -355.368 cv
121.798 -355.368 121.017 -354.422 121.017 -352.485 cv
121.017 -350.548 121.798 -349.599 122.953 -349.599 cv
123.591 -349.599 124.009 -349.854 124.383 -350.449 cv
124.405 -350.449 li
cp
130.543 -355.291 mo
129.619 -355.291 li
129.619 -351.912 li
129.619 -350.9 129.157 -350.393 128.431 -350.393 cv
127.837 -350.393 127.507 -350.779 127.507 -351.67 cv
127.507 -355.291 li
126.583 -355.291 li
126.583 -351.395 li
126.583 -350.162 127.243 -349.599 128.222 -349.599 cv
128.871 -349.599 129.344 -349.876 129.641 -350.515 cv
129.663 -350.515 li
129.696 -349.676 li
130.587 -349.676 li
130.576 -350.074 130.543 -350.482 130.543 -350.889 cv
cp
135.746 -352.21 mo
135.746 -352.705 li
135.746 -354.356 135.042 -355.368 133.777 -355.368 cv
132.38 -355.368 131.61 -354.246 131.61 -352.485 cv
131.61 -350.724 132.38 -349.599 133.865 -349.599 cv
134.426 -349.599 134.998 -349.722 135.438 -349.931 cv
135.394 -350.768 li
135.075 -350.537 134.569 -350.305 134.107 -350.305 cv
133.084 -350.305 132.578 -350.911 132.578 -352.21 cv
cp
132.578 -352.914 mo
132.6 -354.224 133.128 -354.664 133.722 -354.664 cv
134.459 -354.664 134.822 -354.081 134.822 -352.914 cv
cp
142.753 -355.148 mo
142.456 -355.291 142.027 -355.368 141.642 -355.368 cv
140.079 -355.368 139.134 -354.246 139.134 -352.43 cv
139.134 -350.845 139.948 -349.599 141.62 -349.599 cv
142.027 -349.599 142.522 -349.722 142.797 -349.843 cv
142.753 -350.691 li
142.434 -350.526 142.06 -350.393 141.62 -350.393 cv
140.718 -350.393 140.102 -351.131 140.102 -352.43 cv
140.102 -353.949 140.74 -354.576 141.642 -354.576 cv
142.071 -354.576 142.39 -354.488 142.709 -354.312 cv
cp
144.381 -352.485 mo
144.381 -353.893 144.788 -354.62 145.668 -354.62 cv
146.548 -354.62 146.955 -353.893 146.955 -352.485 cv
146.955 -351.076 146.548 -350.349 145.668 -350.349 cv
144.788 -350.349 144.381 -351.076 144.381 -352.485 cv
cp
143.413 -352.485 mo
143.413 -350.724 144.182 -349.599 145.668 -349.599 cv
147.153 -349.599 147.922 -350.724 147.922 -352.485 cv
147.922 -354.246 147.153 -355.368 145.668 -355.368 cv
144.182 -355.368 143.413 -354.246 143.413 -352.485 cv
cp
148.989 -349.676 mo
149.914 -349.676 li
149.914 -353.145 li
149.914 -354.158 150.287 -354.576 150.969 -354.576 cv
151.52 -354.576 151.827 -354.246 151.827 -353.531 cv
151.827 -349.676 li
152.751 -349.676 li
152.751 -353.145 li
152.751 -354.158 153.125 -354.576 153.807 -354.576 cv
154.357 -354.576 154.665 -354.246 154.665 -353.531 cv
154.665 -349.676 li
155.589 -349.676 li
155.589 -353.574 li
155.589 -354.807 154.929 -355.368 153.961 -355.368 cv
153.323 -355.368 152.894 -355.038 152.598 -354.488 cv
152.312 -355.06 151.871 -355.368 151.277 -355.368 cv
150.662 -355.368 150.189 -355.093 149.891 -354.455 cv
149.87 -354.455 li
149.836 -355.291 li
148.946 -355.291 li
148.957 -354.895 148.989 -354.488 148.989 -354.081 cv
cp
156.7 -352.375 mo
159.076 -352.375 li
159.076 -353.167 li
156.7 -353.167 li
cp
-14.0815 -339.508 mo
-14.0815 -340.917 -13.6963 -341.643 -12.8493 -341.643 cv
-12.0023 -341.643 -11.6174 -340.917 -11.6174 -339.508 cv
-11.6174 -338.1 -12.0023 -337.373 -12.8493 -337.373 cv
-13.6963 -337.373 -14.0815 -338.1 -14.0815 -339.508 cv
cp
-15.0053 -334.322 mo
-14.0815 -334.322 li
-14.0815 -337.472 li
-14.0594 -337.472 li
-13.6855 -336.878 -13.2674 -336.623 -12.6293 -336.623 cv
-11.4745 -336.623 -10.6936 -337.571 -10.6936 -339.508 cv
-10.6936 -341.445 -11.4745 -342.392 -12.6293 -342.392 cv
-13.4434 -342.392 -13.8613 -341.929 -14.1034 -341.49 cv
-14.1255 -341.49 li
-14.1583 -342.315 li
-15.0496 -342.315 li
-15.0385 -341.974 -15.0053 -341.622 -15.0053 -341.28 cv
cp
-8.93347 -339.508 mo
-8.93347 -340.917 -8.52649 -341.643 -7.64658 -341.643 cv
-6.76639 -341.643 -6.35938 -340.917 -6.35938 -339.508 cv
-6.35938 -338.1 -6.76639 -337.373 -7.64658 -337.373 cv
-8.52649 -337.373 -8.93347 -338.1 -8.93347 -339.508 cv
cp
-9.90158 -339.508 mo
-9.90158 -337.747 -9.13168 -336.623 -7.64658 -336.623 cv
-6.1615 -336.623 -5.39157 -337.747 -5.39157 -339.508 cv
-5.39157 -341.269 -6.1615 -342.392 -7.64658 -342.392 cv
-9.13168 -342.392 -9.90158 -341.269 -9.90158 -339.508 cv
cp
-4.32468 -336.7 mo
-3.40057 -336.7 li
-3.40057 -340.081 li
-3.40057 -341.093 -2.93848 -341.599 -2.21259 -341.599 cv
-1.61899 -341.599 -1.28879 -341.214 -1.28879 -340.323 cv
-1.28879 -336.7 li
-.36499 -336.7 li
-.36499 -340.598 li
-.36499 -341.831 -1.02487 -342.392 -2.00369 -342.392 cv
-2.6525 -342.392 -3.12558 -342.117 -3.4227 -341.478 cv
-3.44449 -341.478 li
-3.47769 -342.315 li
-4.36859 -342.315 li
-4.35757 -341.919 -4.32468 -341.512 -4.32468 -341.104 cv
cp
4.83801 -339.233 mo
4.83801 -339.728 li
4.83801 -341.379 4.13391 -342.392 2.86911 -342.392 cv
1.47192 -342.392 .702026 -341.269 .702026 -339.508 cv
.702026 -337.747 1.47192 -336.623 2.957 -336.623 cv
3.51791 -336.623 4.09003 -336.746 4.53021 -336.955 cv
4.48602 -337.791 li
4.16711 -337.56 3.6611 -337.329 3.19901 -337.329 cv
2.17603 -337.329 1.67001 -337.934 1.67001 -339.233 cv
cp
1.67001 -339.937 mo
1.69211 -341.247 2.22 -341.688 2.81412 -341.688 cv
3.55112 -341.688 3.91391 -341.104 3.91391 -339.937 cv
cp
5.86111 -336.7 mo
6.78513 -336.7 li
6.78513 -340.081 li
6.78513 -341.093 7.24692 -341.599 7.9729 -341.599 cv
8.56671 -341.599 8.897 -341.214 8.897 -340.323 cv
8.897 -336.7 li
9.8208 -336.7 li
9.8208 -340.598 li
9.8208 -341.831 9.16092 -342.392 8.18182 -342.392 cv
7.53293 -342.392 7.06012 -342.117 6.763 -341.478 cv
6.74121 -341.478 li
6.70801 -342.315 li
5.81711 -342.315 li
5.82822 -341.919 5.86111 -341.512 5.86111 -341.104 cv
cp
13.8908 -336.7 mo
14.8146 -336.7 li
14.8146 -344.957 li
13.8908 -344.957 li
cp
16.5635 -341.06 mo
16.8824 -341.412 17.4324 -341.643 18.0044 -341.643 cv
18.3893 -341.643 18.7525 -341.544 18.9395 -341.291 cv
19.1156 -341.049 19.1485 -340.807 19.1485 -340.388 cv
19.1485 -340.136 li
18.6093 -340.136 li
16.6843 -340.136 15.9697 -339.332 15.9697 -338.242 cv
15.9697 -337.164 16.6625 -336.623 17.5863 -336.623 cv
18.4443 -336.623 18.9064 -337.032 19.1595 -337.461 cv
19.1813 -337.461 li
19.2363 -336.7 li
20.0726 -336.7 li
20.0504 -336.9 20.0283 -337.23 20.0283 -337.56 cv
20.0283 -340.488 li
20.0283 -341.28 19.7865 -341.622 19.5445 -341.863 cv
19.3684 -342.04 18.8735 -342.392 18.0483 -342.392 cv
17.4984 -342.392 16.9264 -342.227 16.4643 -341.929 cv
cp
19.1485 -338.749 mo
19.1485 -337.979 18.6425 -337.329 17.8394 -337.329 cv
17.2013 -337.329 16.8935 -337.714 16.8935 -338.309 cv
16.8935 -338.958 17.4105 -339.476 18.4993 -339.476 cv
18.7525 -339.476 18.9835 -339.476 19.1485 -339.453 cv
cp
24.0654 -336.7 mo
24.9892 -336.7 li
24.9892 -342.315 li
24.0654 -342.315 li
cp
24.0212 -344.626 mo
24.0212 -343.526 li
25.0335 -343.526 li
25.0335 -344.626 li
cp
29.532 -339.508 mo
29.532 -338.1 29.1471 -337.373 28.3001 -337.373 cv
27.4531 -337.373 27.0682 -338.1 27.0682 -339.508 cv
27.0682 -340.917 27.4531 -341.643 28.3001 -341.643 cv
29.1471 -341.643 29.532 -340.917 29.532 -339.508 cv
cp
30.4561 -344.957 mo
29.532 -344.957 li
29.532 -341.544 li
29.5102 -341.544 li
29.136 -342.139 28.7182 -342.392 28.0801 -342.392 cv
26.925 -342.392 26.1441 -341.445 26.1441 -339.508 cv
26.1441 -337.571 26.925 -336.623 28.0801 -336.623 cv
28.8943 -336.623 29.3121 -337.087 29.5542 -337.527 cv
29.576 -337.527 li
29.6091 -336.7 li
30.5001 -336.7 li
30.489 -337.043 30.4561 -337.395 30.4561 -337.736 cv
cp
35.571 -339.233 mo
35.571 -339.728 li
35.571 -341.379 34.8669 -342.392 33.6023 -342.392 cv
32.2051 -342.392 31.4352 -341.269 31.4352 -339.508 cv
31.4352 -337.747 32.2051 -336.623 33.6902 -336.623 cv
34.2512 -336.623 34.8229 -336.746 35.2631 -336.955 cv
35.2189 -337.791 li
34.9 -337.56 34.3943 -337.329 33.9323 -337.329 cv
32.9092 -337.329 32.4033 -337.934 32.4033 -339.233 cv
cp
32.4033 -339.937 mo
32.4254 -341.247 32.9532 -341.688 33.5473 -341.688 cv
34.2843 -341.688 34.6469 -341.104 34.6469 -339.937 cv
cp
36.594 -336.7 mo
37.5181 -336.7 li
37.5181 -340.081 li
37.5181 -341.093 37.9801 -341.599 38.7061 -341.599 cv
39.3 -341.599 39.6302 -341.214 39.6302 -340.323 cv
39.6302 -336.7 li
40.554 -336.7 li
40.554 -340.598 li
40.554 -341.831 39.8941 -342.392 38.915 -342.392 cv
38.2662 -342.392 37.7931 -342.117 37.496 -341.478 cv
37.4742 -341.478 li
37.441 -342.315 li
36.5501 -342.315 li
36.5611 -341.919 36.594 -341.512 36.594 -341.104 cv
cp
44.3709 -337.516 mo
44.1948 -337.439 44.0298 -337.373 43.7988 -337.373 cv
43.381 -337.373 43.216 -337.615 43.216 -338.253 cv
43.216 -341.567 li
44.3709 -341.567 li
44.3709 -342.315 li
43.216 -342.315 li
43.216 -343.735 li
42.2919 -343.46 li
42.2919 -342.315 li
41.401 -342.315 li
41.401 -341.567 li
42.2919 -341.567 li
42.2919 -337.956 li
42.2919 -336.966 42.7429 -336.623 43.5899 -336.623 cv
43.8428 -336.623 44.1506 -336.689 44.3709 -336.768 cv
cp
45.24 -336.7 mo
46.1638 -336.7 li
46.1638 -342.315 li
45.24 -342.315 li
cp
45.1957 -344.626 mo
45.1957 -343.526 li
46.208 -343.526 li
46.208 -344.626 li
cp
50.7069 -339.508 mo
50.7069 -338.1 50.3219 -337.373 49.4749 -337.373 cv
48.6279 -337.373 48.243 -338.1 48.243 -339.508 cv
48.243 -340.917 48.6279 -341.643 49.4749 -341.643 cv
50.3219 -341.643 50.7069 -340.917 50.7069 -339.508 cv
cp
51.6309 -344.957 mo
50.7069 -344.957 li
50.7069 -341.544 li
50.685 -341.544 li
50.3109 -342.139 49.893 -342.392 49.2549 -342.392 cv
48.0998 -342.392 47.3189 -341.445 47.3189 -339.508 cv
47.3189 -337.571 48.0998 -336.623 49.2549 -336.623 cv
50.0691 -336.623 50.4869 -337.087 50.729 -337.527 cv
50.7508 -337.527 li
50.784 -336.7 li
51.6749 -336.7 li
51.6638 -337.043 51.6309 -337.395 51.6309 -337.736 cv
cp
53.2039 -341.06 mo
53.5228 -341.412 54.0727 -341.643 54.6447 -341.643 cv
55.0297 -341.643 55.3928 -341.544 55.5799 -341.291 cv
55.7559 -341.049 55.7888 -340.807 55.7888 -340.388 cv
55.7888 -340.136 li
55.2497 -340.136 li
53.3246 -340.136 52.61 -339.332 52.61 -338.242 cv
52.61 -337.164 53.3028 -336.623 54.2266 -336.623 cv
55.0847 -336.623 55.5467 -337.032 55.7999 -337.461 cv
55.8217 -337.461 li
55.8767 -336.7 li
56.7129 -336.7 li
56.6908 -336.9 56.6687 -337.23 56.6687 -337.56 cv
56.6687 -340.488 li
56.6687 -341.28 56.4269 -341.622 56.1848 -341.863 cv
56.0088 -342.04 55.5138 -342.392 54.6887 -342.392 cv
54.1388 -342.392 53.5667 -342.227 53.1047 -341.929 cv
cp
55.7888 -338.749 mo
55.7888 -337.979 55.2828 -337.329 54.4798 -337.329 cv
53.8417 -337.329 53.5338 -337.714 53.5338 -338.309 cv
53.5338 -338.958 54.0509 -339.476 55.1397 -339.476 cv
55.3928 -339.476 55.6238 -339.476 55.7888 -339.453 cv
cp
61.0907 -339.508 mo
61.0907 -338.1 60.7058 -337.373 59.8588 -337.373 cv
59.0118 -337.373 58.6269 -338.1 58.6269 -339.508 cv
58.6269 -340.917 59.0118 -341.643 59.8588 -341.643 cv
60.7058 -341.643 61.0907 -340.917 61.0907 -339.508 cv
cp
62.0145 -344.957 mo
61.0907 -344.957 li
61.0907 -341.544 li
61.0689 -341.544 li
60.6947 -342.139 60.2769 -342.392 59.6388 -342.392 cv
58.4837 -342.392 57.7028 -341.445 57.7028 -339.508 cv
57.7028 -337.571 58.4837 -336.623 59.6388 -336.623 cv
60.4529 -336.623 60.8708 -337.087 61.1128 -337.527 cv
61.1347 -337.527 li
61.1678 -336.7 li
62.0585 -336.7 li
62.0474 -337.043 62.0145 -337.395 62.0145 -337.736 cv
cp
67.0415 -336.7 mo
68.1416 -336.7 li
69.8246 -342.315 li
68.8565 -342.315 li
67.6025 -337.626 li
67.5806 -337.626 li
66.3484 -342.315 li
65.3365 -342.315 li
cp
70.6826 -336.7 mo
71.6061 -336.7 li
71.6061 -342.315 li
70.6826 -342.315 li
cp
70.6384 -344.626 mo
70.6384 -343.526 li
71.6503 -343.526 li
71.6503 -344.626 li
cp
72.7391 -336.955 mo
73.1462 -336.746 73.6743 -336.623 74.2574 -336.623 cv
75.5443 -336.623 76.0613 -337.395 76.0613 -338.364 cv
76.0613 -339.057 75.6322 -339.519 74.9502 -339.794 cv
74.6202 -339.927 li
74.0042 -340.169 73.6743 -340.422 73.6743 -340.873 cv
73.6743 -341.313 73.9932 -341.643 74.5984 -341.643 cv
75.0162 -341.643 75.4122 -341.533 75.6982 -341.401 cv
75.7422 -342.194 li
75.4233 -342.315 75.0162 -342.392 74.5542 -342.392 cv
73.4654 -342.392 72.7502 -341.688 72.7502 -340.763 cv
72.7502 -340.047 73.0473 -339.684 73.8503 -339.321 cv
74.4663 -339.046 li
74.9833 -338.815 75.1812 -338.551 75.1812 -338.166 cv
75.1812 -337.736 74.8183 -337.373 74.1142 -337.373 cv
73.6522 -337.373 73.2122 -337.538 72.7941 -337.791 cv
cp
81.0659 -342.315 mo
80.1424 -342.315 li
80.1424 -338.936 li
80.1424 -337.923 79.6803 -337.417 78.9544 -337.417 cv
78.3602 -337.417 78.0303 -337.802 78.0303 -338.694 cv
78.0303 -342.315 li
77.1062 -342.315 li
77.1062 -338.418 li
77.1062 -337.186 77.7664 -336.623 78.7452 -336.623 cv
79.3943 -336.623 79.8671 -336.9 80.1639 -337.538 cv
80.186 -337.538 li
80.2189 -336.7 li
81.1101 -336.7 li
81.0991 -337.098 81.0659 -337.505 81.0659 -337.912 cv
cp
82.727 -341.06 mo
83.0459 -341.412 83.5958 -341.643 84.1679 -341.643 cv
84.5528 -341.643 84.9159 -341.544 85.103 -341.291 cv
85.279 -341.049 85.3119 -340.807 85.3119 -340.388 cv
85.3119 -340.136 li
84.7728 -340.136 li
82.8478 -340.136 82.1329 -339.332 82.1329 -338.242 cv
82.1329 -337.164 82.8259 -336.623 83.7497 -336.623 cv
84.6078 -336.623 85.0698 -337.032 85.323 -337.461 cv
85.3448 -337.461 li
85.3998 -336.7 li
86.236 -336.7 li
86.2139 -336.9 86.1918 -337.23 86.1918 -337.56 cv
86.1918 -340.488 li
86.1918 -341.28 85.95 -341.622 85.7079 -341.863 cv
85.5319 -342.04 85.037 -342.392 84.2118 -342.392 cv
83.6619 -342.392 83.0898 -342.227 82.6278 -341.929 cv
cp
85.3119 -338.749 mo
85.3119 -337.979 84.8059 -337.329 84.0029 -337.329 cv
83.3648 -337.329 83.057 -337.714 83.057 -338.309 cv
83.057 -338.958 83.574 -339.476 84.6628 -339.476 cv
84.9159 -339.476 85.1469 -339.476 85.3119 -339.453 cv
cp
87.589 -336.7 mo
88.5128 -336.7 li
88.5128 -344.957 li
87.589 -344.957 li
cp
93.4184 -339.508 mo
93.4184 -340.917 93.8037 -341.643 94.6507 -341.643 cv
95.4977 -341.643 95.8826 -340.917 95.8826 -339.508 cv
95.8826 -338.1 95.4977 -337.373 94.6507 -337.373 cv
93.8037 -337.373 93.4184 -338.1 93.4184 -339.508 cv
cp
92.4946 -334.322 mo
93.4184 -334.322 li
93.4184 -337.472 li
93.4406 -337.472 li
93.8144 -336.878 94.2326 -336.623 94.8706 -336.623 cv
96.0255 -336.623 96.8067 -337.571 96.8067 -339.508 cv
96.8067 -341.445 96.0255 -342.392 94.8706 -342.392 cv
94.0565 -342.392 93.6387 -341.929 93.3966 -341.49 cv
93.3745 -341.49 li
93.3416 -342.315 li
92.4504 -342.315 li
92.4615 -341.974 92.4946 -341.622 92.4946 -341.28 cv
cp
101.833 -342.315 mo
100.91 -342.315 li
100.91 -338.936 li
100.91 -337.923 100.448 -337.417 99.7216 -337.417 cv
99.1274 -337.417 98.7975 -337.802 98.7975 -338.694 cv
98.7975 -342.315 li
97.8737 -342.315 li
97.8737 -338.418 li
97.8737 -337.186 98.5336 -336.623 99.5124 -336.623 cv
100.161 -336.623 100.634 -336.9 100.931 -337.538 cv
100.954 -337.538 li
100.986 -336.7 li
101.878 -336.7 li
101.867 -337.098 101.833 -337.505 101.833 -337.912 cv
cp
107.036 -339.233 mo
107.036 -339.728 li
107.036 -341.379 106.332 -342.392 105.067 -342.392 cv
103.67 -342.392 102.9 -341.269 102.9 -339.508 cv
102.9 -337.747 103.67 -336.623 105.155 -336.623 cv
105.716 -336.623 106.288 -336.746 106.729 -336.955 cv
106.684 -337.791 li
106.365 -337.56 105.859 -337.329 105.397 -337.329 cv
104.374 -337.329 103.868 -337.934 103.868 -339.233 cv
cp
103.868 -339.937 mo
103.891 -341.247 104.418 -341.688 105.012 -341.688 cv
105.749 -341.688 106.112 -341.104 106.112 -339.937 cv
cp
111.172 -339.508 mo
111.172 -338.1 110.787 -337.373 109.94 -337.373 cv
109.093 -337.373 108.708 -338.1 108.708 -339.508 cv
108.708 -340.917 109.093 -341.643 109.94 -341.643 cv
110.787 -341.643 111.172 -340.917 111.172 -339.508 cv
cp
112.096 -344.957 mo
111.172 -344.957 li
111.172 -341.544 li
111.15 -341.544 li
110.776 -342.139 110.358 -342.392 109.72 -342.392 cv
108.565 -342.392 107.784 -341.445 107.784 -339.508 cv
107.784 -337.571 108.565 -336.623 109.72 -336.623 cv
110.534 -336.623 110.952 -337.087 111.194 -337.527 cv
111.216 -337.527 li
111.249 -336.7 li
112.14 -336.7 li
112.129 -337.043 112.096 -337.395 112.096 -337.736 cv
cp
117.211 -339.233 mo
117.211 -339.728 li
117.211 -341.379 116.507 -342.392 115.242 -342.392 cv
113.845 -342.392 113.075 -341.269 113.075 -339.508 cv
113.075 -337.747 113.845 -336.623 115.33 -336.623 cv
115.891 -336.623 116.463 -336.746 116.903 -336.955 cv
116.859 -337.791 li
116.54 -337.56 116.034 -337.329 115.572 -337.329 cv
114.549 -337.329 114.043 -337.934 114.043 -339.233 cv
cp
114.043 -339.937 mo
114.065 -341.247 114.593 -341.688 115.187 -341.688 cv
115.924 -341.688 116.287 -341.104 116.287 -339.937 cv
cp
118.234 -336.7 mo
119.158 -336.7 li
119.158 -340.081 li
119.158 -341.093 119.62 -341.599 120.346 -341.599 cv
120.94 -341.599 121.27 -341.214 121.27 -340.323 cv
121.27 -336.7 li
122.194 -336.7 li
122.194 -340.598 li
122.194 -341.831 121.534 -342.392 120.555 -342.392 cv
119.906 -342.392 119.433 -342.117 119.136 -341.478 cv
119.114 -341.478 li
119.081 -342.315 li
118.19 -342.315 li
118.201 -341.919 118.234 -341.512 118.234 -341.104 cv
cp
125.879 -336.955 mo
126.286 -336.746 126.814 -336.623 127.397 -336.623 cv
128.684 -336.623 129.201 -337.395 129.201 -338.364 cv
129.201 -339.057 128.772 -339.519 128.09 -339.794 cv
127.76 -339.927 li
127.144 -340.169 126.814 -340.422 126.814 -340.873 cv
126.814 -341.313 127.133 -341.643 127.738 -341.643 cv
128.156 -341.643 128.552 -341.533 128.838 -341.401 cv
128.882 -342.194 li
128.563 -342.315 128.156 -342.392 127.694 -342.392 cv
126.605 -342.392 125.89 -341.688 125.89 -340.763 cv
125.89 -340.047 126.187 -339.684 126.99 -339.321 cv
127.606 -339.046 li
128.123 -338.815 128.321 -338.551 128.321 -338.166 cv
128.321 -337.736 127.958 -337.373 127.254 -337.373 cv
126.792 -337.373 126.352 -337.538 125.934 -337.791 cv
cp
134.107 -339.233 mo
134.107 -339.728 li
134.107 -341.379 133.402 -342.392 132.138 -342.392 cv
130.741 -342.392 129.971 -341.269 129.971 -339.508 cv
129.971 -337.747 130.741 -336.623 132.226 -336.623 cv
132.787 -336.623 133.359 -336.746 133.799 -336.955 cv
133.755 -337.791 li
133.436 -337.56 132.93 -337.329 132.468 -337.329 cv
131.445 -337.329 130.939 -337.934 130.939 -339.233 cv
cp
130.939 -339.937 mo
130.961 -341.247 131.489 -341.688 132.083 -341.688 cv
132.82 -341.688 133.183 -341.104 133.183 -339.937 cv
cp
135.129 -336.7 mo
136.053 -336.7 li
136.053 -339.673 li
136.053 -340.895 136.56 -341.512 137.274 -341.512 cv
137.395 -341.512 137.517 -341.501 137.626 -341.478 cv
137.626 -342.392 li
136.802 -342.392 136.329 -342.117 136.031 -341.434 cv
136.01 -341.434 li
135.976 -342.315 li
135.086 -342.315 li
135.097 -341.919 135.129 -341.512 135.129 -341.104 cv
cp
144.985 -342.315 mo
144.061 -342.315 li
144.061 -338.936 li
144.061 -337.923 143.6 -337.417 142.874 -337.417 cv
142.28 -337.417 141.95 -337.802 141.95 -338.694 cv
141.95 -342.315 li
141.026 -342.315 li
141.026 -338.418 li
141.026 -337.186 141.686 -336.623 142.665 -336.623 cv
143.314 -336.623 143.786 -336.9 144.083 -337.538 cv
144.105 -337.538 li
144.138 -336.7 li
145.029 -336.7 li
145.018 -337.098 144.985 -337.505 144.985 -337.912 cv
cp
148.802 -337.516 mo
148.626 -337.439 148.461 -337.373 148.23 -337.373 cv
147.812 -337.373 147.647 -337.615 147.647 -338.253 cv
147.647 -341.567 li
148.802 -341.567 li
148.802 -342.315 li
147.647 -342.315 li
147.647 -343.735 li
146.723 -343.46 li
146.723 -342.315 li
145.832 -342.315 li
145.832 -341.567 li
146.723 -341.567 li
146.723 -337.956 li
146.723 -336.966 147.174 -336.623 148.021 -336.623 cv
148.274 -336.623 148.582 -336.689 148.802 -336.768 cv
cp
149.671 -336.7 mo
150.595 -336.7 li
150.595 -342.315 li
149.671 -342.315 li
cp
149.627 -344.626 mo
149.627 -343.526 li
150.639 -343.526 li
150.639 -344.626 li
cp
152.113 -336.7 mo
153.037 -336.7 li
153.037 -344.957 li
152.113 -344.957 li
cp
154.555 -336.7 mo
155.479 -336.7 li
155.479 -342.315 li
154.555 -342.315 li
cp
154.511 -344.626 mo
154.511 -343.526 li
155.523 -343.526 li
155.523 -344.626 li
cp
156.678 -339.398 mo
159.054 -339.398 li
159.054 -340.191 li
156.678 -340.191 li
cp
-15.1595 -329.339 mo
-15.1595 -328.546 li
-12.6514 -328.546 li
-15.2474 -324.562 li
-15.2474 -323.725 li
-11.6503 -323.725 li
-11.6503 -324.518 li
-14.3015 -324.518 li
-11.7052 -328.502 li
-11.7052 -329.339 li
cp
-10.3194 -328.084 mo
-10.0005 -328.436 -9.45059 -328.667 -8.87848 -328.667 cv
-8.49359 -328.667 -8.13049 -328.568 -7.94339 -328.315 cv
-7.7674 -328.073 -7.7345 -327.831 -7.7345 -327.412 cv
-7.7345 -327.159 li
-8.27359 -327.159 li
-10.1986 -327.159 -10.9135 -326.356 -10.9135 -325.266 cv
-10.9135 -324.187 -10.2205 -323.646 -9.2966 -323.646 cv
-8.4386 -323.646 -7.97659 -324.056 -7.72339 -324.484 cv
-7.7016 -324.484 li
-7.64658 -323.723 li
-6.81039 -323.723 li
-6.83249 -323.923 -6.85458 -324.253 -6.85458 -324.584 cv
-6.85458 -327.512 li
-6.85458 -328.304 -7.09637 -328.645 -7.3385 -328.887 cv
-7.5145 -329.063 -8.0094 -329.415 -8.83459 -329.415 cv
-9.38449 -329.415 -9.95657 -329.25 -10.4186 -328.953 cv
cp
-7.7345 -325.772 mo
-7.7345 -325.002 -8.24048 -324.352 -9.04349 -324.352 cv
-9.68158 -324.352 -9.98938 -324.738 -9.98938 -325.332 cv
-9.98938 -325.981 -9.47238 -326.499 -8.38358 -326.499 cv
-8.13049 -326.499 -7.89938 -326.499 -7.7345 -326.477 cv
cp
-2.43259 -326.532 mo
-2.43259 -325.123 -2.81747 -324.397 -3.66449 -324.397 cv
-4.51147 -324.397 -4.89639 -325.123 -4.89639 -326.532 cv
-4.89639 -327.94 -4.51147 -328.667 -3.66449 -328.667 cv
-2.81747 -328.667 -2.43259 -327.94 -2.43259 -326.532 cv
cp
-1.5087 -331.98 mo
-2.43259 -331.98 li
-2.43259 -328.568 li
-2.45438 -328.568 li
-2.82858 -329.162 -3.2464 -329.415 -3.88449 -329.415 cv
-5.03958 -329.415 -5.8205 -328.469 -5.8205 -326.532 cv
-5.8205 -324.595 -5.03958 -323.646 -3.88449 -323.646 cv
-3.07028 -323.646 -2.6525 -324.111 -2.4104 -324.551 cv
-2.38858 -324.551 li
-2.35538 -323.723 li
-1.46478 -323.723 li
-1.47589 -324.066 -1.5087 -324.418 -1.5087 -324.76 cv
cp
.438416 -326.532 mo
.438416 -327.94 .845428 -328.667 1.72531 -328.667 cv
2.6055 -328.667 3.01251 -327.94 3.01251 -326.532 cv
3.01251 -325.123 2.6055 -324.397 1.72531 -324.397 cv
.845428 -324.397 .438416 -325.123 .438416 -326.532 cv
cp
-.529694 -326.532 mo
-.529694 -324.771 .240204 -323.646 1.72531 -323.646 cv
3.21042 -323.646 3.98032 -324.771 3.98032 -326.532 cv
3.98032 -328.293 3.21042 -329.415 1.72531 -329.415 cv
.240204 -329.415 -.529694 -328.293 -.529694 -326.532 cv
.17 .16 .16 rgb
ef
4.75021 -323.978 mo
5.15723 -323.769 5.6853 -323.646 6.2684 -323.646 cv
7.55502 -323.646 8.07211 -324.418 8.07211 -325.387 cv
8.07211 -326.081 7.64291 -326.543 6.96121 -326.818 cv
6.63123 -326.95 li
6.01532 -327.192 5.6853 -327.445 5.6853 -327.896 cv
5.6853 -328.337 6.00421 -328.667 6.60941 -328.667 cv
7.02722 -328.667 7.42291 -328.557 7.70901 -328.425 cv
7.7529 -329.218 li
7.43402 -329.339 7.02722 -329.415 6.56522 -329.415 cv
5.47641 -329.415 4.7612 -328.711 4.7612 -327.786 cv
4.7612 -327.071 5.05832 -326.708 5.86133 -326.345 cv
6.47733 -326.07 li
6.99432 -325.838 7.1922 -325.574 7.1922 -325.189 cv
7.1922 -324.76 6.82941 -324.397 6.12521 -324.397 cv
5.66321 -324.397 5.22333 -324.562 4.80511 -324.815 cv
cp
11.4598 -323.978 mo
11.8668 -323.769 12.3949 -323.646 12.978 -323.646 cv
14.2649 -323.646 14.782 -324.418 14.782 -325.387 cv
14.782 -326.081 14.3528 -326.543 13.6708 -326.818 cv
13.3408 -326.95 li
12.7249 -327.192 12.3949 -327.445 12.3949 -327.896 cv
12.3949 -328.337 12.7138 -328.667 13.319 -328.667 cv
13.7368 -328.667 14.1328 -328.557 14.4189 -328.425 cv
14.4628 -329.218 li
14.1439 -329.339 13.7368 -329.415 13.2748 -329.415 cv
12.186 -329.415 11.4708 -328.711 11.4708 -327.786 cv
11.4708 -327.071 11.7679 -326.708 12.5709 -326.345 cv
13.1869 -326.07 li
13.704 -325.838 13.9018 -325.574 13.9018 -325.189 cv
13.9018 -324.76 13.539 -324.397 12.8349 -324.397 cv
12.3728 -324.397 11.9329 -324.562 11.5148 -324.815 cv
cp
19.6876 -326.257 mo
19.6876 -326.752 li
19.6876 -328.403 18.9835 -329.415 17.7187 -329.415 cv
16.3217 -329.415 15.5519 -328.293 15.5519 -326.532 cv
15.5519 -324.771 16.3217 -323.646 17.8065 -323.646 cv
18.3675 -323.646 18.9395 -323.769 19.3798 -323.978 cv
19.3355 -324.815 li
19.0166 -324.584 18.5107 -324.352 18.0486 -324.352 cv
17.0256 -324.352 16.5196 -324.958 16.5196 -326.257 cv
cp
16.5196 -326.961 mo
16.5417 -328.271 17.0695 -328.711 17.6637 -328.711 cv
18.4007 -328.711 18.7635 -328.128 18.7635 -326.961 cv
cp
21.3598 -326.532 mo
21.3598 -327.94 21.7447 -328.667 22.5917 -328.667 cv
23.4387 -328.667 23.8236 -327.94 23.8236 -326.532 cv
23.8236 -325.123 23.4387 -324.397 22.5917 -324.397 cv
21.7447 -324.397 21.3598 -325.123 21.3598 -326.532 cv
cp
24.7477 -328.315 mo
24.7477 -328.656 24.7806 -329.008 24.7917 -329.339 cv
23.9007 -329.339 li
23.8676 -328.524 li
23.8457 -328.524 li
23.5376 -329.063 23.0316 -329.415 22.4707 -329.415 cv
21.2166 -329.415 20.4357 -328.469 20.4357 -326.532 cv
20.4357 -324.595 21.2166 -323.646 22.3717 -323.646 cv
22.9877 -323.646 23.4826 -323.956 23.8457 -324.595 cv
23.8676 -324.595 li
23.8676 -323.712 li
23.8676 -322.744 23.4276 -322.073 22.2946 -322.073 cv
21.7886 -322.073 21.1506 -322.292 20.7546 -322.557 cv
20.7106 -321.621 li
21.1177 -321.456 21.8768 -321.28 22.3496 -321.28 cv
23.5818 -321.28 24.7477 -321.929 24.7477 -323.481 cv
cp
27.4316 -330.109 mo
28.1357 -330.109 li
29.2577 -331.705 li
28.1686 -331.705 li
cp
29.9615 -329.339 mo
29.0377 -329.339 li
29.0377 -325.959 li
29.0377 -324.947 28.5756 -324.44 27.8497 -324.44 cv
27.2555 -324.44 26.9256 -324.826 26.9256 -325.717 cv
26.9256 -329.339 li
26.0015 -329.339 li
26.0015 -325.442 li
26.0015 -324.21 26.6617 -323.646 27.6405 -323.646 cv
28.2896 -323.646 28.7624 -323.923 29.0595 -324.562 cv
29.0816 -324.562 li
29.1145 -323.723 li
30.0057 -323.723 li
29.9947 -324.121 29.9615 -324.529 29.9615 -324.936 cv
cp
31.3034 -323.723 mo
32.2275 -323.723 li
32.2275 -327.104 li
32.2275 -328.117 32.6896 -328.623 33.4155 -328.623 cv
34.0094 -328.623 34.3396 -328.238 34.3396 -327.346 cv
34.3396 -323.723 li
35.2631 -323.723 li
35.2631 -327.622 li
35.2631 -328.854 34.6032 -329.415 33.6244 -329.415 cv
32.9756 -329.415 32.5025 -329.14 32.2054 -328.502 cv
32.1836 -328.502 li
32.1504 -329.339 li
31.2595 -329.339 li
31.2705 -328.942 31.3034 -328.535 31.3034 -328.128 cv
cp
39.3331 -323.723 mo
40.2569 -323.723 li
40.2569 -331.98 li
39.3331 -331.98 li
cp
42.0062 -328.084 mo
42.3251 -328.436 42.875 -328.667 43.447 -328.667 cv
43.8317 -328.667 44.1948 -328.568 44.3819 -328.315 cv
44.5579 -328.073 44.5908 -327.831 44.5908 -327.412 cv
44.5908 -327.159 li
44.0517 -327.159 li
42.1269 -327.159 41.412 -326.356 41.412 -325.266 cv
41.412 -324.187 42.1051 -323.646 43.0289 -323.646 cv
43.8867 -323.646 44.3487 -324.056 44.6019 -324.484 cv
44.6237 -324.484 li
44.6787 -323.723 li
45.5149 -323.723 li
45.4928 -323.923 45.4707 -324.253 45.4707 -324.584 cv
45.4707 -327.512 li
45.4707 -328.304 45.2289 -328.645 44.9868 -328.887 cv
44.8108 -329.063 44.3159 -329.415 43.491 -329.415 cv
42.9411 -329.415 42.369 -329.25 41.907 -328.953 cv
cp
44.5908 -325.772 mo
44.5908 -325.002 44.0848 -324.352 43.2821 -324.352 cv
42.644 -324.352 42.3361 -324.738 42.3361 -325.332 cv
42.3361 -325.981 42.8532 -326.499 43.9417 -326.499 cv
44.1948 -326.499 44.4258 -326.499 44.5908 -326.477 cv
cp
46.4827 -323.978 mo
46.8897 -323.769 47.4178 -323.646 48.0009 -323.646 cv
49.2878 -323.646 49.8049 -324.418 49.8049 -325.387 cv
49.8049 -326.081 49.3757 -326.543 48.6937 -326.818 cv
48.3637 -326.95 li
47.7478 -327.192 47.4178 -327.445 47.4178 -327.896 cv
47.4178 -328.337 47.7367 -328.667 48.3419 -328.667 cv
48.7597 -328.667 49.1557 -328.557 49.4417 -328.425 cv
49.4857 -329.218 li
49.1668 -329.339 48.7597 -329.415 48.2977 -329.415 cv
47.2089 -329.415 46.4937 -328.711 46.4937 -327.786 cv
46.4937 -327.071 46.7908 -326.708 47.5938 -326.345 cv
48.2098 -326.07 li
48.7269 -325.838 48.9247 -325.574 48.9247 -325.189 cv
48.9247 -324.76 48.5619 -324.397 47.8577 -324.397 cv
47.3957 -324.397 46.9558 -324.562 46.5377 -324.815 cv
cp
56.6023 -326.532 mo
56.6023 -325.123 56.2174 -324.397 55.3704 -324.397 cv
54.5234 -324.397 54.1385 -325.123 54.1385 -326.532 cv
54.1385 -327.94 54.5234 -328.667 55.3704 -328.667 cv
56.2174 -328.667 56.6023 -327.94 56.6023 -326.532 cv
cp
57.5264 -331.98 mo
56.6023 -331.98 li
56.6023 -328.568 li
56.5805 -328.568 li
56.2063 -329.162 55.7885 -329.415 55.1504 -329.415 cv
53.9953 -329.415 53.2144 -328.469 53.2144 -326.532 cv
53.2144 -324.595 53.9953 -323.646 55.1504 -323.646 cv
55.9646 -323.646 56.3824 -324.111 56.6245 -324.551 cv
56.6463 -324.551 li
56.6794 -323.723 li
57.5704 -323.723 li
57.5593 -324.066 57.5264 -324.418 57.5264 -324.76 cv
cp
59.4736 -326.532 mo
59.4736 -327.94 59.8806 -328.667 60.7605 -328.667 cv
61.6406 -328.667 62.0474 -327.94 62.0474 -326.532 cv
62.0474 -325.123 61.6406 -324.397 60.7605 -324.397 cv
59.8806 -324.397 59.4736 -325.123 59.4736 -326.532 cv
cp
58.5055 -326.532 mo
58.5055 -324.771 59.2754 -323.646 60.7605 -323.646 cv
62.2453 -323.646 63.0152 -324.771 63.0152 -326.532 cv
63.0152 -328.293 62.2453 -329.415 60.7605 -329.415 cv
59.2754 -329.415 58.5055 -328.293 58.5055 -326.532 cv
cp
63.7851 -323.978 mo
64.1921 -323.769 64.7202 -323.646 65.3033 -323.646 cv
66.5902 -323.646 67.1073 -324.418 67.1073 -325.387 cv
67.1073 -326.081 66.6781 -326.543 65.9961 -326.818 cv
65.6661 -326.95 li
65.0502 -327.192 64.7202 -327.445 64.7202 -327.896 cv
64.7202 -328.337 65.0391 -328.667 65.6443 -328.667 cv
66.0621 -328.667 66.4581 -328.557 66.7441 -328.425 cv
66.7881 -329.218 li
66.4692 -329.339 66.0621 -329.415 65.6001 -329.415 cv
64.5113 -329.415 63.7961 -328.711 63.7961 -327.786 cv
63.7961 -327.071 64.0932 -326.708 64.8962 -326.345 cv
65.5122 -326.07 li
66.0292 -325.838 66.2271 -325.574 66.2271 -325.189 cv
66.2271 -324.76 65.8643 -324.397 65.1601 -324.397 cv
64.6981 -324.397 64.2582 -324.562 63.84 -324.815 cv
cp
71.9247 -323.723 mo
73.0249 -323.723 li
74.7078 -329.339 li
73.7398 -329.339 li
72.4857 -324.65 li
72.4639 -324.65 li
71.2317 -329.339 li
70.22 -329.339 li
cp
75.5987 -328.084 mo
75.9176 -328.436 76.4675 -328.667 77.0396 -328.667 cv
77.4245 -328.667 77.7876 -328.568 77.9747 -328.315 cv
78.1508 -328.073 78.1836 -327.831 78.1836 -327.412 cv
78.1836 -327.159 li
77.6445 -327.159 li
75.7195 -327.159 75.0046 -326.356 75.0046 -325.266 cv
75.0046 -324.187 75.6977 -323.646 76.6215 -323.646 cv
77.4795 -323.646 77.9416 -324.056 78.1947 -324.484 cv
78.2165 -324.484 li
78.2715 -323.723 li
79.1077 -323.723 li
79.0856 -323.923 79.0635 -324.253 79.0635 -324.584 cv
79.0635 -327.512 li
79.0635 -328.304 78.8217 -328.645 78.5796 -328.887 cv
78.4036 -329.063 77.9087 -329.415 77.0835 -329.415 cv
76.5336 -329.415 75.9616 -329.25 75.4995 -328.953 cv
cp
78.1836 -325.772 mo
78.1836 -325.002 77.6777 -324.352 76.8746 -324.352 cv
76.2365 -324.352 75.9287 -324.738 75.9287 -325.332 cv
75.9287 -325.981 76.4457 -326.499 77.5345 -326.499 cv
77.7876 -326.499 78.0187 -326.499 78.1836 -326.477 cv
cp
80.3723 -323.723 mo
81.2964 -323.723 li
81.2964 -326.697 li
81.2964 -327.919 81.8023 -328.535 82.5172 -328.535 cv
82.6383 -328.535 82.7593 -328.524 82.8693 -328.502 cv
82.8693 -329.415 li
82.0444 -329.415 81.5713 -329.14 81.2743 -328.458 cv
81.2524 -328.458 li
81.2193 -329.339 li
80.3283 -329.339 li
80.3394 -328.942 80.3723 -328.535 80.3723 -328.128 cv
cp
83.7166 -323.723 mo
84.6404 -323.723 li
84.6404 -329.339 li
83.7166 -329.339 li
cp
83.6724 -331.65 mo
83.6724 -330.549 li
84.6846 -330.549 li
84.6846 -331.65 li
cp
86.3897 -328.084 mo
86.7086 -328.436 87.2585 -328.667 87.8305 -328.667 cv
88.2154 -328.667 88.5786 -328.568 88.7657 -328.315 cv
88.9417 -328.073 88.9746 -327.831 88.9746 -327.412 cv
88.9746 -327.159 li
88.4354 -327.159 li
86.5104 -327.159 85.7955 -326.356 85.7955 -325.266 cv
85.7955 -324.187 86.4886 -323.646 87.4124 -323.646 cv
88.2704 -323.646 88.7325 -324.056 88.9856 -324.484 cv
89.0074 -324.484 li
89.0624 -323.723 li
89.8984 -323.723 li
89.8763 -323.923 89.8542 -324.253 89.8542 -324.584 cv
89.8542 -327.512 li
89.8542 -328.304 89.6124 -328.645 89.3703 -328.887 cv
89.1945 -329.063 88.6996 -329.415 87.8744 -329.415 cv
87.3245 -329.415 86.7525 -329.25 86.2904 -328.953 cv
cp
88.9746 -325.772 mo
88.9746 -325.002 88.4686 -324.352 87.6655 -324.352 cv
87.0274 -324.352 86.7196 -324.738 86.7196 -325.332 cv
86.7196 -325.981 87.2366 -326.499 88.3254 -326.499 cv
88.5786 -326.499 88.8096 -326.499 88.9746 -326.477 cv
cp
91.1632 -323.723 mo
92.0873 -323.723 li
92.0873 -327.104 li
92.0873 -328.117 92.5493 -328.623 93.2753 -328.623 cv
93.8691 -328.623 94.1994 -328.238 94.1994 -327.346 cv
94.1994 -323.723 li
95.1232 -323.723 li
95.1232 -327.622 li
95.1232 -328.854 94.4633 -329.415 93.4842 -329.415 cv
92.8354 -329.415 92.3623 -329.14 92.0652 -328.502 cv
92.0434 -328.502 li
92.0102 -329.339 li
91.1193 -329.339 li
91.1303 -328.942 91.1632 -328.535 91.1632 -328.128 cv
cp
98.94 -324.54 mo
98.764 -324.462 98.599 -324.397 98.3683 -324.397 cv
97.9502 -324.397 97.7852 -324.639 97.7852 -325.277 cv
97.7852 -328.59 li
98.94 -328.59 li
98.94 -329.339 li
97.7852 -329.339 li
97.7852 -330.758 li
96.8611 -330.483 li
96.8611 -329.339 li
95.9702 -329.339 li
95.9702 -328.59 li
96.8611 -328.59 li
96.8611 -324.98 li
96.8611 -323.989 97.3121 -323.646 98.1591 -323.646 cv
98.412 -323.646 98.7198 -323.712 98.94 -323.791 cv
cp
103.582 -326.257 mo
103.582 -326.752 li
103.582 -328.403 102.878 -329.415 101.613 -329.415 cv
100.216 -329.415 99.446 -328.293 99.446 -326.532 cv
99.446 -324.771 100.216 -323.646 101.701 -323.646 cv
102.262 -323.646 102.834 -323.769 103.274 -323.978 cv
103.23 -324.815 li
102.911 -324.584 102.405 -324.352 101.943 -324.352 cv
100.92 -324.352 100.414 -324.958 100.414 -326.257 cv
cp
100.414 -326.961 mo
100.436 -328.271 100.964 -328.711 101.558 -328.711 cv
102.295 -328.711 102.658 -328.128 102.658 -326.961 cv
cp
104.308 -323.978 mo
104.715 -323.769 105.243 -323.646 105.826 -323.646 cv
107.113 -323.646 107.63 -324.418 107.63 -325.387 cv
107.63 -326.081 107.201 -326.543 106.519 -326.818 cv
106.189 -326.95 li
105.573 -327.192 105.243 -327.445 105.243 -327.896 cv
105.243 -328.337 105.562 -328.667 106.167 -328.667 cv
106.585 -328.667 106.981 -328.557 107.267 -328.425 cv
107.311 -329.218 li
106.992 -329.339 106.585 -329.415 106.123 -329.415 cv
105.034 -329.415 104.319 -328.711 104.319 -327.786 cv
104.319 -327.071 104.616 -326.708 105.419 -326.345 cv
106.035 -326.07 li
106.552 -325.838 106.75 -325.574 106.75 -325.189 cv
106.75 -324.76 106.387 -324.397 105.683 -324.397 cv
105.221 -324.397 104.781 -324.562 104.363 -324.815 cv
cp
114.428 -326.532 mo
114.428 -325.123 114.043 -324.397 113.196 -324.397 cv
112.349 -324.397 111.964 -325.123 111.964 -326.532 cv
111.964 -327.94 112.349 -328.667 113.196 -328.667 cv
114.043 -328.667 114.428 -327.94 114.428 -326.532 cv
cp
114.428 -321.346 mo
115.352 -321.346 li
115.352 -328.304 li
115.352 -328.645 115.385 -328.997 115.396 -329.339 cv
114.505 -329.339 li
114.472 -328.513 li
114.45 -328.513 li
114.208 -328.953 113.79 -329.415 112.976 -329.415 cv
111.821 -329.415 111.04 -328.469 111.04 -326.532 cv
111.04 -324.595 111.821 -323.646 112.976 -323.646 cv
113.614 -323.646 114.032 -323.901 114.406 -324.495 cv
114.428 -324.495 li
cp
120.566 -329.339 mo
119.642 -329.339 li
119.642 -325.959 li
119.642 -324.947 119.18 -324.44 118.454 -324.44 cv
117.86 -324.44 117.53 -324.826 117.53 -325.717 cv
117.53 -329.339 li
116.606 -329.339 li
116.606 -325.442 li
116.606 -324.21 117.266 -323.646 118.245 -323.646 cv
118.894 -323.646 119.367 -323.923 119.664 -324.562 cv
119.686 -324.562 li
119.719 -323.723 li
120.61 -323.723 li
120.599 -324.121 120.566 -324.529 120.566 -324.936 cv
cp
125.768 -326.257 mo
125.768 -326.752 li
125.768 -328.403 125.064 -329.415 123.8 -329.415 cv
122.402 -329.415 121.633 -328.293 121.633 -326.532 cv
121.633 -324.771 122.402 -323.646 123.888 -323.646 cv
124.449 -323.646 125.021 -323.769 125.461 -323.978 cv
125.417 -324.815 li
125.098 -324.584 124.592 -324.352 124.13 -324.352 cv
123.107 -324.352 122.601 -324.958 122.601 -326.257 cv
cp
122.601 -326.961 mo
122.623 -328.271 123.151 -328.711 123.745 -328.711 cv
124.482 -328.711 124.845 -328.128 124.845 -326.961 cv
cp
129.134 -323.978 mo
129.541 -323.769 130.069 -323.646 130.652 -323.646 cv
131.939 -323.646 132.456 -324.418 132.456 -325.387 cv
132.456 -326.081 132.027 -326.543 131.345 -326.818 cv
131.015 -326.95 li
130.399 -327.192 130.069 -327.445 130.069 -327.896 cv
130.069 -328.337 130.388 -328.667 130.993 -328.667 cv
131.411 -328.667 131.807 -328.557 132.093 -328.425 cv
132.137 -329.218 li
131.818 -329.339 131.411 -329.415 130.949 -329.415 cv
129.86 -329.415 129.145 -328.711 129.145 -327.786 cv
129.145 -327.071 129.442 -326.708 130.245 -326.345 cv
130.861 -326.07 li
131.378 -325.838 131.576 -325.574 131.576 -325.189 cv
131.576 -324.76 131.213 -324.397 130.509 -324.397 cv
130.047 -324.397 129.607 -324.562 129.189 -324.815 cv
cp
137.362 -326.257 mo
137.362 -326.752 li
137.362 -328.403 136.658 -329.415 135.393 -329.415 cv
133.996 -329.415 133.226 -328.293 133.226 -326.532 cv
133.226 -324.771 133.996 -323.646 135.481 -323.646 cv
136.042 -323.646 136.614 -323.769 137.054 -323.978 cv
137.01 -324.815 li
136.691 -324.584 136.185 -324.352 135.723 -324.352 cv
134.7 -324.352 134.194 -324.958 134.194 -326.257 cv
cp
134.194 -326.961 mo
134.216 -328.271 134.744 -328.711 135.338 -328.711 cv
136.075 -328.711 136.438 -328.128 136.438 -326.961 cv
cp
-14.9175 -310.747 mo
-13.9934 -310.747 li
-13.9934 -314.216 li
-13.9934 -315.229 -13.6195 -315.647 -12.9375 -315.647 cv
-12.3873 -315.647 -12.0794 -315.316 -12.0794 -314.601 cv
-12.0794 -310.747 li
-11.1553 -310.747 li
-11.1553 -314.216 li
-11.1553 -315.229 -10.7817 -315.647 -10.0997 -315.647 cv
-9.54977 -315.647 -9.2417 -315.316 -9.2417 -314.601 cv
-9.2417 -310.747 li
-8.3176 -310.747 li
-8.3176 -314.645 li
-8.3176 -315.878 -8.97769 -316.439 -9.9458 -316.439 cv
-10.5836 -316.439 -11.0127 -316.109 -11.3092 -315.559 cv
-11.5953 -316.131 -12.0355 -316.439 -12.6293 -316.439 cv
-13.2453 -316.439 -13.7184 -316.164 -14.0155 -315.526 cv
-14.0373 -315.526 li
-14.0705 -316.362 li
-14.9614 -316.362 li
-14.9503 -315.966 -14.9175 -315.559 -14.9175 -315.151 cv
cp
-3.01559 -316.362 mo
-3.93939 -316.362 li
-3.93939 -312.983 li
-3.93939 -311.97 -4.40149 -311.464 -5.12738 -311.464 cv
-5.72159 -311.464 -6.05148 -311.849 -6.05148 -312.741 cv
-6.05148 -316.362 li
-6.97559 -316.362 li
-6.97559 -312.466 li
-6.97559 -311.233 -6.3154 -310.67 -5.33658 -310.67 cv
-4.6875 -310.67 -4.21469 -310.947 -3.91757 -311.585 cv
-3.89548 -311.585 li
-3.86258 -310.747 li
-2.97137 -310.747 li
-2.98248 -311.145 -3.01559 -311.552 -3.01559 -311.959 cv
cp
2.1871 -313.28 mo
2.1871 -313.776 li
2.1871 -315.426 1.48291 -316.439 .218109 -316.439 cv
-1.17908 -316.439 -1.9487 -315.316 -1.9487 -313.555 cv
-1.9487 -311.794 -1.17908 -310.67 .306 -310.67 cv
.867004 -310.67 1.43903 -310.793 1.87921 -311.002 cv
1.83502 -311.838 li
1.51611 -311.607 1.0101 -311.376 .548126 -311.376 cv
-.474884 -311.376 -.980896 -311.981 -.980896 -313.28 cv
cp
-.980896 -313.984 mo
-.958801 -315.294 -.431 -315.735 .163116 -315.735 cv
.900116 -315.735 1.263 -315.151 1.263 -313.984 cv
cp
2.91302 -311.002 mo
3.3201 -310.793 3.84821 -310.67 4.4313 -310.67 cv
5.7182 -310.67 6.2352 -311.442 6.2352 -312.411 cv
6.2352 -313.104 5.80612 -313.567 5.12402 -313.841 cv
4.79413 -313.974 li
4.1781 -314.216 3.84821 -314.469 3.84821 -314.92 cv
3.84821 -315.36 4.16711 -315.69 4.77231 -315.69 cv
5.19012 -315.69 5.58612 -315.581 5.8721 -315.448 cv
5.91602 -316.241 li
5.59711 -316.362 5.19012 -316.439 4.72803 -316.439 cv
3.63931 -316.439 2.9241 -315.735 2.9241 -314.81 cv
2.9241 -314.095 3.2211 -313.732 4.0242 -313.368 cv
4.64023 -313.093 li
5.15723 -312.862 5.3551 -312.598 5.3551 -312.213 cv
5.3551 -311.783 4.99222 -311.42 4.28812 -311.42 cv
3.82611 -311.42 3.38611 -311.585 2.96802 -311.838 cv
cp
9.755 -311.563 mo
9.57901 -311.486 9.414 -311.42 9.18301 -311.42 cv
8.76492 -311.42 8.59991 -311.662 8.59991 -312.301 cv
8.59991 -315.614 li
9.755 -315.614 li
9.755 -316.362 li
8.59991 -316.362 li
8.59991 -317.782 li
7.67581 -317.506 li
7.67581 -316.362 li
6.78513 -316.362 li
6.78513 -315.614 li
7.67581 -315.614 li
7.67581 -312.003 li
7.67581 -311.013 8.1268 -310.67 8.97382 -310.67 cv
9.22693 -310.67 9.53482 -310.736 9.755 -310.815 cv
cp
10.536 -310.747 mo
11.46 -310.747 li
11.46 -313.721 li
11.46 -314.942 11.966 -315.559 12.6809 -315.559 cv
12.802 -315.559 12.923 -315.548 13.033 -315.526 cv
13.033 -316.439 li
12.2081 -316.439 11.735 -316.164 11.4379 -315.481 cv
11.4161 -315.481 li
11.3829 -316.362 li
10.492 -316.362 li
10.5031 -315.966 10.536 -315.559 10.536 -315.151 cv
cp
17.6529 -313.28 mo
17.6529 -313.776 li
17.6529 -315.426 16.9488 -316.439 15.6842 -316.439 cv
14.287 -316.439 13.5171 -315.316 13.5171 -313.555 cv
13.5171 -311.794 14.287 -310.67 15.7721 -310.67 cv
16.3328 -310.67 16.9048 -310.793 17.3451 -311.002 cv
17.3008 -311.838 li
16.9819 -311.607 16.476 -311.376 16.0142 -311.376 cv
14.9912 -311.376 14.4852 -311.981 14.4852 -313.28 cv
cp
14.4852 -313.984 mo
14.5073 -315.294 15.0351 -315.735 15.6292 -315.735 cv
16.366 -315.735 16.7288 -315.151 16.7288 -313.984 cv
cp
18.6759 -310.747 mo
19.6 -310.747 li
19.6 -314.128 li
19.6 -315.14 20.0621 -315.647 20.788 -315.647 cv
21.3819 -315.647 21.7121 -315.261 21.7121 -314.37 cv
21.7121 -310.747 li
22.6359 -310.747 li
22.6359 -314.645 li
22.6359 -315.878 21.976 -316.439 20.9969 -316.439 cv
20.3481 -316.439 19.875 -316.164 19.5779 -315.526 cv
19.5561 -315.526 li
19.5229 -316.362 li
18.632 -316.362 li
18.643 -315.966 18.6759 -315.559 18.6759 -315.151 cv
cp
24.0989 -310.749 mo
25.1548 -310.749 li
25.1548 -311.981 li
24.0989 -311.981 li
cp
-14.7414 -297.772 mo
-11.0238 -297.772 li
-11.0238 -298.609 li
-13.7734 -298.609 li
-13.7734 -301.338 li
-11.2874 -301.338 li
-11.2874 -302.175 li
-13.7734 -302.175 li
-13.7734 -304.618 li
-11.1664 -304.618 li
-11.1664 -305.455 li
-14.7414 -305.455 li
cp
-10.1218 -298.025 mo
-9.71478 -297.816 -9.18668 -297.693 -8.60358 -297.693 cv
-7.31659 -297.693 -6.79959 -298.466 -6.79959 -299.434 cv
-6.79959 -300.128 -7.22879 -300.59 -7.9108 -300.865 cv
-8.24069 -300.997 li
-8.85669 -301.239 -9.18668 -301.492 -9.18668 -301.944 cv
-9.18668 -302.384 -8.8678 -302.714 -8.26257 -302.714 cv
-7.8447 -302.714 -7.4487 -302.604 -7.16269 -302.472 cv
-7.11877 -303.265 li
-7.43768 -303.386 -7.8447 -303.462 -8.30679 -303.462 cv
-9.3956 -303.462 -10.1108 -302.758 -10.1108 -301.834 cv
-10.1108 -301.118 -9.81369 -300.755 -9.01059 -300.392 cv
-8.39468 -300.117 li
-7.87759 -299.885 -7.67978 -299.622 -7.67978 -299.236 cv
-7.67978 -298.807 -8.04257 -298.444 -8.74667 -298.444 cv
-9.2088 -298.444 -9.64868 -298.609 -10.0668 -298.862 cv
cp
-3.27948 -298.587 mo
-3.4556 -298.51 -3.62057 -298.444 -3.85159 -298.444 cv
-4.26968 -298.444 -4.43469 -298.686 -4.43469 -299.324 cv
-4.43469 -302.637 li
-3.27948 -302.637 li
-3.27948 -303.386 li
-4.43469 -303.386 li
-4.43469 -304.805 li
-5.3588 -304.53 li
-5.3588 -303.386 li
-6.24969 -303.386 li
-6.24969 -302.637 li
-5.3588 -302.637 li
-5.3588 -299.027 li
-5.3588 -298.036 -4.90778 -297.693 -4.06079 -297.693 cv
-3.80759 -297.693 -3.49979 -297.759 -3.27948 -297.838 cv
cp
-1.80579 -300.579 mo
-1.80579 -301.988 -1.39877 -302.714 -.51889 -302.714 cv
.361328 -302.714 .768311 -301.988 .768311 -300.579 cv
.768311 -299.17 .361328 -298.444 -.51889 -298.444 cv
-1.39877 -298.444 -1.80579 -299.17 -1.80579 -300.579 cv
cp
-2.77359 -300.579 mo
-2.77359 -298.818 -2.00369 -297.693 -.51889 -297.693 cv
.966217 -297.693 1.73611 -298.818 1.73611 -300.579 cv
1.73611 -302.34 .966217 -303.462 -.51889 -303.462 cv
-2.00369 -303.462 -2.77359 -302.34 -2.77359 -300.579 cv
cp
6.2789 -300.579 mo
6.2789 -301.988 6.66412 -302.714 7.5108 -302.714 cv
8.35782 -302.714 8.74283 -301.988 8.74283 -300.579 cv
8.74283 -299.17 8.35782 -298.444 7.5108 -298.444 cv
6.66412 -298.444 6.2789 -299.17 6.2789 -300.579 cv
cp
5.3551 -295.393 mo
6.2789 -295.393 li
6.2789 -298.543 li
6.30103 -298.543 li
6.67493 -297.948 7.09302 -297.693 7.7308 -297.693 cv
8.88562 -297.693 9.6669 -298.642 9.6669 -300.579 cv
9.6669 -302.516 8.88562 -303.462 7.7308 -303.462 cv
6.91702 -303.462 6.49911 -303 6.25711 -302.56 cv
6.23492 -302.56 li
6.20212 -303.386 li
5.31091 -303.386 li
5.3219 -303.044 5.3551 -302.692 5.3551 -302.351 cv
cp
14.5949 -300.304 mo
14.5949 -300.799 li
14.5949 -302.45 13.8908 -303.462 12.6259 -303.462 cv
11.2287 -303.462 10.4589 -302.34 10.4589 -300.579 cv
10.4589 -298.818 11.2287 -297.693 12.7138 -297.693 cv
13.2748 -297.693 13.8468 -297.816 14.287 -298.025 cv
14.2428 -298.862 li
13.9239 -298.631 13.4179 -298.399 12.9559 -298.399 cv
11.9329 -298.399 11.4269 -299.005 11.4269 -300.304 cv
cp
11.4269 -301.008 mo
11.449 -302.318 11.9768 -302.758 12.5709 -302.758 cv
13.308 -302.758 13.6708 -302.175 13.6708 -301.008 cv
cp
15.6179 -297.771 mo
16.5417 -297.771 li
16.5417 -300.744 li
16.5417 -301.966 17.0477 -302.582 17.7626 -302.582 cv
17.8836 -302.582 18.0047 -302.571 18.1147 -302.549 cv
18.1147 -303.462 li
17.2898 -303.462 16.8167 -303.188 16.5196 -302.505 cv
16.4978 -302.505 li
16.4646 -303.386 li
15.574 -303.386 li
15.585 -302.989 15.6179 -302.582 15.6179 -302.175 cv
cp
18.8738 -297.771 mo
19.7979 -297.771 li
19.7979 -301.239 li
19.7979 -302.252 20.1718 -302.67 20.8538 -302.67 cv
21.404 -302.67 21.7118 -302.34 21.7118 -301.625 cv
21.7118 -297.771 li
22.6359 -297.771 li
22.6359 -301.239 li
22.6359 -302.252 23.0098 -302.67 23.6918 -302.67 cv
24.2417 -302.67 24.5499 -302.34 24.5499 -301.625 cv
24.5499 -297.771 li
25.4737 -297.771 li
25.4737 -301.669 li
25.4737 -302.901 24.8138 -303.462 23.8457 -303.462 cv
23.208 -303.462 22.7788 -303.133 22.482 -302.582 cv
22.196 -303.155 21.7558 -303.462 21.1619 -303.462 cv
20.5459 -303.462 20.0728 -303.188 19.7758 -302.549 cv
19.7539 -302.549 li
19.7208 -303.386 li
18.8298 -303.386 li
18.8409 -302.989 18.8738 -302.582 18.8738 -302.175 cv
cp
26.9038 -297.771 mo
27.8276 -297.771 li
27.8276 -303.386 li
26.9038 -303.386 li
cp
26.8595 -305.697 mo
26.8595 -304.596 li
27.8718 -304.596 li
27.8718 -305.697 li
cp
31.7329 -298.587 mo
31.5568 -298.51 31.3919 -298.444 31.1608 -298.444 cv
30.7427 -298.444 30.5777 -298.686 30.5777 -299.324 cv
30.5777 -302.637 li
31.7329 -302.637 li
31.7329 -303.386 li
30.5777 -303.386 li
30.5777 -304.805 li
29.6537 -304.53 li
29.6537 -303.386 li
28.7627 -303.386 li
28.7627 -302.637 li
29.6537 -302.637 li
29.6537 -299.027 li
29.6537 -298.036 30.1046 -297.693 30.9516 -297.693 cv
31.2048 -297.693 31.5126 -297.759 31.7329 -297.838 cv
cp
36.3746 -300.304 mo
36.3746 -300.799 li
36.3746 -302.45 35.6705 -303.462 34.4059 -303.462 cv
33.0087 -303.462 32.2389 -302.34 32.2389 -300.579 cv
32.2389 -298.818 33.0087 -297.693 34.4938 -297.693 cv
35.0545 -297.693 35.6265 -297.816 36.0668 -298.025 cv
36.0225 -298.862 li
35.7036 -298.631 35.1977 -298.399 34.7356 -298.399 cv
33.7129 -298.399 33.2069 -299.005 33.2069 -300.304 cv
cp
33.2069 -301.008 mo
33.229 -302.318 33.7568 -302.758 34.3509 -302.758 cv
35.0877 -302.758 35.4505 -302.175 35.4505 -301.008 cv
cp
40.1257 -297.771 mo
41.0495 -297.771 li
41.0495 -306.027 li
40.1257 -306.027 li
cp
42.7988 -302.131 mo
43.1177 -302.483 43.6676 -302.714 44.2393 -302.714 cv
44.6243 -302.714 44.9874 -302.615 45.1745 -302.362 cv
45.3505 -302.12 45.3834 -301.878 45.3834 -301.459 cv
45.3834 -301.206 li
44.8442 -301.206 li
42.9195 -301.206 42.2046 -300.403 42.2046 -299.313 cv
42.2046 -298.234 42.8977 -297.693 43.8212 -297.693 cv
44.6793 -297.693 45.1413 -298.103 45.3944 -298.532 cv
45.4163 -298.532 li
45.4713 -297.771 li
46.3075 -297.771 li
46.2854 -297.97 46.2633 -298.301 46.2633 -298.631 cv
46.2633 -301.558 li
46.2633 -302.351 46.0215 -302.692 45.7794 -302.934 cv
45.6034 -303.11 45.1084 -303.462 44.2833 -303.462 cv
43.7333 -303.462 43.1616 -303.297 42.6995 -303 cv
cp
45.3834 -299.819 mo
45.3834 -299.049 44.8774 -298.399 44.0743 -298.399 cv
43.4366 -298.399 43.1287 -298.785 43.1287 -299.379 cv
43.1287 -300.029 43.6457 -300.546 44.7343 -300.546 cv
44.9874 -300.546 45.2184 -300.546 45.3834 -300.524 cv
cp
50.6082 -297.771 mo
51.5323 -297.771 li
51.5323 -302.637 li
52.5443 -302.637 li
52.5443 -303.386 li
51.5323 -303.386 li
51.5323 -304.563 li
51.5323 -305.125 51.6862 -305.411 52.2033 -305.411 cv
52.4232 -305.411 52.6214 -305.367 52.7314 -305.279 cv
52.7314 -306.071 li
52.5222 -306.126 52.2583 -306.159 52.0054 -306.159 cv
51.0263 -306.159 50.6082 -305.554 50.6082 -304.64 cv
50.6082 -303.386 li
49.7173 -303.386 li
49.7173 -302.637 li
50.6082 -302.637 li
cp
53.3581 -297.771 mo
54.2819 -297.771 li
54.2819 -306.027 li
53.3581 -306.027 li
cp
59.5731 -300.304 mo
59.5731 -300.799 li
59.5731 -302.45 58.8689 -303.462 57.6041 -303.462 cv
56.2069 -303.462 55.437 -302.34 55.437 -300.579 cv
55.437 -298.818 56.2069 -297.693 57.692 -297.693 cv
58.253 -297.693 58.825 -297.816 59.2652 -298.025 cv
59.221 -298.862 li
58.9021 -298.631 58.3961 -298.399 57.9341 -298.399 cv
56.911 -298.399 56.4051 -299.005 56.4051 -300.304 cv
cp
56.4051 -301.008 mo
56.4272 -302.318 56.955 -302.758 57.5491 -302.758 cv
58.2861 -302.758 58.649 -302.175 58.649 -301.008 cv
cp
60.024 -297.771 mo
61.036 -297.771 li
62.213 -300.095 li
63.456 -297.771 li
64.5119 -297.771 li
62.8068 -300.755 li
64.369 -303.386 li
63.3567 -303.386 li
62.2787 -301.36 li
61.201 -303.386 li
60.189 -303.386 li
61.6851 -300.788 li
cp
65.3699 -297.771 mo
66.2937 -297.771 li
66.2937 -303.386 li
65.3699 -303.386 li
cp
65.3257 -305.697 mo
65.3257 -304.596 li
66.3379 -304.596 li
66.3379 -305.697 li
cp
68.5597 -300.579 mo
68.5597 -301.988 68.945 -302.714 69.792 -302.714 cv
70.6389 -302.714 71.0239 -301.988 71.0239 -300.579 cv
71.0239 -299.17 70.6389 -298.444 69.792 -298.444 cv
68.945 -298.444 68.5597 -299.17 68.5597 -300.579 cv
cp
67.6359 -298.807 mo
67.6359 -298.466 67.6028 -298.114 67.5917 -297.771 cv
68.4829 -297.771 li
68.5158 -298.598 li
68.5379 -298.598 li
68.78 -298.158 69.1978 -297.693 70.0119 -297.693 cv
71.1665 -297.693 71.9477 -298.642 71.9477 -300.579 cv
71.9477 -302.516 71.1665 -303.462 70.0119 -303.462 cv
69.3738 -303.462 68.9557 -303.21 68.5818 -302.615 cv
68.5597 -302.615 li
68.5597 -306.027 li
67.6359 -306.027 li
cp
73.1028 -297.771 mo
74.0266 -297.771 li
74.0266 -303.386 li
73.1028 -303.386 li
cp
73.0586 -305.697 mo
73.0586 -304.596 li
74.0709 -304.596 li
74.0709 -305.697 li
cp
75.5449 -297.771 mo
76.4687 -297.771 li
76.4687 -306.027 li
75.5449 -306.027 li
cp
77.9869 -297.771 mo
78.9107 -297.771 li
78.9107 -303.386 li
77.9869 -303.386 li
cp
77.9427 -305.697 mo
77.9427 -304.596 li
78.9549 -304.596 li
78.9549 -305.697 li
cp
83.4535 -300.579 mo
83.4535 -299.17 83.0686 -298.444 82.2216 -298.444 cv
81.3746 -298.444 80.9897 -299.17 80.9897 -300.579 cv
80.9897 -301.988 81.3746 -302.714 82.2216 -302.714 cv
83.0686 -302.714 83.4535 -301.988 83.4535 -300.579 cv
cp
84.3776 -306.027 mo
83.4535 -306.027 li
83.4535 -302.615 li
83.4317 -302.615 li
83.0575 -303.21 82.6397 -303.462 82.0016 -303.462 cv
80.8465 -303.462 80.0658 -302.516 80.0658 -300.579 cv
80.0658 -298.642 80.8465 -297.693 82.0016 -297.693 cv
82.8157 -297.693 83.2336 -298.158 83.4756 -298.598 cv
83.4975 -298.598 li
83.5306 -297.771 li
84.4216 -297.771 li
84.4105 -298.114 84.3776 -298.466 84.3776 -298.807 cv
cp
85.9509 -302.131 mo
86.2697 -302.483 86.8197 -302.714 87.3917 -302.714 cv
87.7766 -302.714 88.1398 -302.615 88.3269 -302.362 cv
88.5029 -302.12 88.5358 -301.878 88.5358 -301.459 cv
88.5358 -301.206 li
87.9966 -301.206 li
86.0716 -301.206 85.3567 -300.403 85.3567 -299.313 cv
85.3567 -298.234 86.0498 -297.693 86.9736 -297.693 cv
87.8316 -297.693 88.2937 -298.103 88.5468 -298.532 cv
88.5686 -298.532 li
88.6236 -297.771 li
89.4596 -297.771 li
89.4375 -297.97 89.4154 -298.301 89.4154 -298.631 cv
89.4154 -301.558 li
89.4154 -302.351 89.1738 -302.692 88.9318 -302.934 cv
88.7557 -303.11 88.2608 -303.462 87.4356 -303.462 cv
86.8857 -303.462 86.3137 -303.297 85.8516 -303 cv
cp
88.5358 -299.819 mo
88.5358 -299.049 88.0298 -298.399 87.2267 -298.399 cv
86.5886 -298.399 86.2808 -298.785 86.2808 -299.379 cv
86.2808 -300.029 86.7978 -300.546 87.8866 -300.546 cv
88.1398 -300.546 88.3708 -300.546 88.5358 -300.524 cv
cp
93.8374 -300.579 mo
93.8374 -299.17 93.4525 -298.444 92.6055 -298.444 cv
91.7585 -298.444 91.3735 -299.17 91.3735 -300.579 cv
91.3735 -301.988 91.7585 -302.714 92.6055 -302.714 cv
93.4525 -302.714 93.8374 -301.988 93.8374 -300.579 cv
cp
94.7615 -306.027 mo
93.8374 -306.027 li
93.8374 -302.615 li
93.8156 -302.615 li
93.4414 -303.21 93.0236 -303.462 92.3855 -303.462 cv
91.2304 -303.462 90.4494 -302.516 90.4494 -300.579 cv
90.4494 -298.642 91.2304 -297.693 92.3855 -297.693 cv
93.1996 -297.693 93.6174 -298.158 93.8595 -298.598 cv
93.8813 -298.598 li
93.9145 -297.771 li
94.8054 -297.771 li
94.7944 -298.114 94.7615 -298.466 94.7615 -298.807 cv
cp
98.6552 -297.771 mo
99.5793 -297.771 li
99.5793 -301.151 li
99.5793 -302.164 100.041 -302.67 100.767 -302.67 cv
101.361 -302.67 101.691 -302.285 101.691 -301.393 cv
101.691 -297.771 li
102.615 -297.771 li
102.615 -301.669 li
102.615 -302.901 101.955 -303.462 100.976 -303.462 cv
100.327 -303.462 99.8542 -303.188 99.5571 -302.549 cv
99.5353 -302.549 li
99.5022 -303.386 li
98.6112 -303.386 li
98.6223 -302.989 98.6552 -302.582 98.6552 -302.175 cv
cp
107.818 -300.304 mo
107.818 -300.799 li
107.818 -302.45 107.114 -303.462 105.849 -303.462 cv
104.452 -303.462 103.682 -302.34 103.682 -300.579 cv
103.682 -298.818 104.452 -297.693 105.937 -297.693 cv
106.498 -297.693 107.07 -297.816 107.51 -298.025 cv
107.466 -298.862 li
107.147 -298.631 106.641 -298.399 106.179 -298.399 cv
105.156 -298.399 104.65 -299.005 104.65 -300.304 cv
cp
104.65 -301.008 mo
104.672 -302.318 105.2 -302.758 105.794 -302.758 cv
106.531 -302.758 106.894 -302.175 106.894 -301.008 cv
cp
112.185 -303.242 mo
111.888 -303.386 111.459 -303.462 111.074 -303.462 cv
109.512 -303.462 108.566 -302.34 108.566 -300.524 cv
108.566 -298.939 109.38 -297.693 111.052 -297.693 cv
111.459 -297.693 111.954 -297.816 112.229 -297.937 cv
112.185 -298.785 li
111.866 -298.62 111.492 -298.488 111.052 -298.488 cv
110.15 -298.488 109.534 -299.225 109.534 -300.524 cv
109.534 -302.043 110.172 -302.67 111.074 -302.67 cv
111.503 -302.67 111.822 -302.582 112.141 -302.406 cv
cp
116.981 -300.304 mo
116.981 -300.799 li
116.981 -302.45 116.277 -303.462 115.012 -303.462 cv
113.615 -303.462 112.845 -302.34 112.845 -300.579 cv
112.845 -298.818 113.615 -297.693 115.1 -297.693 cv
115.661 -297.693 116.233 -297.816 116.673 -298.025 cv
116.629 -298.862 li
116.31 -298.631 115.804 -298.399 115.342 -298.399 cv
114.319 -298.399 113.813 -299.005 113.813 -300.304 cv
cp
113.813 -301.008 mo
113.835 -302.318 114.363 -302.758 114.957 -302.758 cv
115.694 -302.758 116.057 -302.175 116.057 -301.008 cv
cp
117.707 -298.025 mo
118.114 -297.816 118.642 -297.693 119.225 -297.693 cv
120.512 -297.693 121.029 -298.466 121.029 -299.434 cv
121.029 -300.128 120.6 -300.59 119.918 -300.865 cv
119.588 -300.997 li
118.972 -301.239 118.642 -301.492 118.642 -301.944 cv
118.642 -302.384 118.961 -302.714 119.566 -302.714 cv
119.984 -302.714 120.38 -302.604 120.666 -302.472 cv
120.71 -303.265 li
120.391 -303.386 119.984 -303.462 119.522 -303.462 cv
118.433 -303.462 117.718 -302.758 117.718 -301.834 cv
117.718 -301.118 118.015 -300.755 118.818 -300.392 cv
119.434 -300.117 li
119.951 -299.885 120.149 -299.622 120.149 -299.236 cv
120.149 -298.807 119.786 -298.444 119.082 -298.444 cv
118.62 -298.444 118.18 -298.609 117.762 -298.862 cv
cp
122.393 -302.131 mo
122.712 -302.483 123.262 -302.714 123.834 -302.714 cv
124.219 -302.714 124.582 -302.615 124.769 -302.362 cv
124.945 -302.12 124.978 -301.878 124.978 -301.459 cv
124.978 -301.206 li
124.439 -301.206 li
122.514 -301.206 121.799 -300.403 121.799 -299.313 cv
121.799 -298.234 122.492 -297.693 123.416 -297.693 cv
124.274 -297.693 124.736 -298.103 124.989 -298.532 cv
125.011 -298.532 li
125.066 -297.771 li
125.902 -297.771 li
125.88 -297.97 125.858 -298.301 125.858 -298.631 cv
125.858 -301.558 li
125.858 -302.351 125.616 -302.692 125.374 -302.934 cv
125.198 -303.11 124.703 -303.462 123.878 -303.462 cv
123.328 -303.462 122.756 -303.297 122.294 -303 cv
cp
124.978 -299.819 mo
124.978 -299.049 124.472 -298.399 123.669 -298.399 cv
123.031 -298.399 122.723 -298.785 122.723 -299.379 cv
122.723 -300.029 123.24 -300.546 124.329 -300.546 cv
124.582 -300.546 124.813 -300.546 124.978 -300.524 cv
cp
127.167 -297.771 mo
128.091 -297.771 li
128.091 -300.744 li
128.091 -301.966 128.597 -302.582 129.312 -302.582 cv
129.433 -302.582 129.554 -302.571 129.664 -302.549 cv
129.664 -303.462 li
128.839 -303.462 128.366 -303.188 128.069 -302.505 cv
128.047 -302.505 li
128.014 -303.386 li
127.123 -303.386 li
127.134 -302.989 127.167 -302.582 127.167 -302.175 cv
cp
130.511 -297.771 mo
131.435 -297.771 li
131.435 -303.386 li
130.511 -303.386 li
cp
130.467 -305.697 mo
130.467 -304.596 li
131.479 -304.596 li
131.479 -305.697 li
cp
133.184 -302.131 mo
133.503 -302.483 134.053 -302.714 134.625 -302.714 cv
135.009 -302.714 135.373 -302.615 135.56 -302.362 cv
135.736 -302.12 135.769 -301.878 135.769 -301.459 cv
135.769 -301.206 li
135.23 -301.206 li
133.305 -301.206 132.59 -300.403 132.59 -299.313 cv
132.59 -298.234 133.283 -297.693 134.207 -297.693 cv
135.064 -297.693 135.527 -298.103 135.78 -298.532 cv
135.802 -298.532 li
135.857 -297.771 li
136.693 -297.771 li
136.671 -297.97 136.649 -298.301 136.649 -298.631 cv
136.649 -301.558 li
136.649 -302.351 136.407 -302.692 136.165 -302.934 cv
135.989 -303.11 135.494 -303.462 134.669 -303.462 cv
134.119 -303.462 133.547 -303.297 133.085 -303 cv
cp
135.769 -299.819 mo
135.769 -299.049 135.263 -298.399 134.46 -298.399 cv
133.822 -298.399 133.514 -298.785 133.514 -299.379 cv
133.514 -300.029 134.031 -300.546 135.12 -300.546 cv
135.373 -300.546 135.604 -300.546 135.769 -300.524 cv
cp
141.433 -300.579 mo
141.433 -301.988 141.819 -302.714 142.666 -302.714 cv
143.513 -302.714 143.897 -301.988 143.897 -300.579 cv
143.897 -299.17 143.513 -298.444 142.666 -298.444 cv
141.819 -298.444 141.433 -299.17 141.433 -300.579 cv
cp
140.51 -295.393 mo
141.433 -295.393 li
141.433 -298.543 li
141.456 -298.543 li
141.829 -297.948 142.248 -297.693 142.886 -297.693 cv
144.04 -297.693 144.821 -298.642 144.821 -300.579 cv
144.821 -302.516 144.04 -303.462 142.886 -303.462 cv
142.071 -303.462 141.654 -303 141.412 -302.56 cv
141.389 -302.56 li
141.357 -303.386 li
140.465 -303.386 li
140.476 -303.044 140.51 -302.692 140.51 -302.351 cv
cp
ef
146.207 -302.131 mo
146.526 -302.483 147.076 -302.714 147.648 -302.714 cv
148.033 -302.714 148.396 -302.615 148.584 -302.362 cv
148.759 -302.12 148.792 -301.878 148.792 -301.459 cv
148.792 -301.206 li
148.253 -301.206 li
146.328 -301.206 145.613 -300.403 145.613 -299.313 cv
145.613 -298.234 146.306 -297.693 147.23 -297.693 cv
148.088 -297.693 148.55 -298.103 148.803 -298.532 cv
148.825 -298.532 li
148.88 -297.771 li
149.717 -297.771 li
149.694 -297.97 149.672 -298.301 149.672 -298.631 cv
149.672 -301.558 li
149.672 -302.351 149.431 -302.692 149.188 -302.934 cv
149.012 -303.11 148.517 -303.462 147.692 -303.462 cv
147.142 -303.462 146.57 -303.297 146.108 -303 cv
cp
148.792 -299.819 mo
148.792 -299.049 148.286 -298.399 147.483 -298.399 cv
146.845 -298.399 146.537 -298.785 146.537 -299.379 cv
146.537 -300.029 147.055 -300.546 148.143 -300.546 cv
148.396 -300.546 148.627 -300.546 148.792 -300.524 cv
cp
150.981 -297.771 mo
151.905 -297.771 li
151.905 -300.744 li
151.905 -301.966 152.411 -302.582 153.126 -302.582 cv
153.247 -302.582 153.368 -302.571 153.478 -302.549 cv
153.478 -303.462 li
152.654 -303.462 152.18 -303.188 151.883 -302.505 cv
151.862 -302.505 li
151.828 -303.386 li
150.937 -303.386 li
150.948 -302.989 150.981 -302.582 150.981 -302.175 cv
cp
154.556 -302.131 mo
154.875 -302.483 155.425 -302.714 155.997 -302.714 cv
156.382 -302.714 156.745 -302.615 156.932 -302.362 cv
157.108 -302.12 157.141 -301.878 157.141 -301.459 cv
157.141 -301.206 li
156.602 -301.206 li
154.677 -301.206 153.962 -300.403 153.962 -299.313 cv
153.962 -298.234 154.655 -297.693 155.579 -297.693 cv
156.437 -297.693 156.899 -298.103 157.152 -298.532 cv
157.174 -298.532 li
157.229 -297.771 li
158.065 -297.771 li
158.043 -297.97 158.021 -298.301 158.021 -298.631 cv
158.021 -301.558 li
158.021 -302.351 157.779 -302.692 157.537 -302.934 cv
157.361 -303.11 156.866 -303.462 156.041 -303.462 cv
155.491 -303.462 154.919 -303.297 154.457 -303 cv
cp
157.141 -299.819 mo
157.141 -299.049 156.635 -298.399 155.832 -298.399 cv
155.194 -298.399 154.886 -298.785 154.886 -299.379 cv
154.886 -300.029 155.403 -300.546 156.492 -300.546 cv
156.745 -300.546 156.976 -300.546 157.141 -300.524 cv
cp
-14.0815 -287.603 mo
-14.0815 -289.011 -13.6963 -289.738 -12.8493 -289.738 cv
-12.0023 -289.738 -11.6174 -289.011 -11.6174 -287.603 cv
-11.6174 -286.194 -12.0023 -285.467 -12.8493 -285.467 cv
-13.6963 -285.467 -14.0815 -286.194 -14.0815 -287.603 cv
cp
-15.0053 -282.417 mo
-14.0815 -282.417 li
-14.0815 -285.566 li
-14.0594 -285.566 li
-13.6855 -284.972 -13.2674 -284.717 -12.6293 -284.717 cv
-11.4745 -284.717 -10.6936 -285.665 -10.6936 -287.603 cv
-10.6936 -289.539 -11.4745 -290.486 -12.6293 -290.486 cv
-13.4434 -290.486 -13.8613 -290.024 -14.1034 -289.583 cv
-14.1255 -289.583 li
-14.1583 -290.409 li
-15.0496 -290.409 li
-15.0385 -290.068 -15.0053 -289.716 -15.0053 -289.375 cv
cp
-9.53839 -284.794 mo
-8.61459 -284.794 li
-8.61459 -290.409 li
-9.53839 -290.409 li
cp
-9.58267 -292.721 mo
-9.58267 -291.62 li
-8.57037 -291.62 li
-8.57037 -292.721 li
cp
-3.32349 -287.327 mo
-3.32349 -287.823 li
-3.32349 -289.474 -4.02759 -290.486 -5.29239 -290.486 cv
-6.68958 -290.486 -7.45947 -289.364 -7.45947 -287.603 cv
-7.45947 -285.841 -6.68958 -284.717 -5.20459 -284.717 cv
-4.64359 -284.717 -4.07147 -284.84 -3.63129 -285.049 cv
-3.67548 -285.885 li
-3.99438 -285.654 -4.5004 -285.423 -4.96249 -285.423 cv
-5.98547 -285.423 -6.49149 -286.029 -6.49149 -287.327 cv
cp
-6.49149 -288.031 mo
-6.46939 -289.341 -5.94159 -289.782 -5.34738 -289.782 cv
-4.61038 -289.782 -4.24759 -289.198 -4.24759 -288.031 cv
cp
-2.54248 -290.409 mo
-2.54248 -289.617 li
-.0346985 -289.617 li
-2.63037 -285.633 li
-2.63037 -284.796 li
.966522 -284.796 li
.966522 -285.588 li
-1.68478 -285.588 li
.911499 -289.572 li
.911499 -290.409 li
cp
2.29761 -289.155 mo
2.61652 -289.506 3.16641 -289.738 3.73853 -289.738 cv
4.12341 -289.738 4.48651 -289.639 4.67361 -289.386 cv
4.8497 -289.143 4.88251 -288.901 4.88251 -288.483 cv
4.88251 -288.23 li
4.34341 -288.23 li
2.41843 -288.23 1.70352 -287.426 1.70352 -286.337 cv
1.70352 -285.258 2.39661 -284.717 3.3204 -284.717 cv
4.17841 -284.717 4.6405 -285.126 4.89362 -285.555 cv
4.91541 -285.555 li
4.97043 -284.794 li
5.80661 -284.794 li
5.78452 -284.994 5.76242 -285.324 5.76242 -285.654 cv
5.76242 -288.582 li
5.76242 -289.375 5.5206 -289.716 5.2785 -289.958 cv
5.10251 -290.134 4.6076 -290.486 3.78241 -290.486 cv
3.23251 -290.486 2.66052 -290.321 2.19843 -290.024 cv
cp
4.88251 -286.843 mo
4.88251 -286.073 4.37662 -285.423 3.57352 -285.423 cv
2.93542 -285.423 2.62762 -285.809 2.62762 -286.403 cv
2.62762 -287.052 3.14462 -287.569 4.23343 -287.569 cv
4.48651 -287.569 4.71762 -287.569 4.88251 -287.547 cv
cp
6.77441 -285.049 mo
7.18143 -284.84 7.70923 -284.717 8.29233 -284.717 cv
9.57932 -284.717 10.0963 -285.489 10.0963 -286.458 cv
10.0963 -287.151 9.66711 -287.614 8.98511 -287.889 cv
8.65521 -288.021 li
8.03922 -288.263 7.70923 -288.516 7.70923 -288.967 cv
7.70923 -289.407 8.02811 -289.738 8.6333 -289.738 cv
9.05121 -289.738 9.4472 -289.628 9.73322 -289.496 cv
9.7771 -290.288 li
9.45822 -290.409 9.05121 -290.486 8.58911 -290.486 cv
7.50031 -290.486 6.7854 -289.782 6.7854 -288.857 cv
6.7854 -288.142 7.08252 -287.779 7.88531 -287.415 cv
8.50122 -287.14 li
9.01831 -286.909 9.21613 -286.645 9.21613 -286.26 cv
9.21613 -285.83 8.8533 -285.467 8.1492 -285.467 cv
7.6871 -285.467 7.24722 -285.633 6.82941 -285.885 cv
cp
16.8938 -287.603 mo
16.8938 -286.194 16.5088 -285.467 15.6621 -285.467 cv
14.8151 -285.467 14.4302 -286.194 14.4302 -287.603 cv
14.4302 -289.011 14.8151 -289.738 15.6621 -289.738 cv
16.5088 -289.738 16.8938 -289.011 16.8938 -287.603 cv
cp
17.8179 -293.05 mo
16.8938 -293.05 li
16.8938 -289.639 li
16.872 -289.639 li
16.4978 -290.233 16.0802 -290.486 15.4422 -290.486 cv
14.287 -290.486 13.5061 -289.539 13.5061 -287.603 cv
13.5061 -285.665 14.287 -284.717 15.4422 -284.717 cv
16.2563 -284.717 16.6738 -285.181 16.9159 -285.622 cv
16.9377 -285.622 li
16.9709 -284.794 li
17.8618 -284.794 li
17.8508 -285.137 17.8179 -285.489 17.8179 -285.83 cv
cp
22.933 -287.327 mo
22.933 -287.823 li
22.933 -289.474 22.2289 -290.486 20.964 -290.486 cv
19.5669 -290.486 18.797 -289.364 18.797 -287.603 cv
18.797 -285.841 19.5669 -284.717 21.0519 -284.717 cv
21.6129 -284.717 22.1849 -284.84 22.6251 -285.049 cv
22.5809 -285.885 li
22.262 -285.654 21.756 -285.423 21.294 -285.423 cv
20.271 -285.423 19.765 -286.029 19.765 -287.327 cv
cp
19.765 -288.031 mo
19.7871 -289.341 20.3149 -289.782 20.9091 -289.782 cv
21.6461 -289.782 22.0089 -289.198 22.0089 -288.031 cv
cp
29.7086 -287.603 mo
29.7086 -286.194 29.3237 -285.467 28.4767 -285.467 cv
27.6297 -285.467 27.2448 -286.194 27.2448 -287.603 cv
27.2448 -289.011 27.6297 -289.738 28.4767 -289.738 cv
29.3237 -289.738 29.7086 -289.011 29.7086 -287.603 cv
cp
30.6327 -293.05 mo
29.7086 -293.05 li
29.7086 -289.639 li
29.6868 -289.639 li
29.3126 -290.233 28.8948 -290.486 28.2567 -290.486 cv
27.1016 -290.486 26.3207 -289.539 26.3207 -287.603 cv
26.3207 -285.665 27.1016 -284.717 28.2567 -284.717 cv
29.0709 -284.717 29.4887 -285.181 29.7308 -285.622 cv
29.7526 -285.622 li
29.7857 -284.794 li
30.6767 -284.794 li
30.6656 -285.137 30.6327 -285.489 30.6327 -285.83 cv
cp
31.9749 -284.794 mo
32.8988 -284.794 li
32.8988 -290.409 li
31.9749 -290.409 li
cp
31.9307 -292.721 mo
31.9307 -291.62 li
32.943 -291.62 li
32.943 -292.721 li
cp
34.0318 -285.049 mo
34.4388 -284.84 34.9666 -284.717 35.5497 -284.717 cv
36.8366 -284.717 37.3537 -285.489 37.3537 -286.458 cv
37.3537 -287.151 36.9245 -287.614 36.2425 -287.889 cv
35.9126 -288.021 li
35.2966 -288.263 34.9666 -288.516 34.9666 -288.967 cv
34.9666 -289.407 35.2855 -289.738 35.8907 -289.738 cv
36.3086 -289.738 36.7046 -289.628 36.9906 -289.496 cv
37.0345 -290.288 li
36.7156 -290.409 36.3086 -290.486 35.8465 -290.486 cv
34.7577 -290.486 34.0428 -289.782 34.0428 -288.857 cv
34.0428 -288.142 34.3399 -287.779 35.1427 -287.415 cv
35.7586 -287.14 li
36.2757 -286.909 36.4735 -286.645 36.4735 -286.26 cv
36.4735 -285.83 36.1107 -285.467 35.4066 -285.467 cv
34.9445 -285.467 34.5049 -285.633 34.0868 -285.885 cv
cp
42.2596 -287.327 mo
42.2596 -287.823 li
42.2596 -289.474 41.5555 -290.486 40.2907 -290.486 cv
38.8935 -290.486 38.1236 -289.364 38.1236 -287.603 cv
38.1236 -285.841 38.8935 -284.717 40.3785 -284.717 cv
40.9395 -284.717 41.5115 -284.84 41.9518 -285.049 cv
41.9075 -285.885 li
41.5886 -285.654 41.0827 -285.423 40.6206 -285.423 cv
39.5976 -285.423 39.0916 -286.029 39.0916 -287.327 cv
cp
39.0916 -288.031 mo
39.1137 -289.341 39.6415 -289.782 40.2357 -289.782 cv
40.9727 -289.782 41.3355 -289.198 41.3355 -288.031 cv
cp
46.2964 -292.611 mo
46.2304 -292.302 46.1204 -292.137 45.9225 -292.137 cv
45.8454 -292.137 45.7576 -292.17 45.5373 -292.28 cv
45.0974 -292.5 44.8995 -292.555 44.7014 -292.555 cv
44.0854 -292.555 43.7333 -292.126 43.6568 -291.378 cv
44.2283 -291.378 li
44.2614 -291.73 44.4593 -291.851 44.6574 -291.851 cv
44.7674 -291.851 44.8335 -291.829 45.1745 -291.664 cv
45.5815 -291.466 45.7576 -291.432 45.9333 -291.432 cv
46.4614 -291.432 46.7474 -291.884 46.8685 -292.611 cv
cp
43.2826 -284.794 mo
44.2064 -284.794 li
44.2064 -288.175 li
44.2064 -289.188 44.6685 -289.694 45.3944 -289.694 cv
45.9883 -289.694 46.3185 -289.309 46.3185 -288.417 cv
46.3185 -284.794 li
47.2423 -284.794 li
47.2423 -288.692 li
47.2423 -289.925 46.5824 -290.486 45.6034 -290.486 cv
44.9545 -290.486 44.4814 -290.211 44.1843 -289.572 cv
44.1625 -289.572 li
44.1293 -290.409 li
43.2387 -290.409 li
43.2497 -290.013 43.2826 -289.606 43.2826 -289.198 cv
cp
49.2773 -287.603 mo
49.2773 -289.011 49.6844 -289.738 50.5643 -289.738 cv
51.4444 -289.738 51.8515 -289.011 51.8515 -287.603 cv
51.8515 -286.194 51.4444 -285.467 50.5643 -285.467 cv
49.6844 -285.467 49.2773 -286.194 49.2773 -287.603 cv
cp
48.3093 -287.603 mo
48.3093 -285.841 49.0792 -284.717 50.5643 -284.717 cv
52.0493 -284.717 52.8189 -285.841 52.8189 -287.603 cv
52.8189 -289.364 52.0493 -290.486 50.5643 -290.486 cv
49.0792 -290.486 48.3093 -289.364 48.3093 -287.603 cv
cp
59.6388 -287.603 mo
59.6388 -286.194 59.2539 -285.467 58.4069 -285.467 cv
57.5599 -285.467 57.1749 -286.194 57.1749 -287.603 cv
57.1749 -289.011 57.5599 -289.738 58.4069 -289.738 cv
59.2539 -289.738 59.6388 -289.011 59.6388 -287.603 cv
cp
60.5629 -293.05 mo
59.6388 -293.05 li
59.6388 -289.639 li
59.617 -289.639 li
59.2428 -290.233 58.825 -290.486 58.1869 -290.486 cv
57.0318 -290.486 56.2509 -289.539 56.2509 -287.603 cv
56.2509 -285.665 57.0318 -284.717 58.1869 -284.717 cv
59.001 -284.717 59.4189 -285.181 59.6609 -285.622 cv
59.6828 -285.622 li
59.7159 -284.794 li
60.6069 -284.794 li
60.5958 -285.137 60.5629 -285.489 60.5629 -285.83 cv
cp
65.6777 -287.327 mo
65.6777 -287.823 li
65.6777 -289.474 64.9736 -290.486 63.7088 -290.486 cv
62.3116 -290.486 61.542 -289.364 61.542 -287.603 cv
61.542 -285.841 62.3116 -284.717 63.7967 -284.717 cv
64.3577 -284.717 64.9297 -284.84 65.3699 -285.049 cv
65.3257 -285.885 li
65.0068 -285.654 64.5008 -285.423 64.0388 -285.423 cv
63.0157 -285.423 62.5097 -286.029 62.5097 -287.327 cv
cp
62.5097 -288.031 mo
62.5319 -289.341 63.0597 -289.782 63.6538 -289.782 cv
64.3908 -289.782 64.7537 -289.198 64.7537 -288.031 cv
cp
72.4534 -287.603 mo
72.4534 -286.194 72.0685 -285.467 71.2215 -285.467 cv
70.3748 -285.467 69.9898 -286.194 69.9898 -287.603 cv
69.9898 -289.011 70.3748 -289.738 71.2215 -289.738 cv
72.0685 -289.738 72.4534 -289.011 72.4534 -287.603 cv
cp
73.3775 -293.05 mo
72.4534 -293.05 li
72.4534 -289.639 li
72.4316 -289.639 li
72.0574 -290.233 71.6396 -290.486 71.0018 -290.486 cv
69.8467 -290.486 69.0657 -289.539 69.0657 -287.603 cv
69.0657 -285.665 69.8467 -284.717 71.0018 -284.717 cv
71.8156 -284.717 72.2334 -285.181 72.4755 -285.622 cv
72.4973 -285.622 li
72.5305 -284.794 li
73.4214 -284.794 li
73.4104 -285.137 73.3775 -285.489 73.3775 -285.83 cv
cp
74.7197 -284.794 mo
75.6435 -284.794 li
75.6435 -290.409 li
74.7197 -290.409 li
cp
74.6755 -292.721 mo
74.6755 -291.62 li
75.6877 -291.62 li
75.6877 -292.721 li
cp
77.4696 -284.794 mo
78.3937 -284.794 li
78.3937 -289.661 li
79.4057 -289.661 li
79.4057 -290.409 li
78.3937 -290.409 li
78.3937 -291.587 li
78.3937 -292.148 78.5476 -292.434 79.0646 -292.434 cv
79.2846 -292.434 79.4828 -292.39 79.5927 -292.302 cv
79.5927 -293.095 li
79.3835 -293.15 79.1196 -293.183 78.8668 -293.183 cv
77.8877 -293.183 77.4696 -292.577 77.4696 -291.664 cv
77.4696 -290.409 li
76.5787 -290.409 li
76.5787 -289.661 li
77.4696 -289.661 li
cp
83.9924 -287.327 mo
83.9924 -287.823 li
83.9924 -289.474 83.2883 -290.486 82.0234 -290.486 cv
80.6263 -290.486 79.8566 -289.364 79.8566 -287.603 cv
79.8566 -285.841 80.6263 -284.717 82.1113 -284.717 cv
82.6723 -284.717 83.2443 -284.84 83.6846 -285.049 cv
83.6403 -285.885 li
83.3214 -285.654 82.8154 -285.423 82.3534 -285.423 cv
81.3304 -285.423 80.8244 -286.029 80.8244 -287.327 cv
cp
80.8244 -288.031 mo
80.8465 -289.341 81.3743 -289.782 81.9685 -289.782 cv
82.7055 -289.782 83.0683 -289.198 83.0683 -288.031 cv
cp
85.0154 -284.794 mo
85.9395 -284.794 li
85.9395 -287.768 li
85.9395 -288.989 86.4455 -289.606 87.1604 -289.606 cv
87.2814 -289.606 87.4025 -289.595 87.5125 -289.572 cv
87.5125 -290.486 li
86.6876 -290.486 86.2145 -290.211 85.9174 -289.529 cv
85.8956 -289.529 li
85.8624 -290.409 li
84.9715 -290.409 li
84.9825 -290.013 85.0154 -289.606 85.0154 -289.198 cv
cp
92.1324 -287.327 mo
92.1324 -287.823 li
92.1324 -289.474 91.4282 -290.486 90.1634 -290.486 cv
88.7665 -290.486 87.9966 -289.364 87.9966 -287.603 cv
87.9966 -285.841 88.7665 -284.717 90.2513 -284.717 cv
90.8123 -284.717 91.3843 -284.84 91.8245 -285.049 cv
91.7803 -285.885 li
91.4614 -285.654 90.9554 -285.423 90.4934 -285.423 cv
89.4703 -285.423 88.9646 -286.029 88.9646 -287.327 cv
cp
88.9646 -288.031 mo
88.9868 -289.341 89.5143 -289.782 90.1084 -289.782 cv
90.8454 -289.782 91.2083 -289.198 91.2083 -288.031 cv
cp
93.1554 -284.794 mo
94.0795 -284.794 li
94.0795 -288.175 li
94.0795 -289.188 94.5415 -289.694 95.2675 -289.694 cv
95.8613 -289.694 96.1916 -289.309 96.1916 -288.417 cv
96.1916 -284.794 li
97.1154 -284.794 li
97.1154 -288.692 li
97.1154 -289.925 96.4555 -290.486 95.4764 -290.486 cv
94.8275 -290.486 94.3544 -290.211 94.0574 -289.572 cv
94.0355 -289.572 li
94.0024 -290.409 li
93.1114 -290.409 li
93.1225 -290.013 93.1554 -289.606 93.1554 -289.198 cv
cp
100.932 -285.61 mo
100.756 -285.533 100.591 -285.467 100.36 -285.467 cv
99.9421 -285.467 99.7771 -285.709 99.7771 -286.348 cv
99.7771 -289.661 li
100.932 -289.661 li
100.932 -290.409 li
99.7771 -290.409 li
99.7771 -291.829 li
98.853 -291.554 li
98.853 -290.409 li
97.9624 -290.409 li
97.9624 -289.661 li
98.853 -289.661 li
98.853 -286.05 li
98.853 -285.06 99.304 -284.717 100.151 -284.717 cv
100.404 -284.717 100.712 -284.783 100.932 -284.862 cv
cp
105.574 -287.327 mo
105.574 -287.823 li
105.574 -289.474 104.87 -290.486 103.605 -290.486 cv
102.208 -290.486 101.438 -289.364 101.438 -287.603 cv
101.438 -285.841 102.208 -284.717 103.693 -284.717 cv
104.254 -284.717 104.826 -284.84 105.266 -285.049 cv
105.222 -285.885 li
104.903 -285.654 104.397 -285.423 103.935 -285.423 cv
102.912 -285.423 102.406 -286.029 102.406 -287.327 cv
cp
102.406 -288.031 mo
102.428 -289.341 102.956 -289.782 103.55 -289.782 cv
104.287 -289.782 104.65 -289.198 104.65 -288.031 cv
cp
106.3 -285.049 mo
106.707 -284.84 107.235 -284.717 107.818 -284.717 cv
109.105 -284.717 109.622 -285.489 109.622 -286.458 cv
109.622 -287.151 109.193 -287.614 108.511 -287.889 cv
108.181 -288.021 li
107.565 -288.263 107.235 -288.516 107.235 -288.967 cv
107.235 -289.407 107.554 -289.738 108.159 -289.738 cv
108.577 -289.738 108.973 -289.628 109.259 -289.496 cv
109.303 -290.288 li
108.984 -290.409 108.577 -290.486 108.115 -290.486 cv
107.026 -290.486 106.311 -289.782 106.311 -288.857 cv
106.311 -288.142 106.608 -287.779 107.411 -287.415 cv
108.027 -287.14 li
108.544 -286.909 108.742 -286.645 108.742 -286.26 cv
108.742 -285.83 108.379 -285.467 107.675 -285.467 cv
107.213 -285.467 106.773 -285.633 106.355 -285.885 cv
cp
113.703 -284.794 mo
114.627 -284.794 li
114.627 -289.661 li
115.639 -289.661 li
115.639 -290.409 li
114.627 -290.409 li
114.627 -291.587 li
114.627 -292.148 114.781 -292.434 115.298 -292.434 cv
115.518 -292.434 115.716 -292.39 115.826 -292.302 cv
115.826 -293.095 li
115.617 -293.15 115.353 -293.183 115.1 -293.183 cv
114.121 -293.183 113.703 -292.577 113.703 -291.664 cv
113.703 -290.409 li
112.812 -290.409 li
112.812 -289.661 li
113.703 -289.661 li
cp
117.058 -287.603 mo
117.058 -289.011 117.465 -289.738 118.345 -289.738 cv
119.225 -289.738 119.632 -289.011 119.632 -287.603 cv
119.632 -286.194 119.225 -285.467 118.345 -285.467 cv
117.465 -285.467 117.058 -286.194 117.058 -287.603 cv
cp
116.09 -287.603 mo
116.09 -285.841 116.86 -284.717 118.345 -284.717 cv
119.83 -284.717 120.6 -285.841 120.6 -287.603 cv
120.6 -289.364 119.83 -290.486 118.345 -290.486 cv
116.86 -290.486 116.09 -289.364 116.09 -287.603 cv
cp
121.667 -284.794 mo
122.591 -284.794 li
122.591 -287.768 li
122.591 -288.989 123.097 -289.606 123.812 -289.606 cv
123.933 -289.606 124.054 -289.595 124.164 -289.572 cv
124.164 -290.486 li
123.339 -290.486 122.866 -290.211 122.569 -289.529 cv
122.547 -289.529 li
122.514 -290.409 li
121.623 -290.409 li
121.634 -290.013 121.667 -289.606 121.667 -289.198 cv
cp
124.923 -284.794 mo
125.847 -284.794 li
125.847 -288.263 li
125.847 -289.276 126.22 -289.694 126.902 -289.694 cv
127.453 -289.694 127.761 -289.364 127.761 -288.648 cv
127.761 -284.794 li
128.685 -284.794 li
128.685 -288.263 li
128.685 -289.276 129.058 -289.694 129.741 -289.694 cv
130.29 -289.694 130.599 -289.364 130.599 -288.648 cv
130.599 -284.794 li
131.523 -284.794 li
131.523 -288.692 li
131.523 -289.925 130.862 -290.486 129.894 -290.486 cv
129.257 -290.486 128.827 -290.156 128.531 -289.606 cv
128.245 -290.178 127.804 -290.486 127.211 -290.486 cv
126.595 -290.486 126.121 -290.211 125.824 -289.572 cv
125.803 -289.572 li
125.769 -290.409 li
124.879 -290.409 li
124.89 -290.013 124.923 -289.606 124.923 -289.198 cv
cp
133.184 -289.155 mo
133.503 -289.506 134.053 -289.738 134.625 -289.738 cv
135.009 -289.738 135.372 -289.639 135.559 -289.386 cv
135.735 -289.143 135.768 -288.901 135.768 -288.483 cv
135.768 -288.23 li
135.229 -288.23 li
133.305 -288.23 132.59 -287.426 132.59 -286.337 cv
132.59 -285.258 133.283 -284.717 134.206 -284.717 cv
135.064 -284.717 135.526 -285.126 135.779 -285.555 cv
135.801 -285.555 li
135.856 -284.794 li
136.692 -284.794 li
136.67 -284.994 136.648 -285.324 136.648 -285.654 cv
136.648 -288.582 li
136.648 -289.375 136.406 -289.716 136.164 -289.958 cv
135.988 -290.134 135.493 -290.486 134.668 -290.486 cv
134.119 -290.486 133.547 -290.321 133.085 -290.024 cv
cp
135.768 -286.843 mo
135.768 -286.073 135.262 -285.423 134.46 -285.423 cv
133.822 -285.423 133.514 -285.809 133.514 -286.403 cv
133.514 -287.052 134.031 -287.569 135.119 -287.569 cv
135.372 -287.569 135.603 -287.569 135.768 -287.547 cv
cp
140.433 -285.61 mo
140.256 -285.533 140.091 -285.467 139.86 -285.467 cv
139.442 -285.467 139.277 -285.709 139.277 -286.348 cv
139.277 -289.661 li
140.433 -289.661 li
140.433 -290.409 li
139.277 -290.409 li
139.277 -291.829 li
138.353 -291.554 li
138.353 -290.409 li
137.462 -290.409 li
137.462 -289.661 li
138.353 -289.661 li
138.353 -286.05 li
138.353 -285.06 138.804 -284.717 139.651 -284.717 cv
139.904 -284.717 140.212 -284.783 140.433 -284.862 cv
cp
141.907 -287.603 mo
141.907 -289.011 142.314 -289.738 143.193 -289.738 cv
144.073 -289.738 144.48 -289.011 144.48 -287.603 cv
144.48 -286.194 144.073 -285.467 143.193 -285.467 cv
142.314 -285.467 141.907 -286.194 141.907 -287.603 cv
cp
140.938 -287.603 mo
140.938 -285.841 141.708 -284.717 143.193 -284.717 cv
144.678 -284.717 145.448 -285.841 145.448 -287.603 cv
145.448 -289.364 144.678 -290.486 143.193 -290.486 cv
141.708 -290.486 140.938 -289.364 140.938 -287.603 cv
cp
146.218 -285.049 mo
146.625 -284.84 147.153 -284.717 147.736 -284.717 cv
149.023 -284.717 149.54 -285.489 149.54 -286.458 cv
149.54 -287.151 149.111 -287.614 148.429 -287.889 cv
148.099 -288.021 li
147.483 -288.263 147.153 -288.516 147.153 -288.967 cv
147.153 -289.407 147.472 -289.738 148.077 -289.738 cv
148.495 -289.738 148.891 -289.628 149.177 -289.496 cv
149.221 -290.288 li
148.902 -290.409 148.495 -290.486 148.033 -290.486 cv
146.944 -290.486 146.229 -289.782 146.229 -288.857 cv
146.229 -288.142 146.526 -287.779 147.329 -287.415 cv
147.945 -287.14 li
148.462 -286.909 148.66 -286.645 148.66 -286.26 cv
148.66 -285.83 148.297 -285.467 147.593 -285.467 cv
147.131 -285.467 146.691 -285.633 146.273 -285.885 cv
cp
150.299 -284.796 mo
151.355 -284.796 li
151.355 -286.029 li
150.299 -286.029 li
cp
ef
0 lj
.844604 -34.7828 mo
.844604 -20.5019 li
@
3.69342 -30.6763 mo
3.69342 -24.6084 li
@
6.54221 -30.6763 mo
6.54221 -24.6084 li
@
9.39102 -30.6763 mo
9.39102 -24.6084 li
@
12.2399 -30.6763 mo
12.2399 -24.6084 li
@
15.0884 -33.2422 mo
15.0884 -22.0425 li
@
17.9372 -30.6763 mo
17.9372 -24.6084 li
@
20.786 -30.6763 mo
20.786 -24.6084 li
@
23.6349 -30.6763 mo
23.6349 -24.6084 li
@
26.4837 -30.6763 mo
26.4837 -24.6084 li
@
29.3325 -34.7828 mo
29.3325 -20.5019 li
@
32.0475 -30.6763 mo
32.0475 -24.6084 li
@
34.8963 -30.6763 mo
34.8963 -24.6084 li
@
37.7449 -30.6763 mo
37.7449 -24.6084 li
@
40.5937 -30.6763 mo
40.5937 -24.6084 li
@
43.4425 -33.2422 mo
43.4425 -22.0425 li
@
46.2913 -30.6763 mo
46.2913 -24.6084 li
@
49.1401 -30.6763 mo
49.1401 -24.6084 li
@
51.989 -30.6763 mo
51.989 -24.6084 li
@
54.8378 -30.6763 mo
54.8378 -24.6084 li
@
57.6866 -34.7828 mo
57.6866 -20.5019 li
@
60.4013 -30.6763 mo
60.4013 -24.6084 li
@
63.2502 -30.6763 mo
63.2502 -24.6084 li
@
66.099 -30.6763 mo
66.099 -24.6084 li
@
68.9478 -30.6763 mo
68.9478 -24.6084 li
@
71.7966 -33.2422 mo
71.7966 -22.0425 li
@
74.6454 -30.6763 mo
74.6454 -24.6084 li
@
77.4943 -30.6763 mo
77.4943 -24.6084 li
@
80.3431 -30.6763 mo
80.3431 -24.6084 li
@
83.1919 -30.6763 mo
83.1919 -24.6084 li
@
86.0407 -34.7828 mo
86.0407 -20.5019 li
@
88.7554 -30.6763 mo
88.7554 -24.6084 li
@
91.6043 -30.6763 mo
91.6043 -24.6084 li
@
94.4531 -30.6763 mo
94.4531 -24.6084 li
@
97.3019 -30.6763 mo
97.3019 -24.6084 li
@
100.151 -33.2422 mo
100.151 -22.0425 li
@
103 -30.6763 mo
103 -24.6084 li
@
105.848 -30.6763 mo
105.848 -24.6084 li
@
108.697 -30.6763 mo
108.697 -24.6084 li
@
111.546 -30.6763 mo
111.546 -24.6084 li
@
114.395 -34.7828 mo
114.395 -20.5019 li
@
117.11 -30.6763 mo
117.11 -24.6084 li
@
119.958 -30.6763 mo
119.958 -24.6084 li
@
122.807 -30.6763 mo
122.807 -24.6084 li
@
125.656 -30.6763 mo
125.656 -24.6084 li
@
128.505 -33.2422 mo
128.505 -22.0425 li
@
131.354 -30.6763 mo
131.354 -24.6084 li
@
134.202 -30.6763 mo
134.202 -24.6084 li
@
137.051 -30.6763 mo
137.051 -24.6084 li
@
139.9 -30.6763 mo
139.9 -24.6084 li
@
142.749 -34.7828 mo
142.749 -20.5019 li
@
145.464 -30.6763 mo
145.464 -24.6084 li
@
148.313 -30.6763 mo
148.313 -24.6084 li
@
151.161 -30.6763 mo
151.161 -24.6084 li
@
154.01 -30.6763 mo
154.01 -24.6084 li
@
156.859 -33.2422 mo
156.859 -22.0425 li
@
159.707 -30.6763 mo
159.707 -24.6084 li
@
162.556 -30.6763 mo
162.556 -24.6084 li
@
165.405 -30.6763 mo
165.405 -24.6084 li
@
168.254 -30.6763 mo
168.254 -24.6084 li
@
171.103 -34.7828 mo
171.103 -20.5019 li
@
173.818 -30.6763 mo
173.818 -24.6084 li
@
176.667 -30.6763 mo
176.667 -24.6084 li
@
179.515 -30.6763 mo
179.515 -24.6084 li
@
182.364 -30.6763 mo
182.364 -24.6084 li
@
185.213 -33.2422 mo
185.213 -22.0425 li
@
188.062 -30.6763 mo
188.062 -24.6084 li
@
190.91 -30.6763 mo
190.91 -24.6084 li
@
193.759 -30.6763 mo
193.759 -24.6084 li
@
196.608 -30.6763 mo
196.608 -24.6084 li
@
199.457 -34.7828 mo
199.457 -20.5019 li
@
202.172 -30.6763 mo
202.172 -24.6084 li
@
205.02 -30.6763 mo
205.02 -24.6084 li
@
207.869 -30.6763 mo
207.869 -24.6084 li
@
210.718 -30.6763 mo
210.718 -24.6084 li
@
213.567 -33.2422 mo
213.567 -22.0425 li
@
216.416 -30.6763 mo
216.416 -24.6084 li
@
219.264 -30.6763 mo
219.264 -24.6084 li
@
222.113 -30.6763 mo
222.113 -24.6084 li
@
224.962 -30.6763 mo
224.962 -24.6084 li
@
227.811 -34.7828 mo
227.811 -20.5019 li
@
230.526 -30.6763 mo
230.526 -24.6084 li
@
233.375 -30.6763 mo
233.375 -24.6084 li
@
236.223 -30.6763 mo
236.223 -24.6084 li
@
239.072 -30.6763 mo
239.072 -24.6084 li
@
241.921 -33.2422 mo
241.921 -22.0425 li
@
244.77 -30.6763 mo
244.77 -24.6084 li
@
247.619 -30.6763 mo
247.619 -24.6084 li
@
250.467 -30.6763 mo
250.467 -24.6084 li
@
253.316 -30.6763 mo
253.316 -24.6084 li
@
256.165 -34.7828 mo
256.165 -20.5019 li
@
258.88 -30.6763 mo
258.88 -24.6084 li
@
261.729 -30.6763 mo
261.729 -24.6084 li
@
264.577 -30.6763 mo
264.577 -24.6084 li
@
267.426 -30.6763 mo
267.426 -24.6084 li
@
270.275 -33.2422 mo
270.275 -22.0425 li
@
273.124 -30.6763 mo
273.124 -24.6084 li
@
275.973 -30.6763 mo
275.973 -24.6084 li
@
-22.1832 -57.1995 mo
-7.90228 -57.1995 li
@
-18.0767 -59.9145 mo
-12.0088 -59.9145 li
@
-18.0767 -62.7633 mo
-12.0088 -62.7633 li
@
-18.0767 -65.6121 mo
-12.0088 -65.6121 li
@
-18.0767 -68.461 mo
-12.0088 -68.461 li
@
-20.6426 -71.3095 mo
-9.44287 -71.3095 li
@
-18.0767 -74.1583 mo
-12.0088 -74.1583 li
@
-18.0767 -77.0071 mo
-12.0088 -77.0071 li
@
-18.0767 -79.856 mo
-12.0088 -79.856 li
@
-18.0767 -82.7048 mo
-12.0088 -82.7048 li
@
-22.1832 -85.5536 mo
-7.90228 -85.5536 li
@
-18.0767 -88.2686 mo
-12.0088 -88.2686 li
@
-18.0767 -91.1174 mo
-12.0088 -91.1174 li
@
-18.0767 -93.9663 mo
-12.0088 -93.9663 li
@
-18.0767 -96.8148 mo
-12.0088 -96.8148 li
@
-20.6426 -99.6636 mo
-9.44287 -99.6636 li
@
-18.0767 -102.512 mo
-12.0088 -102.512 li
@
-18.0767 -105.361 mo
-12.0088 -105.361 li
@
-18.0767 -108.21 mo
-12.0088 -108.21 li
@
-18.0767 -111.059 mo
-12.0088 -111.059 li
@
-22.1832 -113.908 mo
-7.90228 -113.908 li
@
-18.0767 -116.623 mo
-12.0088 -116.623 li
@
-18.0767 -119.471 mo
-12.0088 -119.471 li
@
-18.0767 -122.32 mo
-12.0088 -122.32 li
@
-18.0767 -125.169 mo
-12.0088 -125.169 li
@
-20.6426 -128.018 mo
-9.44287 -128.018 li
@
-18.0767 -130.867 mo
-12.0088 -130.867 li
@
-18.0767 -133.715 mo
-12.0088 -133.715 li
@
-18.0767 -136.564 mo
-12.0088 -136.564 li
@
-18.0767 -139.413 mo
-12.0088 -139.413 li
@
-22.1832 -142.262 mo
-7.90228 -142.262 li
@
-18.0767 -144.977 mo
-12.0088 -144.977 li
@
-18.0767 -147.825 mo
-12.0088 -147.825 li
@
-18.0767 -150.674 mo
-12.0088 -150.674 li
@
-18.0767 -153.523 mo
-12.0088 -153.523 li
@
-20.6426 -156.372 mo
-9.44287 -156.372 li
@
-18.0767 -159.221 mo
-12.0088 -159.221 li
@
-18.0767 -162.07 mo
-12.0088 -162.07 li
@
-18.0767 -164.918 mo
-12.0088 -164.918 li
@
-18.0767 -167.767 mo
-12.0088 -167.767 li
@
-22.1832 -170.616 mo
-7.90228 -170.616 li
@
-18.0767 -173.331 mo
-12.0088 -173.331 li
@
-18.0767 -176.18 mo
-12.0088 -176.18 li
@
-18.0767 -179.028 mo
-12.0088 -179.028 li
@
-18.0767 -181.877 mo
-12.0088 -181.877 li
@
-20.6426 -184.726 mo
-9.44287 -184.726 li
@
-18.0767 -187.575 mo
-12.0088 -187.575 li
@
-18.0767 -190.424 mo
-12.0088 -190.424 li
@
-18.0767 -193.272 mo
-12.0088 -193.272 li
@
-18.0767 -196.121 mo
-12.0088 -196.121 li
@
-22.1832 -198.97 mo
-7.90228 -198.97 li
@
-22.1832 96.609 mo
-7.90228 96.609 li
@
-18.0767 93.8939 mo
-12.0088 93.8939 li
@
-18.0767 91.0451 mo
-12.0088 91.0451 li
@
-18.0767 88.1963 mo
-12.0088 88.1963 li
@
-18.0767 85.3475 mo
-12.0088 85.3475 li
@
-20.6426 82.4989 mo
-9.44287 82.4989 li
@
-18.0767 79.6501 mo
-12.0088 79.6501 li
@
-18.0767 76.8013 mo
-12.0088 76.8013 li
@
-18.0767 73.9525 mo
-12.0088 73.9525 li
@
-18.0767 71.1037 mo
-12.0088 71.1037 li
@
-22.1832 68.2548 mo
-7.90228 68.2548 li
@
-18.0767 65.5398 mo
-12.0088 65.5398 li
@
-18.0767 62.691 mo
-12.0088 62.691 li
@
-18.0767 59.8422 mo
-12.0088 59.8422 li
@
-18.0767 56.9936 mo
-12.0088 56.9936 li
@
-20.6426 54.1448 mo
-9.44287 54.1448 li
@
-18.0767 51.296 mo
-12.0088 51.296 li
@
-18.0767 48.4472 mo
-12.0088 48.4472 li
@
-18.0767 45.5984 mo
-12.0088 45.5984 li
@
-18.0767 42.7496 mo
-12.0088 42.7496 li
@
-22.1832 39.9007 mo
-7.90228 39.9007 li
@
-18.0767 37.1857 mo
-12.0088 37.1857 li
@
-18.0767 34.3372 mo
-12.0088 34.3372 li
@
-18.0767 31.4884 mo
-12.0088 31.4884 li
@
-18.0767 28.6395 mo
-12.0088 28.6395 li
@
-20.6426 25.7907 mo
-9.44287 25.7907 li
@
-18.0767 22.9419 mo
-12.0088 22.9419 li
@
-18.0767 20.0931 mo
-12.0088 20.0931 li
@
-18.0767 17.2443 mo
-12.0088 17.2443 li
@
-18.0767 14.3954 mo
-12.0088 14.3954 li
@
-22.1832 11.5466 mo
-7.90228 11.5466 li
@
-18.0767 8.83189 mo
-12.0088 8.83189 li
@
-18.0767 5.98309 mo
-12.0088 5.98309 li
@
-18.0767 3.1342 mo
-12.0088 3.1342 li
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 /1 ]]
[/Gradient [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources:
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures:
%%DocumentSuppliedFeatures:
%%DocumentCustomColors:
%%CMYKCustomColor:
%%RGBCustomColor:
%%EOF
